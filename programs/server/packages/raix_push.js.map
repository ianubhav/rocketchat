{"version":3,"sources":["meteor://ðŸ’»app/packages/raix:push/lib/common/main.js","meteor://ðŸ’»app/packages/raix:push/lib/common/notifications.js","meteor://ðŸ’»app/packages/raix:push/lib/server/push.api.js","meteor://ðŸ’»app/packages/raix:push/lib/server/server.js"],"names":["Push","EventState","_matchToken","Match","OneOf","apn","String","gcm","checkClientSecurity","options","certData","Error","keyData","passphrase","apiKey","init","console","warn","notifications","Mongo","Collection","_validateDocument","notification","check","from","title","text","badge","Optional","Number","sound","notId","Integer","query","token","tokens","payload","Object","delayUntil","Date","createdAt","createdBy","length","send","currentUser","Meteor","isClient","userId","isServer","_","extend","pick","test","JSON","stringify","insert","allow","rules","apply","deny","setBadge","isConfigured","Configure","self","debug","log","_replaceToken","currentToken","newToken","emitState","_removeToken","production","Boolean","development","gateway","absoluteUrl","error","Npm","require","apnConnection","Connection","on","bindEnvironment","errCode","recipient","indexOf","sendAPN","userToken","priority","myDevice","Device","note","Notification","expiry","Math","floor","now","category","alert","ejson","EJSON","messageFrom","pushNotification","initFeedback","feedbackOptions","cert","key","feedback","Feedback","devices","forEach","item","device","start","sendGCM","userTokens","Fiber","data","message","msgcnt","soundname","Message","collapseKey","sender","Sender","each","value","err","result","canonical_ids","callback","oldToken","run","results","registration_id","failure","_querySend","countApn","countGcm","appCollection","find","app","push","_id","count","$exists","serverSend","tokenList","$or","$and","$in","enabled","$ne","_in","isSendingNotification","sendInterval","_ensureIndex","setInterval","batchSize","sendBatchSize","pendingNotifications","sent","sending","$lte","sort","limit","reserved","update","$set","parse","keepNotifications","remove","sentAt","emit","addListener","multi","$unset","methods","id","appName","metadata","doc","findOne","updatedAt","_collection","removed","found"],"mappings":"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","file":"/packages/raix_push.js","sourcesContent":["// The push object is an event emitter\nPush = new EventState();\n\n// This is the match pattern for tokens\n_matchToken = Match.OneOf({ apn: String }, { gcm: String });\n\n\n// Client-side security warnings, used to check options\ncheckClientSecurity = function(options) {\n\n  // Warn if certificates or keys are added here on client. We dont allow the\n  // user to do this for security reasons.\n  if (options.apn && options.apn.certData) {\n    throw new Error('Push.init: Dont add your APN certificate in client code!');\n  }\n\n  if (options.apn && options.apn.keyData) {\n    throw new Error('Push.init: Dont add your APN key in client code!');\n  }\n\n  if (options.apn && options.apn.passphrase) {\n    throw new Error('Push.init: Dont add your APN passphrase in client code!');\n  }\n\n  if (options.gcm && options.gcm.apiKey) {\n    throw new Error('Push.init: Dont add your GCM api key in client code!');\n  }\n};\n\n// DEPRECATED\nPush.init = function() {\n  console.warn('Push.init have been deprecated in favor of \"config.push.json\" please migrate');\n};\n","// Notifications collection\nPush.notifications = new Mongo.Collection('_raix_push_notifications');\n\n// This is a general function to validate that the data added to notifications\n// is in the correct format. If not this function will throw errors\nvar _validateDocument = function(notification) {\n\n  // Check the general notification\n  check(notification, {\n    from: String,\n    title: String,\n    text: String,\n    badge: Match.Optional(Number),\n    sound: Match.Optional(String),\n    notId: Match.Optional(Match.Integer),\n    apn: Match.Optional({\n      from: Match.Optional(String),\n      title: Match.Optional(String),\n      text: Match.Optional(String),\n      badge: Match.Optional(Number),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer)\n    }),\n    gcm: Match.Optional({\n      from: Match.Optional(String),\n      title: Match.Optional(String),\n      text: Match.Optional(String),\n      badge: Match.Optional(Number),\n      sound: Match.Optional(String),\n      notId: Match.Optional(Match.Integer)\n    }),\n    query: Match.Optional(String),\n    token: Match.Optional(_matchToken),\n    tokens: Match.Optional([_matchToken]),\n    payload: Match.Optional(Object),\n    delayUntil: Match.Optional(Date),\n    createdAt: Date,\n    createdBy: Match.OneOf(String, null)\n  });\n\n  // Make sure a token selector or query have been set\n  if (!notification.token && !notification.tokens && !notification.query) {\n    throw new Error('No token selector or query found');\n  }\n\n  // If tokens array is set it should not be empty\n  if (notification.tokens && !notification.tokens.length) {\n    throw new Error('No tokens in array');\n  }\n};\n\nPush.send = function(options) {\n  // If on the client we set the user id - on the server we need an option\n  // set or we default to \"<SERVER>\" as the creator of the notification\n  // If current user not set see if we can set it to the logged in user\n  // this will only run on the client if Meteor.userId is available\n  var currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() ||\n          Meteor.isServer && (options.createdBy || '<SERVER>') || null;\n\n  // Rig the notification object\n   var notification = _.extend({\n    createdAt: new Date(),\n    createdBy: currentUser\n  }, _.pick(options, 'from', 'title', 'text'));\n\n   // Add extra\n   _.extend(notification, _.pick(options, 'payload', 'badge', 'sound', 'notId', 'delayUntil'));\n\n  if (Match.test(options.apn, Object)) {\n    notification.apn = _.pick(options.apn, 'from', 'title', 'text', 'badge', 'sound', 'notId');\n  }\n\n  if (Match.test(options.gcm, Object)) {\n    notification.gcm = _.pick(options.gcm, 'from', 'title', 'text', 'badge', 'sound', 'notId');\n  }\n\n  // Set one token selector, this can be token, array of tokens or query\n  if (options.query) {\n    // Set query to the json string version fixing #43 and #39\n    notification.query = JSON.stringify(options.query);\n  } else if (options.token) {\n    // Set token\n    notification.token = options.token;\n  } else if (options.tokens) {\n    // Set tokens\n    notification.tokens = options.tokens;\n  }\n\n  // Validate the notification\n  _validateDocument(notification);\n\n  // Try to add the notification to send, we return an id to keep track\n  return Push.notifications.insert(notification);\n};\n\nPush.allow = function(rules) {\n  if (rules.send) {\n    Push.notifications.allow({\n      'insert': function(userId, notification) {\n        // Validate the notification\n        _validateDocument(notification);\n        // Set the user defined \"send\" rules\n        return rules.send.apply(this, [userId, notification]);\n      }\n    });\n  }\n};\n\nPush.deny = function(rules) {\n  if (rules.send) {\n    Push.notifications.deny({\n      'insert': function(userId, notification) {\n        // Validate the notification\n        _validateDocument(notification);\n        // Set the user defined \"send\" rules\n        return rules.send.apply(this, [userId, notification]);\n      }\n    });\n  }\n};\n","/*\n  A general purpose user CordovaPush\n  ios, android, mail, twitter?, facebook?, sms?, snailMail? :)\n\n  Phonegap generic :\n  https://github.com/phonegap-build/PushPlugin\n */\n\n// getText / getBinary\n\nPush.setBadge = function(/* id, count */) {\n    // throw new Error('Push.setBadge not implemented on the server');\n};\n\nvar isConfigured = false;\n\nPush.Configure = function(options) {\n    var self = this;\n    // https://npmjs.org/package/apn\n\n    // After requesting the certificate from Apple, export your private key as\n    // a .p12 file anddownload the .cer file from the iOS Provisioning Portal.\n\n    // gateway.push.apple.com, port 2195\n    // gateway.sandbox.push.apple.com, port 2195\n\n    // Now, in the directory containing cert.cer and key.p12 execute the\n    // following commands to generate your .pem files:\n    // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n    // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n    // Block multiple calls\n    if (isConfigured) {\n      throw new Error('Push.Configure should not be called more than once!');\n    }\n\n    isConfigured = true;\n\n    // Add debug info\n    if (Push.debug) {\n      console.log('Push.Configure', options);\n    }\n\n    // This function is called when a token is replaced on a device - normally\n    // this should not happen, but if it does we should take action on it\n    _replaceToken = function(currentToken, newToken) {\n        // console.log('Replace token: ' + currentToken + ' -- ' + newToken);\n        // If the server gets a token event its passing in the current token and\n        // the new value - if new value is undefined this empty the token\n        self.emitState('token', currentToken, newToken);\n    };\n\n    // Rig the removeToken callback\n    _removeToken = function(token) {\n        // console.log('Remove token: ' + token);\n        // Invalidate the token\n        self.emitState('token', token, null);\n    };\n\n\n    if (options.apn) {\n        if (Push.debug) {\n          console.log('Push: APN configured');\n        }\n\n        // Allow production to be a general option for push notifications\n        if (options.production === Boolean(options.production)) {\n          options.apn.production = options.production;\n        }\n\n        // Give the user warnings about development settings\n        if (options.apn.development) {\n          // This flag is normally set by the configuration file\n          console.warn('WARNING: Push APN is using development key and certificate');\n        } else {\n          // We check the apn gateway i the options, we could risk shipping\n          // server into production while using the production configuration.\n          // On the other hand we could be in development but using the production\n          // configuration. And finally we could have configured an unknown apn\n          // gateway (this could change in the future - but a warning about typos\n          // can save hours of debugging)\n          //\n          // Warn about gateway configurations - it's more a guide\n          if (options.apn.gateway) {\n\n              if (options.apn.gateway === 'gateway.sandbox.push.apple.com') {\n                  // Using the development sandbox\n                  console.warn('WARNING: Push APN is in development mode');\n              } else if (options.apn.gateway === 'gateway.push.apple.com') {\n                  // In production - but warn if we are running on localhost\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running' +\n                        ' from localhost');\n                  }\n              } else {\n                  // Warn about gateways we dont know about\n                  console.warn('WARNING: Push APN unkown gateway \"' + options.apn.gateway + '\"');\n              }\n\n          } else {\n              if (options.apn.production) {\n                  if (/http:\\/\\/localhost/.test(Meteor.absoluteUrl())) {\n                      console.warn('WARNING: Push APN is configured to production mode - but server is running' +\n                        ' from localhost');\n                  }\n              } else {\n                  console.warn('WARNING: Push APN is in development mode');\n              }\n          }\n\n        }\n\n        // Check certificate data\n        if (!options.apn.certData || !options.apn.certData.length) {\n          console.error('ERROR: Push server could not find certData');\n        }\n\n        // Check key data\n        if (!options.apn.keyData || !options.apn.keyData.length) {\n          console.error('ERROR: Push server could not find keyData');\n        }\n\n        // Rig apn connection\n        var apn = Npm.require('apn');\n        var apnConnection = new apn.Connection( options.apn );\n\n        // Listen to transmission errors - should handle the same way as feedback.\n        apnConnection.on('transmissionError', Meteor.bindEnvironment(function (errCode, notification, recipient) {\n          if (Push.debug) {\n            console.log('Got error code %d for token %s', errCode, notification.token);\n          }\n          if ([2, 5, 8].indexOf(errCode) >= 0) {\n\n\n            // Invalid token errors...\n            _removeToken({\n              apn: notification.token\n            });\n          }\n        }));\n        // XXX: should we do a test of the connection? It would be nice to know\n        // That the server/certificates/network are correct configured\n\n        // apnConnection.connect().then(function() {\n        //     console.info('CHECK: Push APN connection OK');\n        // }, function(err) {\n        //     console.warn('CHECK: Push APN connection FAILURE');\n        // });\n        // Note: the above code spoils the connection - investigate how to\n        // shutdown/close it.\n\n        self.sendAPN = function(userToken, notification) {\n            if (Match.test(notification.apn, Object)) {\n              notification = _.extend({}, notification, notification.apn);\n            }\n\n            // console.log('sendAPN', notification.from, userToken, notification.title, notification.text,\n            // notification.badge, notification.priority);\n            var priority = (notification.priority || notification.priority === 0)? notification.priority : 10;\n\n            var myDevice = new apn.Device(userToken);\n\n            var note = new apn.Notification();\n\n            note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n            if (typeof notification.badge !== 'undefined') {\n              note.badge = notification.badge;\n            }\n            if (typeof notification.sound !== 'undefined') {\n              note.sound = notification.sound;\n            }\n\n            // adds category support for iOS8 custom actions as described here:\n            // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/\n            // RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW36\n            if (typeof notification.category !== 'undefined') {\n              note.category = notification.category;\n            }\n\n            note.alert = notification.text;\n            // Allow the user to set payload data\n            note.payload = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n            note.payload.messageFrom = notification.from;\n            note.priority = priority;\n\n\n            // Store the token on the note so we can reference it if there was an error\n            note.token = userToken;\n\n            // console.log('I:Send message to: ' + userToken + ' count=' + count);\n\n            apnConnection.pushNotification(note, myDevice);\n\n        };\n\n\n        var initFeedback = function () {\n            var apn = Npm.require('apn');\n            // console.log('Init feedback');\n            var feedbackOptions = {\n                'batchFeedback': true,\n\n                // Time in SECONDS\n                'interval': 5,\n                production: !options.apn.development,\n                cert: options.certData,\n                key: options.keyData,\n                passphrase: options.passphrase\n            };\n\n            var feedback = new apn.Feedback(feedbackOptions);\n            feedback.on('feedback', function (devices) {\n                devices.forEach(function (item) {\n                    // Do something with item.device and item.time;\n                    // console.log('A:PUSH FEEDBACK ' + item.device + ' - ' + item.time);\n                    // The app is most likely removed from the device, we should\n                    // remove the token\n                    _removeToken({\n                        apn: item.device\n                    });\n                });\n            });\n\n            feedback.start();\n        };\n\n        // Init feedback from apn server\n        // This will help keep the appCollection up-to-date, it will help update\n        // and remove token from appCollection.\n        initFeedback();\n\n    } // EO ios notification\n\n    if (options.gcm && options.gcm.apiKey) {\n        if (Push.debug) {\n          console.log('GCM configured');\n        }\n        //self.sendGCM = function(options.from, userTokens, options.title, options.text, options.badge, options.priority) {\n        self.sendGCM = function(userTokens, notification) {\n            if (Match.test(notification.gcm, Object)) {\n              notification = _.extend({}, notification, notification.gcm);\n            }\n\n            // Make sure userTokens are an array of strings\n            if (userTokens === ''+userTokens) {\n              userTokens = [userTokens];\n            }\n\n            // Check if any tokens in there to send\n            if (!userTokens.length) {\n                if (Push.debug) {\n                  console.log('sendGCM no push tokens found');\n                }\n                return;\n            }\n\n            if (Push.debug) {\n              console.log('sendGCM', userTokens, notification);\n            }\n\n            var gcm = Npm.require('node-gcm');\n            var Fiber = Npm.require('fibers');\n\n            // Allow user to set payload\n            var data = (notification.payload) ? { ejson: EJSON.stringify(notification.payload) } : {};\n\n            data.title = notification.title;\n            data.message = notification.text;\n\n            // Set extra details\n            if (typeof notification.badge !== 'undefined') {\n              data.msgcnt = notification.badge;\n            }\n            if (typeof notification.sound !== 'undefined') {\n              data.soundname = notification.sound;\n            }\n            if (typeof notification.notId !== 'undefined') {\n              data.notId = notification.notId;\n            }\n\n            //var message = new gcm.Message();\n            var message = new gcm.Message({\n                collapseKey: notification.from,\n            //    delayWhileIdle: true,\n            //    timeToLive: 4,\n            //    restricted_package_name: 'dk.gi2.app'\n                data: data\n            });\n\n            if (Push.debug) {\n              console.log('Create GCM Sender using \"' + options.gcm.apiKey + '\"');\n            }\n            var sender = new gcm.Sender(options.gcm.apiKey);\n\n            _.each(userTokens, function(value /*, key */) {\n                if (Push.debug) {\n                  console.log('A:Send message to: ' + value);\n                }\n            });\n\n            /*message.addData('title', title);\n            message.addData('message', text);\n            message.addData('msgcnt', '1');\n            message.collapseKey = 'sitDrift';\n            message.delayWhileIdle = true;\n            message.timeToLive = 3;*/\n\n            // /**\n            //  * Parameters: message-literal, userTokens-array, No. of retries, callback-function\n            //  */\n\n            var userToken = (userTokens.length === 1)?userTokens[0]:null;\n\n            sender.send(message, userTokens, 5, function (err, result) {\n                if (err) {\n                    if (Push.debug) {\n                      console.log('ANDROID ERROR: result of sender: ' + result);\n                    }\n                } else {\n                    if (result === null) {\n                      if (Push.debug) {\n                        console.log('ANDROID: Result of sender is null');\n                      }\n                      return;\n                    }\n                    if (Push.debug) {\n                      console.log('ANDROID: Result of sender: ' + JSON.stringify(result));\n                    }\n                    if (result.canonical_ids === 1 && userToken) { // jshint ignore:line\n\n                        // This is an old device, token is replaced\n                        Fiber(function(self) {\n                            // Run in fiber\n                            try {\n                                self.callback(self.oldToken, self.newToken);\n                            } catch(err) {\n\n                            }\n\n                        }).run({\n                            oldToken: { gcm: userToken },\n                            newToken: { gcm: result.results[0].registration_id }, // jshint ignore:line\n                            callback: _replaceToken\n                        });\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\n                    }\n                    // We cant send to that token - might not be registred\n                    // ask the user to remove the token from the list\n                    if (result.failure !== 0 && userToken) {\n\n                        // This is an old device, token is replaced\n                        Fiber(function(self) {\n                            // Run in fiber\n                            try {\n                                self.callback(self.token);\n                            } catch(err) {\n\n                            }\n\n                        }).run({\n                            token: { gcm: userToken },\n                            callback: _removeToken\n                        });\n                        //_replaceToken({ gcm: userToken }, { gcm: result.results[0].registration_id });\n\n                    }\n\n                }\n            });\n            // /** Use the following line if you want to send the message without retries\n            // sender.sendNoRetry(message, userTokens, function (result) {\n            //     console.log('ANDROID: ' + JSON.stringify(result));\n            // });\n            // **/\n        }; // EO sendAndroid\n\n    } // EO Android\n\n    // Universal send function\n    var _querySend = function(query, options) {\n\n      var countApn = [];\n      var countGcm = [];\n\n        Push.appCollection.find(query).forEach(function(app) {\n\n          if (Push.debug) {\n            console.log('send to token', app.token);\n          }\n\n            if (app.token.apn) {\n              countApn.push(app._id);\n                // Send to APN\n                if (self.sendAPN) {\n                  self.sendAPN(app.token.apn, options);\n                }\n\n            } else if (app.token.gcm) {\n              countGcm.push(app._id);\n\n                // Send to GCM\n                // We do support multiple here - so we should construct an array\n                // and send it bulk - Investigate limit count of id's\n                if (self.sendGCM) {\n                  self.sendGCM(app.token.gcm, options);\n                }\n\n            } else {\n                throw new Error('Push.send got a faulty query');\n            }\n\n        });\n\n        if (Push.debug) {\n\n          console.log('Push: Sent message \"' + options.title + '\" to ' + countApn.length + ' ios apps ' +\n            countGcm.length + ' android apps');\n\n          // Add some verbosity about the send result, making sure the developer\n          // understands what just happened.\n          if (!countApn.length && !countGcm.length) {\n            if (Push.appCollection.find().count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" is empty -' +\n                ' No clients have registred on the server yet...');\n            }\n          } else if (!countApn.length) {\n            if (Push.appCollection.find({ 'token.apn': { $exists: true } }).count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No APN clients have registred on the server yet...');\n            }\n          } else if (!countGcm.length) {\n            if (Push.appCollection.find({ 'token.gcm': { $exists: true } }).count() === 0) {\n              console.log('Push, GUIDE: The \"Push.appCollection\" - No GCM clients have registred on the server yet...');\n            }\n          }\n\n        }\n\n        return {\n          apn: countApn,\n          gcm: countGcm\n        };\n    };\n\n    self.serverSend = function(options) {\n      options = options || { badge: 0 };\n      var query;\n\n      // Check basic options\n      if (options.from !== ''+options.from) {\n        throw new Error('Push.send: option \"from\" not a string');\n      }\n\n      if (options.title !== ''+options.title) {\n        throw new Error('Push.send: option \"title\" not a string');\n      }\n\n      if (options.text !== ''+options.text) {\n        throw new Error('Push.send: option \"text\" not a string');\n      }\n\n      if (options.token || options.tokens) {\n\n        // The user set one token or array of tokens\n        var tokenList = (options.token)? [options.token] : options.tokens;\n\n        if (Push.debug) {\n          console.log('Push: Send message \"' + options.title + '\" via token(s)', tokenList);\n        }\n\n        query = {\n          $or: [\n              // XXX: Test this query: can we hand in a list of push tokens?\n              { $and: [\n                  { token: { $in: tokenList } },\n                  // And is not disabled\n                  { enabled: { $ne: false }}\n                ]\n              },\n              // XXX: Test this query: does this work on app id?\n              { $and: [\n                  { _in: { $in: tokenList } }, // one of the app ids\n                  { $or: [\n                      { 'token.apn': { $exists: true }  }, // got apn token\n                      { 'token.gcm': { $exists: true }  }  // got gcm token\n                  ]},\n                  // And is not disabled\n                  { enabled: { $ne: false }}\n                ]\n              }\n          ]\n        };\n\n      } else if (options.query) {\n\n        if (Push.debug) {\n          console.log('Push: Send message \"' + options.title + '\" via query', options.query);\n        }\n\n        query = {\n          $and: [\n              options.query, // query object\n              { $or: [\n                  { 'token.apn': { $exists: true }  }, // got apn token\n                  { 'token.gcm': { $exists: true }  }  // got gcm token\n              ]},\n              // And is not disabled\n              { enabled: { $ne: false }}\n          ]\n        };\n      }\n\n\n      if (query) {\n\n        // Convert to querySend and return status\n        return _querySend(query, options);\n\n      } else {\n        throw new Error('Push.send: please set option \"token\"/\"tokens\" or \"query\"');\n      }\n\n    };\n\n\n    // This interval will allow only one notification to be sent at a time, it\n    // will check for new notifications at every `options.sendInterval`\n    // (default interval is 15000 ms)\n    //\n    // It looks in notifications collection to see if theres any pending\n    // notifications, if so it will try to reserve the pending notification.\n    // If successfully reserved the send is started.\n    //\n    // If notification.query is type string, it's assumed to be a json string\n    // version of the query selector. Making it able to carry `$` properties in\n    // the mongo collection.\n    //\n    // Pr. default notifications are removed from the collection after send have\n    // completed. Setting `options.keepNotifications` will update and keep the\n    // notification eg. if needed for historical reasons.\n    //\n    // After the send have completed a \"send\" event will be emitted with a\n    // status object containing notification id and the send result object.\n    //\n    var isSendingNotification = false;\n\n    if (options.sendInterval !== null) {\n\n      // This will require index since we sort notifications by createdAt\n      Push.notifications._ensureIndex({ createdAt: 1 });\n\n      Meteor.setInterval(function() {\n\n          if (isSendingNotification) {\n              return;\n          }\n          // Set send fence\n          isSendingNotification = true;\n\n          // var countSent = 0;\n          var batchSize = options.sendBatchSize || 1;\n\n          // Find notifications that are not being or already sent\n          var pendingNotifications = Push.notifications.find({ $and: [\n                // Message is not sent\n                { sent : { $ne: true } },\n                // And not being sent by other instances\n                { sending: { $ne: true } },\n                // And not queued for future\n                { $or: [ { delayUntil: { $exists: false } }, { delayUntil:  { $lte: new Date() } } ] }\n            ]}, {\n              // Sort by created date\n              sort: { createdAt: 1 },\n              limit: batchSize\n            });\n\n          pendingNotifications.forEach(function(notification) {\n              // Reserve notification\n              var reserved = Push.notifications.update({ $and: [\n                // Try to reserve the current notification\n                { _id: notification._id },\n                // Make sure no other instances have reserved it\n                { sending: { $ne: true } }\n              ]}, {\n                $set: {\n                  // Try to reserve\n                  sending: true\n                }\n              });\n\n              // Make sure we only handle notifications reserved by this\n              // instance\n              if (reserved) {\n\n                // Check if query is set and is type String\n                if (notification.query && notification.query === ''+notification.query) {\n                  try {\n                    // The query is in string json format - we need to parse it\n                    notification.query = JSON.parse(notification.query);\n                  } catch(err) {\n                    // Did the user tamper with this??\n                    throw new Error('Push: Error while parsing query string, Error: ' + err.message);\n                  }\n                }\n\n                // Send the notification\n                var result = Push.serverSend(notification);\n\n                if (!options.keepNotifications) {\n                    // Pr. Default we will remove notifications\n                    Push.notifications.remove({ _id: notification._id });\n                } else {\n\n                    // Update the notification\n                    Push.notifications.update({ _id: notification._id }, {\n                        $set: {\n                          // Mark as sent\n                          sent: true,\n                          // Set the sent date\n                          sentAt: new Date(),\n                          // Count\n                          count: result,\n                          // Not being sent anymore\n                          sending: false\n                        }\n                    });\n\n                }\n\n                // Emit the send\n                self.emit('send', { notification: notification._id, result: result });\n\n              } // Else could not reserve\n\n          }); // EO forEach\n\n          // Remove the send fence\n          isSendingNotification = false;\n      }, options.sendInterval || 15000); // Default every 15th sec\n\n    } else {\n      if (Push.debug) {\n        console.log('Push: Send server is disabled');\n      }\n    }\n\n};\n","Push.appCollection = new Mongo.Collection('_raix_push_app_tokens');\n\nPush.addListener('token', function(currentToken, value) {\n  if (value) {\n    // Update the token for app\n    Push.appCollection.update({ token: currentToken }, { $set: { token: value } }, { multi: true });\n  } else if (value === null) {\n    // Remove the token for app\n    Push.appCollection.update({ token: currentToken }, { $unset: { token: true } }, { multi: true });\n  }\n});\n\nMeteor.methods({\n  'raix:push-update': function(options) {\n    if (Push.debug) {\n      console.log('Push: Got push token from app:', options);\n    }\n\n    check(options, {\n      id: Match.Optional(String),\n      token: _matchToken,\n      appName: String,\n      userId: Match.OneOf(String, null),\n      metadata: Match.Optional(Object)\n    });\n\n    // The if user id is set then user id should match on client and connection\n    if (options.userId && options.userId !== this.userId) {\n      throw new Meteor.Error(403, 'Forbidden access');\n    }\n\n    var doc;\n\n    // lookup app by id if one was included\n    if (options.id) {\n      doc = Push.appCollection.findOne({ _id: options.id });\n    }\n\n    // No doc was found - we check the database to see if\n    // we can find a match for the app via token and appName\n    if (!doc) {\n      doc = Push.appCollection.findOne({\n        $and: [\n          { token: options.token },     // Match token\n          { appName: options.appName }, // Match appName\n          { token: { $exists: true } }  // Make sure token exists\n        ]\n      });\n    }\n\n    // if we could not find the id or token then create it\n    if (!doc) {\n      // Rig default doc\n      doc = {\n        token: options.token,\n        appName: options.appName,\n        userId: options.userId,\n        enabled: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      if (options.id) {\n        // XXX: We might want to check the id - Why isnt there a match for id\n        // in the Meteor check... Normal length 17 (could be larger), and\n        // numbers+letters are used in Random.id() with exception of 0 and 1\n        doc._id = options.id;\n        // The user wanted us to use a specific id, we didn't find this while\n        // searching. The client could depend on the id eg. as reference so\n        // we respect this and try to create a document with the selected id;\n        Push.appCollection._collection.insert(doc);\n      } else {\n        // Get the id from insert\n        doc._id = Push.appCollection.insert(doc);\n      }\n    } else {\n      // We found the app so update the updatedAt and set the token\n      Push.appCollection.update({ _id: doc._id }, {\n        $set: {\n          updatedAt: new Date(),\n          token: options.token\n        }\n      });\n    }\n\n    if (doc) {\n      // xxx: Hack\n      // Clean up mech making sure tokens are uniq - android sometimes generate\n      // new tokens resulting in duplicates\n      var removed = Push.appCollection.remove({\n        $and: [\n          { _id: { $ne: doc._id } },\n          { token: doc.token },     // Match token\n          { appName: doc.appName }, // Match appName\n          { token: { $exists: true } }  // Make sure token exists\n        ]\n      });\n\n      if (removed && Push.debug) {\n        console.log('Push: Removed ' + removed + ' existing app items');\n      }\n    }\n\n    if (doc && Push.debug) {\n      console.log('Push: updated', doc);\n    }\n\n    if (!doc) {\n      throw new Meteor.Error(500, 'setPushToken could not create record');\n    }\n    // Return the doc we want to use\n    return doc;\n  },\n  'raix:push-setuser': function(id) {\n    check(id, String);\n\n    if (Push.debug) {\n      console.log('Push: Settings userId \"' + this.userId + '\" for app:', id);\n    }\n    // We update the appCollection id setting the Meteor.userId\n    var found = Push.appCollection.update({ _id: id }, { $set: { userId: this.userId } });\n\n    // Note that the app id might not exist because no token is set yet.\n    // We do create the new app id for the user since we might store additional\n    // metadata for the app / user\n\n    // If id not found then create it?\n    // We dont, its better to wait until the user wants to\n    // store metadata or token - We could end up with unused data in the\n    // collection at every app re-install / update\n    //\n    // The user could store some metadata in appCollectin but only if they\n    // have created the app and provided a token.\n    // If not the metadata should be set via ground:db\n\n    return !!found;\n  },\n  'raix:push-metadata': function(data) {\n    check(data, {\n      id: String,\n      metadata: Object\n    });\n\n    // Set the metadata\n    var found = Push.appCollection.update({ _id: data.id }, { $set: { metadata: data.metadata } });\n\n    return !!found;\n  },\n  'raix:push-enable': function(data) {\n    check(data, {\n      id: String,\n      enabled: Boolean\n    });\n\n    if (Push.debug) {\n      console.log('Push: Setting enabled to \"' + data.enabled + '\" for app:', data.id);\n    }\n\n    var found = Push.appCollection.update({ _id: data.id }, { $set: { enabled: data.enabled } });\n\n    return !!found;\n  }\n});\n\n"]}