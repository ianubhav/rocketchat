{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:crowd/server/crowd.js","meteor://ðŸ’»app/packages/rocketchat:crowd/server/settings.js"],"names":["logger","Logger","fallbackDefaultAccountSystem","bind","username","password","indexOf","email","info","loginRequest","user","digest","SHA256","algorithm","Accounts","_runLoginHandlers","CROWD","AtlassianCrowd","Npm","require","url","RocketChat","settings","get","urlLastChar","slice","options","crowd","base","application","name","rejectUnauthorized","crowdClient","authenticateSync","Meteor","wrapAsync","authenticate","findSync","find","pingSync","ping","checkConnection","error","auth","userResponse","displayname","active","syncDataToUser","crowdUser","id","emails","address","verified","users","update","$set","sync","self","models","Users","findCrowdUsers","forEach","_id","addNewUser","userQuery","findOne","stampedToken","_generateStampedLoginToken","$push","_hashStampedToken","userId","token","createUser","updateUser","runAsUser","call","registerLoginHandler","undefined","crowdPassword","interval","timeout","key","value","clearInterval","clearTimeout","setInterval","setTimeout","methods","crowd_test_connection","Error","method","authz","hasRole","message","params","startup","addGroup","enableQuery","add","type","i18nLabel","actionText"],"mappings":"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","file":"/packages/rocketchat_crowd.js","sourcesContent":["/* globals:CROWD:true */\n/* eslint new-cap: [2, {\"capIsNewExceptions\": [\"SHA256\"]}] */\nconst logger = new Logger('CROWD', {});\n\nfunction fallbackDefaultAccountSystem(bind, username, password) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = {username: username};\n\t\t} else {\n\t\t\tusername = {email: username};\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256'\n\t\t}\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nconst CROWD = class CROWD {\n\tconstructor() {\n\t\tconst AtlassianCrowd = Npm.require('atlassian-crowd');\n\n\t\tlet url = RocketChat.settings.get('CROWD_URL');\n\t\tlet urlLastChar = url.slice(-1);\n\n\t\tif (urlLastChar !== '/') {\n\t\t\turl += '/';\n\t\t}\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: url\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: RocketChat.settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: RocketChat.settings.get('CROWD_APP_PASSWORD')\n\t\t\t},\n\t\t\trejectUnauthorized: RocketChat.settings.get('CROWD_Reject_Unauthorized')\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\n\t\tthis.crowdClient.user.authenticateSync = Meteor.wrapAsync(this.crowdClient.user.authenticate, this);\n\t\tthis.crowdClient.user.findSync = Meteor.wrapAsync(this.crowdClient.user.find, this);\n\t\tthis.crowdClient.pingSync = Meteor.wrapAsync(this.crowdClient.ping, this);\n\t}\n\n\tcheckConnection() {\n\t\tthis.crowdClient.pingSync();\n\t}\n\n\tauthenticate(username, password) {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.info('Going to crowd:', username);\n\t\tconst auth = this.crowdClient.user.authenticateSync(username, password);\n\n\t\tif (!auth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userResponse = this.crowdClient.user.findSync(username);\n\n\t\tconst user = {\n\t\t\tdisplayname: userResponse['display-name'],\n\t\t\tusername: userResponse.name,\n\t\t\temail: userResponse.email,\n\t\t\tpassword: password,\n\t\t\tactive: userResponse.active\n\t\t};\n\n\t\treturn user;\n\t}\n\n\tsyncDataToUser(crowdUser, id) {\n\t\tconst user = {\n\t\t\tname: crowdUser.displayname,\n\t\t\tusername: crowdUser.username,\n\t\t\temails: [{\n\t\t\t\taddress : crowdUser.email,\n\t\t\t\tverified: true\n\t\t\t}],\n\t\t\tpassword: crowdUser.password,\n\t\t\tactive: crowdUser.active\n\t\t};\n\n\t\tMeteor.users.update(id, {\n\t\t\t$set: user\n\t\t});\n\t}\n\n\tsync() {\n\t\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar self = this;\n\t\tlogger.info('Sync started');\n\n\t\tconst users = RocketChat.models.Users.findCrowdUsers();\n\t\tif (users) {\n\t\t\tusers.forEach(function(user) {\n\t\t\t\tlogger.info('Syncing user', user.username);\n\t\t\t\tconst userResponse = self.crowdClient.user.findSync(user.username);\n\t\t\t\tif (userResponse) {\n\t\t\t\t\tconst crowdUser = {\n\t\t\t\t\t\tdisplayname: userResponse['display-name'],\n\t\t\t\t\t\tusername: userResponse.name,\n\t\t\t\t\t\temail: userResponse.email,\n\t\t\t\t\t\tpassword: userResponse.password,\n\t\t\t\t\t\tactive: userResponse.active\n\t\t\t\t\t};\n\n\t\t\t\t\tself.syncDataToUser(crowdUser, user._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\taddNewUser(crowdUser) {\n\t\tvar userQuery = {\n\t\t\tcrowd: true,\n\t\t\tusername: crowdUser.username\n\t\t};\n\n\t\t// find our existinmg user if they exist\n\t\tconst user = Meteor.users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tMeteor.users.update(user._id, {\n\t\t\t\t$push: {\n\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token\n\t\t\t};\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tcrowdUser._id = Accounts.createUser(crowdUser);\n\t\t\t} catch (error) {\n\t\t\t\tlogger.info('Error creating new user for crowd user', error);\n\t\t\t}\n\n\t\t\tconst updateUser = {\n\t\t\t\tname: crowdUser.displayname,\n\t\t\t\tcrowd: true,\n\t\t\t\tactive: crowdUser.active\n\t\t\t};\n\n\t\t\tMeteor.users.update(crowdUser._id, {\n\t\t\t\t$set: updateUser\n\t\t\t});\n\t\t}\n\n\t\tMeteor.runAsUser(crowdUser._id, function() {\n\t\t\tMeteor.call('joinDefaultChannels');\n\t\t});\n\n\t\treturn {\n\t\t\tuserId: crowdUser._id\n\t\t};\n\t}\n};\n\nAccounts.registerLoginHandler('crowd', function(loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\tconst crowd = new CROWD();\n\tlet user;\n\ttry {\n\t\tuser = crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\t} catch (error) {\n\t\tlogger.error('Crowd user not authenticated due to an error, falling back');\n\t}\n\n\tif (!user) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\treturn crowd.addNewUser(user);\n});\n\nlet interval;\nlet timeout;\n\nRocketChat.settings.get('CROWD_Sync_User_Data', function(key, value) {\n\tMeteor.clearInterval(interval);\n\tMeteor.clearTimeout(timeout);\n\n\tif (value === true) {\n\t\tconst crowd = new CROWD();\n\t\tlogger.info('Enabling CROWD user sync');\n\t\tMeteor.setInterval(crowd.sync, 1000 * 60 * 60);\n\t\tMeteor.setTimeout(function() {\n\t\t\tcrowd.sync();\n\t\t}, 1000 * 30);\n\t} else {\n\t\tlogger.info('Disabling CROWD user sync');\n\t}\n});\n\nMeteor.methods({\n\tcrowd_test_connection:function() {\n\t\tconst user = Meteor.user();\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\tif (!RocketChat.authz.hasRole(user._id, 'admin')) {\n\t\t\tthrow new Meteor.Error('error-not-authorized', 'Not authorized', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\tif (RocketChat.settings.get('CROWD_Enable') !== true) {\n\t\t\tthrow new Meteor.Error('crowd_disabled');\n\t\t}\n\n\t\tlet crowd = new CROWD();\n\n\t\ttry {\n\t\t\tcrowd.checkConnection();\n\t\t} catch (error) {\n\t\t\tlogger.error('Invalid crowd connection details, check the url and application username/password and make sure this server is allowed to speak to crowd');\n\t\t\tthrow new Meteor.Error('Invalid connection details', '', { method: 'crowd_test_connection' });\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: 'Connection success',\n\t\t\tparams: []\n\t\t};\n\t}\n});\n","Meteor.startup(function() {\n\tRocketChat.settings.addGroup('AtlassianCrowd', function() {\n\t\tconst enableQuery = {_id: 'CROWD_Enable', value: true};\n\t\tthis.add('CROWD_Enable', false, { type: 'boolean', public: true, i18nLabel: 'Enabled' });\n\t\tthis.add('CROWD_URL', '', { type: 'string', enableQuery: enableQuery, i18nLabel: 'URL' });\n\t\tthis.add('CROWD_Reject_Unauthorized', true, { type: 'boolean', enableQuery: enableQuery });\n\t\tthis.add('CROWD_APP_USERNAME', '', { type: 'string', enableQuery: enableQuery, i18nLabel: 'Username' });\n\t\tthis.add('CROWD_APP_PASSWORD', '', { type: 'password', enableQuery: enableQuery, i18nLabel: 'Password' });\n\t\tthis.add('CROWD_Sync_User_Data', false, { type: 'boolean', enableQuery: enableQuery, i18nLabel: 'Sync_Users' });\n\t\tthis.add('CROWD_Test_Connection', 'crowd_test_connection', { type: 'action', actionText: 'Test_Connection', i18nLabel: 'Test_Connection' });\n\t});\n});\n"]}