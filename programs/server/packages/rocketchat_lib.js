(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var RateLimiter = Package['rate-limit'].RateLimiter;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var Accounts = Package['accounts-base'].Accounts;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var check = Package.check.check;
var Match = Package.check.Match;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var _ = Package.underscore._;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;
var s = Package['underscorestring:underscore.string'].s;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;
var moment = Package['momentjs:moment'].moment;
var Streamer = Package['rocketchat:streamer'].Streamer;
var Logger = Package['rocketchat:logger'].Logger;
var CustomOAuth = Package['rocketchat:custom-oauth'].CustomOAuth;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var Symbol = Package['ecmascript-runtime'].Symbol;
var Map = Package['ecmascript-runtime'].Map;
var Set = Package['ecmascript-runtime'].Set;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;

/* Package-scope variables */
var __coffeescriptShare, RocketChat;

var require = meteorInstall({"node_modules":{"meteor":{"rocketchat:lib":{"lib":{"core.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/core.coffee.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
                                                                                                                       //
/*                                                                                                                     // 1
 * Kick off the global namespace for RocketChat.                                                                       //
 * @namespace RocketChat                                                                                               //
 */                                                                                                                    //
                                                                                                                       // 1
                                                                                                                       //
RocketChat = {                                                                                                         // 6
  models: {}                                                                                                           //
};                                                                                                                     //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/settings.coffee.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
                                                                                                                       //
/*                                                                                                                     // 1
 * RocketChat.settings holds all packages settings                                                                     //
 * @namespace RocketChat.settings                                                                                      //
 */                                                                                                                    //
RocketChat.settings = {                                                                                                // 5
  callbacks: {},                                                                                                       //
  regexCallbacks: {},                                                                                                  //
  ts: new Date,                                                                                                        //
  get: function(_id, callback) {                                                                                       //
    var items, key, ref, ref1, ref2, ref3, ref4, ref5, value;                                                          // 11
    if (callback != null) {                                                                                            //
      RocketChat.settings.onload(_id, callback);                                                                       //
      if (_id === '*' && (Meteor.settings != null)) {                                                                  //
        ref = Meteor.settings;                                                                                         // 14
        for (key in ref) {                                                                                             // 14
          value = ref[key];                                                                                            //
          callback(key, value);                                                                                        //
        }                                                                                                              // 14
        return;                                                                                                        // 16
      }                                                                                                                //
      if (_.isRegExp(_id)) {                                                                                           //
        ref1 = Meteor.settings;                                                                                        // 19
        for (key in ref1) {                                                                                            // 19
          value = ref1[key];                                                                                           //
          if (_id.test(key)) {                                                                                         //
            callback(key, value);                                                                                      //
          }                                                                                                            //
        }                                                                                                              // 19
        return;                                                                                                        // 21
      }                                                                                                                //
      if (((ref2 = Meteor.settings) != null ? ref2[_id] : void 0) != null) {                                           //
        return callback(_id, (ref3 = Meteor.settings) != null ? ref3[_id] : void 0);                                   //
      }                                                                                                                //
    } else {                                                                                                           //
      if (_.isRegExp(_id)) {                                                                                           //
        items = [];                                                                                                    //
        ref4 = Meteor.settings;                                                                                        // 28
        for (key in ref4) {                                                                                            // 28
          value = ref4[key];                                                                                           //
          if (_id.test(key)) {                                                                                         //
            items.push({                                                                                               //
              key: key,                                                                                                //
              value: value                                                                                             //
            });                                                                                                        //
          }                                                                                                            //
        }                                                                                                              // 28
        return items;                                                                                                  // 32
      }                                                                                                                //
      return (ref5 = Meteor.settings) != null ? ref5[_id] : void 0;                                                    // 34
    }                                                                                                                  //
  },                                                                                                                   //
  set: function(_id, value, callback) {                                                                                //
    return Meteor.call('saveSetting', _id, value, callback);                                                           //
  },                                                                                                                   //
  batchSet: function(settings, callback) {                                                                             //
    var actions, save;                                                                                                 // 44
    save = function(setting) {                                                                                         //
      return function(callback) {                                                                                      // 45
        return Meteor.call('saveSetting', setting._id, setting.value, callback);                                       //
      };                                                                                                               //
    };                                                                                                                 //
    actions = _.map(settings, function(setting) {                                                                      //
      return save(setting);                                                                                            //
    });                                                                                                                //
    return _(actions).reduceRight(_.wrap, function(err, success) {                                                     //
      return callback(err, success);                                                                                   // 49
    })();                                                                                                              //
  },                                                                                                                   //
  load: function(key, value, initialLoad) {                                                                            //
    var callback, cbKey, cbValue, i, j, len, len1, ref, ref1, ref2, results;                                           // 52
    if (RocketChat.settings.callbacks[key] != null) {                                                                  //
      ref = RocketChat.settings.callbacks[key];                                                                        // 53
      for (i = 0, len = ref.length; i < len; i++) {                                                                    // 53
        callback = ref[i];                                                                                             //
        callback(key, value, initialLoad);                                                                             //
      }                                                                                                                // 53
    }                                                                                                                  //
    if (RocketChat.settings.callbacks['*'] != null) {                                                                  //
      ref1 = RocketChat.settings.callbacks['*'];                                                                       // 57
      for (j = 0, len1 = ref1.length; j < len1; j++) {                                                                 // 57
        callback = ref1[j];                                                                                            //
        callback(key, value, initialLoad);                                                                             //
      }                                                                                                                // 57
    }                                                                                                                  //
    ref2 = RocketChat.settings.regexCallbacks;                                                                         // 60
    results = [];                                                                                                      // 60
    for (cbKey in ref2) {                                                                                              //
      cbValue = ref2[cbKey];                                                                                           //
      if (cbValue.regex.test(key)) {                                                                                   //
        results.push((function() {                                                                                     //
          var l, len2, ref3, results1;                                                                                 //
          ref3 = cbValue.callbacks;                                                                                    // 62
          results1 = [];                                                                                               // 62
          for (l = 0, len2 = ref3.length; l < len2; l++) {                                                             //
            callback = ref3[l];                                                                                        //
            results1.push(callback(key, value, initialLoad));                                                          //
          }                                                                                                            // 62
          return results1;                                                                                             //
        })());                                                                                                         //
      } else {                                                                                                         //
        results.push(void 0);                                                                                          //
      }                                                                                                                //
    }                                                                                                                  // 60
    return results;                                                                                                    //
  },                                                                                                                   //
  onload: function(key, callback) {                                                                                    //
    var base, base1, i, k, keys, len, name, results;                                                                   // 72
    keys = [].concat(key);                                                                                             //
    results = [];                                                                                                      // 74
    for (i = 0, len = keys.length; i < len; i++) {                                                                     //
      k = keys[i];                                                                                                     //
      if (_.isRegExp(k)) {                                                                                             //
        if ((base = RocketChat.settings.regexCallbacks)[name = k.source] == null) {                                    //
          base[name] = {                                                                                               //
            regex: k,                                                                                                  //
            callbacks: []                                                                                              //
          };                                                                                                           //
        }                                                                                                              //
        results.push(RocketChat.settings.regexCallbacks[k.source].callbacks.push(callback));                           //
      } else {                                                                                                         //
        if ((base1 = RocketChat.settings.callbacks)[k] == null) {                                                      //
          base1[k] = [];                                                                                               //
        }                                                                                                              //
        results.push(RocketChat.settings.callbacks[k].push(callback));                                                 //
      }                                                                                                                //
    }                                                                                                                  // 74
    return results;                                                                                                    //
  }                                                                                                                    //
};                                                                                                                     //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"configLogger.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/configLogger.coffee.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.settings.get('Log_Package', function(key, value) {                                                          // 1
  return typeof LoggerManager !== "undefined" && LoggerManager !== null ? LoggerManager.showPackage = value : void 0;  //
});                                                                                                                    // 1
                                                                                                                       //
RocketChat.settings.get('Log_File', function(key, value) {                                                             // 4
  return typeof LoggerManager !== "undefined" && LoggerManager !== null ? LoggerManager.showFileAndLine = value : void 0;
});                                                                                                                    // 4
                                                                                                                       //
RocketChat.settings.get('Log_Level', function(key, value) {                                                            // 7
  if (value != null) {                                                                                                 //
    if (typeof LoggerManager !== "undefined" && LoggerManager !== null) {                                              //
      LoggerManager.logLevel = parseInt(value);                                                                        //
    }                                                                                                                  //
    return Meteor.setTimeout(function() {                                                                              //
      return typeof LoggerManager !== "undefined" && LoggerManager !== null ? LoggerManager.enable(true) : void 0;     //
    }, 200);                                                                                                           //
  }                                                                                                                    //
});                                                                                                                    // 7
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"callbacks.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/callbacks.coffee.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
                                                                                                                       //
/*                                                                                                                     // 3
 * Callback hooks provide an easy way to add extra steps to common operations.                                         //
 * @namespace RocketChat.callbacks                                                                                     //
 */                                                                                                                    //
RocketChat.callbacks = {};                                                                                             // 7
                                                                                                                       //
if (Meteor.isServer) {                                                                                                 // 9
  RocketChat.callbacks.showTime = true;                                                                                //
  RocketChat.callbacks.showTotalTime = true;                                                                           //
} else {                                                                                                               //
  RocketChat.callbacks.showTime = false;                                                                               //
  RocketChat.callbacks.showTotalTime = false;                                                                          //
}                                                                                                                      //
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 16
 * Callback priorities                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.callbacks.priority = {                                                                                      // 19
  HIGH: -1000,                                                                                                         //
  MEDIUM: 0,                                                                                                           //
  LOW: 1000                                                                                                            //
};                                                                                                                     //
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 24
 * Add a callback function to a hook                                                                                   //
 * @param {String} hook - The name of the hook                                                                         //
 * @param {Function} callback - The callback function                                                                  //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.callbacks.add = function(hook, callback, priority, id) {                                                    // 29
  var base, cb, err, i, len, ref;                                                                                      // 31
  if (priority == null) {                                                                                              //
    priority = RocketChat.callbacks.priority.MEDIUM;                                                                   //
  }                                                                                                                    //
  if (!_.isNumber(priority)) {                                                                                         //
    priority = RocketChat.callbacks.priority.MEDIUM;                                                                   //
  }                                                                                                                    //
  callback.priority = priority;                                                                                        //
  callback.id = id || Random.id();                                                                                     //
  if ((base = RocketChat.callbacks)[hook] == null) {                                                                   //
    base[hook] = [];                                                                                                   //
  }                                                                                                                    //
  if (RocketChat.callbacks.showTime === true) {                                                                        //
    err = new Error;                                                                                                   //
    callback.stack = err.stack;                                                                                        //
  }                                                                                                                    //
  ref = RocketChat.callbacks[hook];                                                                                    // 46
  for (i = 0, len = ref.length; i < len; i++) {                                                                        // 46
    cb = ref[i];                                                                                                       //
    if (cb.id === callback.id) {                                                                                       //
      return;                                                                                                          // 48
    }                                                                                                                  //
  }                                                                                                                    // 46
  RocketChat.callbacks[hook].push(callback);                                                                           //
};                                                                                                                     // 29
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 53
 * Remove a callback from a hook                                                                                       //
 * @param {string} hook - The name of the hook                                                                         //
 * @param {string} id - The callback's id                                                                              //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.callbacks.remove = function(hookName, id) {                                                                 // 59
  RocketChat.callbacks[hookName] = _.reject(RocketChat.callbacks[hookName], function(callback) {                       //
    return callback.id === id;                                                                                         //
  });                                                                                                                  //
};                                                                                                                     // 59
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 64
 * Successively run all of a hook's callbacks on an item                                                               //
 * @param {String} hook - The name of the hook                                                                         //
 * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                              //
 * @param {Object} [constant] - An optional constant that will be passed along to each callback                        //
 * @returns {Object} Returns the item after it's been through all the callbacks for this hook                          //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.callbacks.run = function(hook, item, constant) {                                                            // 72
  var callbacks, result, totalTime;                                                                                    // 73
  callbacks = RocketChat.callbacks[hook];                                                                              //
  if (!!(callbacks != null ? callbacks.length : void 0)) {                                                             //
    if (RocketChat.callbacks.showTotalTime === true) {                                                                 //
      totalTime = 0;                                                                                                   //
    }                                                                                                                  //
    result = _.sortBy(callbacks, function(callback) {                                                                  //
      return callback.priority || RocketChat.callbacks.priority.MEDIUM;                                                // 79
    }).reduce(function(result, callback) {                                                                             //
      var callbackResult, currentTime, ref, ref1, ref2, time;                                                          // 81
      if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {                     //
        time = Date.now();                                                                                             //
      }                                                                                                                //
      callbackResult = callback(result, constant);                                                                     //
      if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {                     //
        currentTime = Date.now() - time;                                                                               //
        totalTime += currentTime;                                                                                      //
        if (RocketChat.callbacks.showTime === true) {                                                                  //
          if (Meteor.isServer) {                                                                                       //
            RocketChat.statsTracker.timing('callbacks.time', currentTime, ["hook:" + hook, "callback:" + callback.id]);
          } else {                                                                                                     //
            console.log(String(currentTime), hook, callback.id, (ref = callback.stack) != null ? typeof ref.split === "function" ? (ref1 = ref.split('\n')[2]) != null ? (ref2 = ref1.match(/\(.+\)/)) != null ? ref2[0] : void 0 : void 0 : void 0 : void 0);
          }                                                                                                            //
        }                                                                                                              //
      }                                                                                                                //
      return callbackResult;                                                                                           // 95
    }, item);                                                                                                          //
    if (RocketChat.callbacks.showTotalTime === true) {                                                                 //
      if (Meteor.isServer) {                                                                                           //
        RocketChat.statsTracker.timing('callbacks.totalTime', totalTime, ["hook:" + hook]);                            //
      } else {                                                                                                         //
        console.log(hook + ':', totalTime);                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    return result;                                                                                                     // 104
  } else {                                                                                                             //
    return item;                                                                                                       // 107
  }                                                                                                                    //
};                                                                                                                     // 72
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 109
 * Successively run all of a hook's callbacks on an item, in async mode (only works on server)                         //
 * @param {String} hook - The name of the hook                                                                         //
 * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                              //
 * @param {Object} [constant] - An optional constant that will be passed along to each callback                        //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.callbacks.runAsync = function(hook, item, constant) {                                                       // 116
  var callbacks;                                                                                                       // 117
  callbacks = RocketChat.callbacks[hook];                                                                              //
  if (Meteor.isServer && !!(callbacks != null ? callbacks.length : void 0)) {                                          //
    Meteor.defer(function() {                                                                                          //
      _.sortBy(callbacks, function(callback) {                                                                         //
        return callback.priority || RocketChat.callbacks.priority.MEDIUM;                                              // 122
      }).forEach(function(callback) {                                                                                  //
        callback(item, constant);                                                                                      //
      });                                                                                                              //
    });                                                                                                                //
  } else {                                                                                                             //
    return item;                                                                                                       // 128
  }                                                                                                                    //
};                                                                                                                     // 116
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fileUploadRestrictions.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/fileUploadRestrictions.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.fileUploadMediaWhiteList = function () {                                                                    // 1
	var mediaTypeWhiteList = RocketChat.settings.get('FileUpload_MediaTypeWhiteList');                                    // 2
                                                                                                                       //
	if (!mediaTypeWhiteList || mediaTypeWhiteList === '*') {                                                              // 4
		return;                                                                                                              // 5
	}                                                                                                                     // 6
	return _.map(mediaTypeWhiteList.split(','), function (item) {                                                         // 7
		return item.trim();                                                                                                  // 8
	});                                                                                                                   // 9
};                                                                                                                     // 10
                                                                                                                       //
RocketChat.fileUploadIsValidContentType = function (type) {                                                            // 12
	var list, wildCardGlob, wildcards;                                                                                    // 13
	list = RocketChat.fileUploadMediaWhiteList();                                                                         // 14
	if (!list || _.contains(list, type)) {                                                                                // 15
		return true;                                                                                                         // 16
	} else {                                                                                                              // 17
		wildCardGlob = '/*';                                                                                                 // 18
		wildcards = _.filter(list, function (item) {                                                                         // 19
			return item.indexOf(wildCardGlob) > 0;                                                                              // 20
		});                                                                                                                  // 21
		if (_.contains(wildcards, type.replace(/(\/.*)$/, wildCardGlob))) {                                                  // 22
			return true;                                                                                                        // 23
		}                                                                                                                    // 24
	}                                                                                                                     // 25
	return false;                                                                                                         // 26
};                                                                                                                     // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"placeholders.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/placeholders.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.placeholders = {};                                                                                          // 1
                                                                                                                       //
RocketChat.placeholders.replace = function (str, data) {                                                               // 3
	if (!str) {                                                                                                           // 4
		return '';                                                                                                           // 5
	}                                                                                                                     // 6
                                                                                                                       //
	str = str.replace(/\[Site_Name\]/g, RocketChat.settings.get('Site_Name') || '');                                      // 8
	str = str.replace(/\[Site_URL\]/g, RocketChat.settings.get('Site_Url') || '');                                        // 9
                                                                                                                       //
	if (data) {                                                                                                           // 11
		str = str.replace(/\[name\]/g, data.name || '');                                                                     // 12
		str = str.replace(/\[fname\]/g, _.strLeft(data.name, ' ') || '');                                                    // 13
		str = str.replace(/\[lname\]/g, _.strRightBack(data.name, ' ') || '');                                               // 14
		str = str.replace(/\[email\]/g, data.email || '');                                                                   // 15
		str = str.replace(/\[password\]/g, data.password || '');                                                             // 16
                                                                                                                       //
		if (data.unsubscribe) {                                                                                              // 18
			str = str.replace(/\[unsubscribe\]/g, data.unsubscribe);                                                            // 19
		}                                                                                                                    // 20
	}                                                                                                                     // 21
                                                                                                                       //
	str = str.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + '<br>' + '$2');                                             // 23
                                                                                                                       //
	return str;                                                                                                           // 26
};                                                                                                                     // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"promises.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/promises.coffee.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
                                                                                                                       //
/*                                                                                                                     // 3
 * Callback hooks provide an easy way to add extra steps to common operations.                                         //
 * @namespace RocketChat.promises                                                                                      //
 */                                                                                                                    //
RocketChat.promises = {};                                                                                              // 7
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 9
 * Callback priorities                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.promises.priority = {                                                                                       // 12
  HIGH: -1000,                                                                                                         //
  MEDIUM: 0,                                                                                                           //
  LOW: 1000                                                                                                            //
};                                                                                                                     //
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 17
 * Add a callback function to a hook                                                                                   //
 * @param {String} hook - The name of the hook                                                                         //
 * @param {Function} callback - The callback function                                                                  //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.promises.add = function(hook, callback, priority, id) {                                                     // 23
  var base, cb, i, len, ref;                                                                                           // 25
  if (priority == null) {                                                                                              //
    priority = RocketChat.promises.priority.MEDIUM;                                                                    //
  }                                                                                                                    //
  if (!_.isNumber(priority)) {                                                                                         //
    priority = RocketChat.promises.priority.MEDIUM;                                                                    //
  }                                                                                                                    //
  callback.priority = priority;                                                                                        //
  callback.id = id || Random.id();                                                                                     //
  if ((base = RocketChat.promises)[hook] == null) {                                                                    //
    base[hook] = [];                                                                                                   //
  }                                                                                                                    //
  ref = RocketChat.promises[hook];                                                                                     // 33
  for (i = 0, len = ref.length; i < len; i++) {                                                                        // 33
    cb = ref[i];                                                                                                       //
    if (cb.id === callback.id) {                                                                                       //
      return;                                                                                                          // 35
    }                                                                                                                  //
  }                                                                                                                    // 33
  RocketChat.promises[hook].push(callback);                                                                            //
};                                                                                                                     // 23
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 40
 * Remove a callback from a hook                                                                                       //
 * @param {string} hook - The name of the hook                                                                         //
 * @param {string} id - The callback's id                                                                              //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.promises.remove = function(hookName, id) {                                                                  // 46
  RocketChat.promises[hookName] = _.reject(RocketChat.promises[hookName], function(callback) {                         //
    return callback.id === id;                                                                                         //
  });                                                                                                                  //
};                                                                                                                     // 46
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 51
 * Successively run all of a hook's callbacks on an item                                                               //
 * @param {String} hook - The name of the hook                                                                         //
 * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                              //
 * @param {Object} [constant] - An optional constant that will be passed along to each callback                        //
 * @returns {Object} Returns the item after it's been through all the callbacks for this hook                          //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.promises.run = function(hook, item, constant) {                                                             // 59
  var callbacks;                                                                                                       // 60
  callbacks = RocketChat.promises[hook];                                                                               //
  if (!!(callbacks != null ? callbacks.length : void 0)) {                                                             //
    callbacks = _.sortBy(callbacks, function(callback) {                                                               //
      return callback.priority || RocketChat.promises.priority.MEDIUM;                                                 // 63
    });                                                                                                                //
    return callbacks.reduce(function(previousPromise, callback) {                                                      // 64
      return new Promise(function(resolve, reject) {                                                                   // 65
        return previousPromise.then(function(result) {                                                                 //
          return callback(result, constant).then(resolve, reject);                                                     //
        });                                                                                                            //
      });                                                                                                              //
    }, Promise.resolve(item));                                                                                         //
  } else {                                                                                                             //
    return Promise.resolve(item);                                                                                      // 71
  }                                                                                                                    //
};                                                                                                                     // 59
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 73
 * Successively run all of a hook's callbacks on an item, in async mode (only works on server)                         //
 * @param {String} hook - The name of the hook                                                                         //
 * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks                              //
 * @param {Object} [constant] - An optional constant that will be passed along to each callback                        //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.promises.runAsync = function(hook, item, constant) {                                                        // 80
  var callbacks;                                                                                                       // 81
  callbacks = RocketChat.promises[hook];                                                                               //
  if (Meteor.isServer && !!(callbacks != null ? callbacks.length : void 0)) {                                          //
    Meteor.defer(function() {                                                                                          //
      _.sortBy(callbacks, function(callback) {                                                                         //
        return callback.priority || RocketChat.promises.priority.MEDIUM;                                               // 86
      }).forEach(function(callback) {                                                                                  //
        callback(item, constant);                                                                                      //
      });                                                                                                              //
    });                                                                                                                //
  } else {                                                                                                             //
    return item;                                                                                                       // 92
  }                                                                                                                    //
};                                                                                                                     // 80
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypesCommon.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypesCommon.coffee.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
this.roomTypesCommon = function () {                                                                                   //
  function roomTypesCommon() {}                                                                                        //
                                                                                                                       //
  roomTypesCommon.prototype.roomTypes = {};                                                                            //
                                                                                                                       //
  roomTypesCommon.prototype.roomTypesOrder = [];                                                                       //
                                                                                                                       //
  roomTypesCommon.prototype.mainOrder = 1;                                                                             //
                                                                                                                       //
  /* Adds a room type to app                                                                                           //
  	@param identifier An identifier to the room type. If a real room, MUST BE the same of `db.rocketchat_room.t` field, if not, can be null
  	@param order Order number of the type                                                                               //
  	@param config                                                                                                       //
  		template: template name to render on sideNav                                                                       //
  		icon: icon class                                                                                                   //
  		route:                                                                                                             //
  			name: route name                                                                                                  //
  			action: route action function                                                                                     //
   */                                                                                                                  //
                                                                                                                       //
  roomTypesCommon.prototype.add = function (identifier, order, config) {                                               //
    var ref, ref1, ref2, routeConfig;                                                                                  //
    if (identifier == null) {                                                                                          //
      identifier = Random.id();                                                                                        //
    }                                                                                                                  //
    if (this.roomTypes[identifier] != null) {                                                                          //
      return false;                                                                                                    //
    }                                                                                                                  //
    if (order == null) {                                                                                               //
      order = this.mainOrder + 10;                                                                                     //
      this.mainOrder += 10;                                                                                            //
    }                                                                                                                  //
    this.roomTypesOrder.push({                                                                                         //
      identifier: identifier,                                                                                          //
      order: order                                                                                                     //
    });                                                                                                                //
    this.roomTypes[identifier] = config;                                                                               //
    if (((ref = config.route) != null ? ref.path : void 0) != null && ((ref1 = config.route) != null ? ref1.name : void 0) != null && ((ref2 = config.route) != null ? ref2.action : void 0) != null) {
      routeConfig = {                                                                                                  //
        name: config.route.name,                                                                                       //
        action: config.route.action                                                                                    //
      };                                                                                                               //
      if (Meteor.isClient) {                                                                                           //
        routeConfig.triggersExit = [roomExit];                                                                         //
      }                                                                                                                //
      return FlowRouter.route(config.route.path, routeConfig);                                                         //
    }                                                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  roomTypesCommon.prototype.hasCustomLink = function (roomType) {                                                      //
    var ref, ref1;                                                                                                     //
    return ((ref = this.roomTypes[roomType]) != null ? (ref1 = ref.route) != null ? ref1.link : void 0 : void 0) != null;
  };                                                                                                                   //
                                                                                                                       //
  /*                                                                                                                   //
  	@param roomType: room type (e.g.: c (for channels), d (for direct channels))                                        //
  	@param subData: the user's subscription data                                                                        //
   */                                                                                                                  //
                                                                                                                       //
  roomTypesCommon.prototype.getRouteLink = function (roomType, subData) {                                              //
    var ref, ref1, routeData;                                                                                          //
    if (this.roomTypes[roomType] == null) {                                                                            //
      return false;                                                                                                    //
    }                                                                                                                  //
    routeData = {};                                                                                                    //
    if (((ref = this.roomTypes[roomType]) != null ? (ref1 = ref.route) != null ? ref1.link : void 0 : void 0) != null) {
      routeData = this.roomTypes[roomType].route.link(subData);                                                        //
    } else if ((subData != null ? subData.name : void 0) != null) {                                                    //
      routeData = {                                                                                                    //
        name: subData.name                                                                                             //
      };                                                                                                               //
    }                                                                                                                  //
    return FlowRouter.path(this.roomTypes[roomType].route.name, routeData);                                            //
  };                                                                                                                   //
                                                                                                                       //
  return roomTypesCommon;                                                                                              //
}();                                                                                                                   //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"slashCommand.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/slashCommand.coffee.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.slashCommands = {                                                                                           // 1
  commands: {}                                                                                                         //
};                                                                                                                     //
                                                                                                                       //
RocketChat.slashCommands.add = function(command, callback, options) {                                                  // 4
  RocketChat.slashCommands.commands[command] = {                                                                       //
    command: command,                                                                                                  //
    callback: callback,                                                                                                //
    params: options != null ? options.params : void 0,                                                                 //
    description: options != null ? options.description : void 0,                                                       //
    clientOnly: (options != null ? options.clientOnly : void 0) || false                                               //
  };                                                                                                                   //
};                                                                                                                     // 4
                                                                                                                       //
RocketChat.slashCommands.run = function(command, params, item) {                                                       // 14
  var callback, ref;                                                                                                   // 15
  if (((ref = RocketChat.slashCommands.commands[command]) != null ? ref.callback : void 0) != null) {                  //
    callback = RocketChat.slashCommands.commands[command].callback;                                                    //
    return callback(command, params, item);                                                                            //
  }                                                                                                                    //
};                                                                                                                     // 14
                                                                                                                       //
Meteor.methods({                                                                                                       // 20
  slashCommand: function(command) {                                                                                    //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 23
        method: 'slashCommand'                                                                                         //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.slashCommands.run(command.cmd, command.params, command.msg);                                     //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Message.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/Message.coffee.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.Message = {                                                                                                 // 1
  parse: function(msg, language) {                                                                                     //
    var messageType, ref;                                                                                              // 3
    messageType = RocketChat.MessageTypes.getType(msg);                                                                //
    if ((messageType != null ? messageType.render : void 0) != null) {                                                 //
      return messageType.render(msg);                                                                                  // 5
    } else if ((messageType != null ? messageType.template : void 0) != null) {                                        //
                                                                                                                       // 6
    } else if ((messageType != null ? messageType.message : void 0) != null) {                                         //
      if (!language && (typeof localStorage !== "undefined" && localStorage !== null ? localStorage.getItem('userLanguage') : void 0)) {
        language = localStorage.getItem('userLanguage');                                                               //
      }                                                                                                                //
      if ((typeof messageType.data === "function" ? messageType.data(msg) : void 0) != null) {                         //
        return TAPi18n.__(messageType.message, messageType.data(msg), language);                                       // 12
      } else {                                                                                                         //
        return TAPi18n.__(messageType.message, {}, language);                                                          // 14
      }                                                                                                                //
    } else {                                                                                                           //
      if (((ref = msg.u) != null ? ref.username : void 0) === RocketChat.settings.get('Chatops_Username')) {           //
        msg.html = msg.msg;                                                                                            //
        return msg.html;                                                                                               // 18
      }                                                                                                                //
      msg.html = msg.msg;                                                                                              //
      if (_.trim(msg.html) !== '') {                                                                                   //
        msg.html = _.escapeHTML(msg.html);                                                                             //
      }                                                                                                                //
      msg.html = msg.html.replace(/\n/gm, '<br/>');                                                                    //
      return msg.html;                                                                                                 // 26
    }                                                                                                                  //
  }                                                                                                                    //
};                                                                                                                     //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MessageTypes.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/MessageTypes.coffee.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.MessageTypes = new ((function() {                                                                           // 1
  var getType, isSystemMessage, registerType, types;                                                                   // 2
                                                                                                                       //
  function _Class() {}                                                                                                 //
                                                                                                                       //
  types = {};                                                                                                          //
                                                                                                                       //
  registerType = function(options) {                                                                                   //
    return types[options.id] = options;                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  getType = function(message) {                                                                                        //
    return types[message != null ? message.t : void 0];                                                                // 8
  };                                                                                                                   //
                                                                                                                       //
  isSystemMessage = function(message) {                                                                                //
    var ref;                                                                                                           // 11
    return (ref = types[message != null ? message.t : void 0]) != null ? ref.system : void 0;                          // 11
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.registerType = registerType;                                                                        //
                                                                                                                       //
  _Class.prototype.getType = getType;                                                                                  //
                                                                                                                       //
  _Class.prototype.isSystemMessage = isSystemMessage;                                                                  //
                                                                                                                       //
  return _Class;                                                                                                       //
                                                                                                                       //
})());                                                                                                                 //
                                                                                                                       //
Meteor.startup(function() {                                                                                            // 17
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'r',                                                                                                           //
    system: true,                                                                                                      //
    message: 'Room_name_changed',                                                                                      //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 23
        room_name: message.msg,                                                                                        //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'au',                                                                                                          //
    system: true,                                                                                                      //
    message: 'User_added_by',                                                                                          //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 30
        user_added: message.msg,                                                                                       //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'ru',                                                                                                          //
    system: true,                                                                                                      //
    message: 'User_removed_by',                                                                                        //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 37
        user_removed: message.msg,                                                                                     //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'ul',                                                                                                          //
    system: true,                                                                                                      //
    message: 'User_left',                                                                                              //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 44
        user_left: message.u.username                                                                                  //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'uj',                                                                                                          //
    system: true,                                                                                                      //
    message: 'User_joined_channel',                                                                                    //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 51
        user: message.u.username                                                                                       //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'wm',                                                                                                          //
    system: true,                                                                                                      //
    message: 'Welcome',                                                                                                //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 58
        user: message.u.username                                                                                       //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'rm',                                                                                                          //
    system: true,                                                                                                      //
    message: 'Message_removed',                                                                                        //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 65
        user: message.u.username                                                                                       //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'rtc',                                                                                                         //
    render: function(message) {                                                                                        //
      return RocketChat.callbacks.run('renderRtcMessage', message);                                                    //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'user-muted',                                                                                                  //
    system: true,                                                                                                      //
    message: 'User_muted_by',                                                                                          //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 77
        user_muted: message.msg,                                                                                       //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'user-unmuted',                                                                                                //
    system: true,                                                                                                      //
    message: 'User_unmuted_by',                                                                                        //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 84
        user_unmuted: message.msg,                                                                                     //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'subscription-role-added',                                                                                     //
    system: true,                                                                                                      //
    message: '__username__was_set__role__by__user_by_',                                                                //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 91
        username: message.msg,                                                                                         //
        role: message.role,                                                                                            //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'subscription-role-removed',                                                                                   //
    system: true,                                                                                                      //
    message: '__username__is_no_longer__role__defined_by__user_by_',                                                   //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 98
        username: message.msg,                                                                                         //
        role: message.role,                                                                                            //
        user_by: message.u.username                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.MessageTypes.registerType({                                                                               //
    id: 'room-archived',                                                                                               //
    system: true,                                                                                                      //
    message: 'This_room_has_been_archived_by__username_',                                                              //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 105
        username: message.u.username                                                                                   //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
  return RocketChat.MessageTypes.registerType({                                                                        //
    id: 'room-unarchived',                                                                                             //
    system: true,                                                                                                      //
    message: 'This_room_has_been_unarchived_by__username_',                                                            //
    data: function(message) {                                                                                          //
      return {                                                                                                         // 112
        username: message.u.username                                                                                   //
      };                                                                                                               //
    }                                                                                                                  //
  });                                                                                                                  //
});                                                                                                                    // 17
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startup":{"settingsOnLoadSiteUrl.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/startup/settingsOnLoadSiteUrl.coffee.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.settings.get('Site_Url', function(key, value) {                                                             // 1
  var host, match, prefix, ref;                                                                                        // 2
  if ((value != null ? value.trim() : void 0) !== '') {                                                                //
    host = value.replace(/\/$/, '');                                                                                   //
    prefix = "";                                                                                                       //
    match = value.match(/([^\/]+\/{2}[^\/]+)(\/.+)/);                                                                  //
    if (match != null) {                                                                                               //
      host = match[1];                                                                                                 //
      prefix = match[2].replace(/\/$/, '');                                                                            //
    }                                                                                                                  //
    __meteor_runtime_config__.ROOT_URL = host;                                                                         //
    if (((ref = Meteor.absoluteUrl.defaultOptions) != null ? ref.rootUrl : void 0) != null) {                          //
      Meteor.absoluteUrl.defaultOptions.rootUrl = host;                                                                //
    }                                                                                                                  //
    if (Meteor.isServer) {                                                                                             //
      RocketChat.hostname = host.replace(/^https?:\/\//, '');                                                          //
      process.env.MOBILE_ROOT_URL = host;                                                                              //
      process.env.MOBILE_DDP_URL = host;                                                                               //
      if (typeof WebAppInternals !== "undefined" && WebAppInternals !== null ? WebAppInternals.generateBoilerplate : void 0) {
        return WebAppInternals.generateBoilerplate();                                                                  //
      }                                                                                                                //
    }                                                                                                                  //
  }                                                                                                                    //
});                                                                                                                    // 1
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"server":{"lib":{"debug.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/debug.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var logger = new Logger('Meteor', {                                                                                    // 1
	methods: {                                                                                                            // 2
		method: {                                                                                                            // 3
			type: 'debug'                                                                                                       // 4
		},                                                                                                                   // 3
		publish: {                                                                                                           // 6
			type: 'debug'                                                                                                       // 7
		}                                                                                                                    // 6
	}                                                                                                                     // 2
});                                                                                                                    // 1
                                                                                                                       //
var wrapMethods = function wrapMethods(name, originalHandler, methodsMap) {                                            // 12
	methodsMap[name] = function () {                                                                                      // 13
		var args = name === 'ufsWrite' ? Array.prototype.slice.call(arguments, 1) : arguments;                               // 14
		logger.method(name, '-> userId:', Meteor.userId(), ', arguments: ', args);                                           // 15
                                                                                                                       //
		return originalHandler.apply(this, arguments);                                                                       // 17
	};                                                                                                                    // 18
};                                                                                                                     // 19
                                                                                                                       //
var originalMeteorMethods = Meteor.methods;                                                                            // 21
                                                                                                                       //
Meteor.methods = function (methodMap) {                                                                                // 23
	_.each(methodMap, function (handler, name) {                                                                          // 24
		wrapMethods(name, handler, methodMap);                                                                               // 25
	});                                                                                                                   // 26
	originalMeteorMethods(methodMap);                                                                                     // 27
};                                                                                                                     // 28
                                                                                                                       //
var originalMeteorPublish = Meteor.publish;                                                                            // 30
                                                                                                                       //
Meteor.publish = function (name, func) {                                                                               // 32
	return originalMeteorPublish(name, function () {                                                                      // 33
		logger.publish(name, '-> userId:', this.userId, ', arguments: ', arguments);                                         // 34
                                                                                                                       //
		return func.apply(this, arguments);                                                                                  // 36
	});                                                                                                                   // 37
};                                                                                                                     // 38
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"bugsnag.js":["bugsnag",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/bugsnag.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var bugsnag;module.import('bugsnag',{"default":function(v){bugsnag=v}});                                               // 1
                                                                                                                       //
RocketChat.bugsnag = bugsnag;                                                                                          // 3
                                                                                                                       //
RocketChat.settings.get('Bugsnag_api_key', function (key, value) {                                                     // 5
	if (value) {                                                                                                          // 6
		bugsnag.register(value);                                                                                             // 7
	}                                                                                                                     // 8
});                                                                                                                    // 9
                                                                                                                       //
var notify = function notify(message, stack) {                                                                         // 11
	if (typeof stack === 'string') {                                                                                      // 12
		message += ' ' + stack;                                                                                              // 13
	}                                                                                                                     // 14
	var options = { app: { version: RocketChat.Info.version, info: RocketChat.Info } };                                   // 15
	var error = new Error(message);                                                                                       // 16
	error.stack = stack;                                                                                                  // 17
	RocketChat.bugsnag.notify(error, options);                                                                            // 18
};                                                                                                                     // 19
                                                                                                                       //
process.on('uncaughtException', Meteor.bindEnvironment(function (error) {                                              // 21
	notify(error.message, error.stack);                                                                                   // 22
}));                                                                                                                   // 23
                                                                                                                       //
var originalMeteorDebug = Meteor._debug;                                                                               // 25
Meteor._debug = function () {                                                                                          // 26
	notify.apply(undefined, arguments);                                                                                   // 27
	return originalMeteorDebug.apply(undefined, arguments);                                                               // 28
};                                                                                                                     // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"RateLimiter.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/RateLimiter.coffee.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.RateLimiter = new ((function() {                                                                            // 1
  function _Class() {}                                                                                                 //
                                                                                                                       //
  _Class.prototype.limitFunction = function(fn, numRequests, timeInterval, matchers) {                                 //
    var rateLimiter;                                                                                                   // 3
    rateLimiter = new RateLimiter();                                                                                   //
    rateLimiter.addRule(matchers, numRequests, timeInterval);                                                          //
    return function() {                                                                                                // 5
      var args, match, rateLimitResult;                                                                                // 6
      match = {};                                                                                                      //
      args = arguments;                                                                                                //
      _.each(matchers, function(matcher, key) {                                                                        //
        return match[key] = args[key];                                                                                 //
      });                                                                                                              //
      rateLimiter.increment(match);                                                                                    //
      rateLimitResult = rateLimiter.check(match);                                                                      //
      if (rateLimitResult.allowed) {                                                                                   //
        return fn.apply(null, arguments);                                                                              // 14
      } else {                                                                                                         //
        throw new Meteor.Error('error-too-many-requests', "Error, too many requests. Please slow down. You must wait " + (Math.ceil(rateLimitResult.timeToReset / 1000)) + " seconds before trying again.", {
          timeToReset: rateLimitResult.timeToReset,                                                                    //
          seconds: Math.ceil(rateLimitResult.timeToReset / 1000)                                                       //
        });                                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.limitMethod = function(methodName, numRequests, timeInterval, matchers) {                           //
    var match;                                                                                                         // 19
    match = {                                                                                                          //
      type: 'method',                                                                                                  //
      name: methodName                                                                                                 //
    };                                                                                                                 //
    _.each(matchers, function(matcher, key) {                                                                          //
      return match[key] = matchers[key];                                                                               //
    });                                                                                                                //
    return DDPRateLimiter.addRule(match, numRequests, timeInterval);                                                   //
  };                                                                                                                   //
                                                                                                                       //
  return _Class;                                                                                                       //
                                                                                                                       //
})());                                                                                                                 //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"defaultBlockedDomainsList.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/defaultBlockedDomainsList.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.emailDomainDefaultBlackList = ['0-mail.com', '0815.ru', '0815.su', '0clickemail.com', '0wnd.net', '0wnd.org', '10mail.org', '10minut.com.pl', '10minutemail.co.za', '10minutemail.com', '10minutemail.de', '123-m.com', '1chuan.com', '1fsdfdsfsdf.tk', '1pad.de', '1zhuan.com', '20email.eu', '20mail.eu', '20mail.it', '20minutemail.com', '21cn.com', '2fdgdfgdfgdf.tk', '2prong.com', '30minutemail.com', '33mail.com', '3d-painting.com', '3trtretgfrfe.tk', '4gfdsgfdgfd.tk', '4warding.com', '4warding.net', '4warding.org', '5ghgfhfghfgh.tk', '60minutemail.com', '675hosting.com', '675hosting.net', '675hosting.org', '6hjgjhgkilkj.tk', '6ip.us', '6paq.com', '6url.com', '75hosting.com', '75hosting.net', '75hosting.org', '7days-printing.com', '7tags.com', '99experts.com', '9ox.net', 'a-bc.net', 'a45.in', 'abcmail.email', 'abyssmail.com', 'acentri.com', 'advantimo.com', 'afrobacon.com', 'ag.us.to', 'agedmail.com', 'ahk.jp', 'ajaxapp.net', 'alivance.com', 'ama-trade.de', 'amail.com', 'amilegit.com', 'amiri.net', 'amiriindustries.com', 'anappthat.com', 'ano-mail.net', 'anonbox.net', 'anonmails.de', 'anonymail.dk', 'anonymbox.com', 'antichef.com', 'antichef.net', 'antireg.ru', 'antispam.de', 'antispammail.de', 'appixie.com', 'armyspy.com', 'artman-conception.com', 'aver.com', 'azmeil.tk', 'baxomale.ht.cx', 'beddly.com', 'beefmilk.com', 'bigprofessor.so', 'bigstring.com', 'binkmail.com', 'bio-muesli.net', 'blogmyway.org', 'bobmail.info', 'bofthew.com', 'bootybay.de', 'boun.cr', 'bouncr.com', 'boxformail.in', 'breakthru.com', 'brefmail.com', 'brennendesreich.de', 'broadbandninja.com', 'bsnow.net', 'bspamfree.org', 'bu.mintemail.com', 'buffemail.com', 'bugmenot.com', 'bumpymail.com', 'bund.us', 'bundes-li.ga', 'burnthespam.info', 'burstmail.info', 'buymoreplays.com', 'buyusedlibrarybooks.org', 'byom.de', 'c2.hu', 'cachedot.net', 'card.zp.ua', 'casualdx.com', 'cbair.com', 'cek.pm', 'cellurl.com', 'centermail.com', 'centermail.net', 'chammy.info', 'cheatmail.de', 'childsavetrust.org', 'chogmail.com', 'choicemail1.com', 'chong-mail.com', 'chong-mail.net', 'chong-mail.org', 'clixser.com', 'cmail.com', 'cmail.net', 'cmail.org', 'coldemail.info', 'consumerriot.com', 'cool.fr.nf', 'correo.blogos.net', 'cosmorph.com', 'courriel.fr.nf', 'courrieltemporaire.com', 'crapmail.org', 'crazymailing.com', 'cubiclink.com', 'curryworld.de', 'cust.in', 'cuvox.de', 'd3p.dk', 'dacoolest.com', 'daintly.com', 'dandikmail.com', 'dayrep.com', 'dbunker.com', 'dcemail.com', 'deadaddress.com', 'deadspam.com', 'deagot.com', 'dealja.com', 'delikkt.de', 'despam.it', 'despammed.com', 'devnullmail.com', 'dfgh.net', 'digitalsanctuary.com', 'dingbone.com', 'discard.email', 'discardmail.com', 'discardmail.de', 'disposableaddress.com', 'disposableemailaddresses.com', 'disposableemailaddresses.emailmiser.com', 'disposableinbox.com', 'dispose.it', 'disposeamail.com', 'disposemail.com', 'dispostable.com', 'dlemail.ru', 'dm.w3internet.co.uk', 'dm.w3internet.co.ukexample.com', 'dodgeit.com', 'dodgit.com', 'dodgit.org', 'doiea.com', 'domozmail.com', 'donemail.ru', 'dontreg.com', 'dontsendmespam.de', 'dotmsg.com', 'drdrb.com', 'drdrb.net', 'droplar.com', 'dropmail.me', 'dt.com', 'duam.net', 'dudmail.com', 'dump-email.info', 'dumpandjunk.com', 'dumpmail.de', 'dumpyemail.com', 'duskmail.com', 'e-mail.com', 'e-mail.org', 'e4ward.com', 'easytrashmail.com', 'einmalmail.de', 'einrot.com', 'einrot.de', 'eintagsmail.de', 'email60.com', 'emaildienst.de', 'emailgo.de', 'emailias.com', 'emailigo.de', 'emailinfive.com', 'emaillime.com', 'emailmiser.com', 'emailproxsy.com', 'emailsensei.com', 'emailtemporanea.com', 'emailtemporanea.net', 'emailtemporar.ro', 'emailtemporario.com.br', 'emailthe.net', 'emailtmp.com', 'emailto.de', 'emailwarden.com', 'emailx.at.hm', 'emailxfer.com', 'emeil.in', 'emeil.ir', 'emil.com', 'emz.net', 'enterto.com', 'ephemail.net', 'ero-tube.org', 'etranquil.com', 'etranquil.net', 'etranquil.org', 'evopo.com', 'explodemail.com', 'express.net.ua', 'eyepaste.com', 'fakeinbox.com', 'fakeinformation.com', 'fakemail.fr', 'fakemailz.com', 'fammix.com', 'fansworldwide.de', 'fantasymail.de', 'fastacura.com', 'fastchevy.com', 'fastchrysler.com', 'fastkawasaki.com', 'fastmazda.com', 'fastmitsubishi.com', 'fastnissan.com', 'fastsubaru.com', 'fastsuzuki.com', 'fasttoyota.com', 'fastyamaha.com', 'fatflap.com', 'fdfdsfds.com', 'fightallspam.com', 'figjs.com', 'fiifke.de', 'filzmail.com', 'fivemail.de', 'fixmail.tk', 'fizmail.com', 'fleckens.hu', 'flemail.ru', 'flyspam.com', 'footard.com', 'forgetmail.com', 'fr33mail.info', 'frapmail.com', 'freundin.ru', 'friendlymail.co.uk', 'front14.org', 'fuckingduh.com', 'fudgerub.com', 'fux0ringduh.com', 'fyii.de', 'garliclife.com', 'gehensiemirnichtaufdensack.de', 'gelitik.in', 'get1mail.com', 'get2mail.fr', 'getairmail.com', 'getmails.eu', 'getonemail.com', 'getonemail.net', 'ghosttexter.de', 'giantmail.de', 'girlsundertheinfluence.com', 'gishpuppy.com', 'gmial.com', 'goemailgo.com', 'gorillaswithdirtyarmpits.com', 'gotmail.com', 'gotmail.net', 'gotmail.org', 'gotti.otherinbox.com', 'gowikibooks.com', 'gowikicampus.com', 'gowikicars.com', 'gowikifilms.com', 'gowikigames.com', 'gowikimusic.com', 'gowikimusic.great-host.in', 'gowikinetwork.com', 'gowikitravel.com', 'gowikitv.com', 'grandmamail.com', 'grandmasmail.com', 'great-host.in', 'greensloth.com', 'grr.la', 'gsrv.co.uk', 'guerillamail.biz', 'guerillamail.com', 'guerillamail.net', 'guerillamail.org', 'guerrillamail.biz', 'guerrillamail.com', 'guerrillamail.de', 'guerrillamail.info', 'guerrillamail.net', 'guerrillamail.org', 'guerrillamailblock.com', 'gustr.com', 'h.mintemail.com', 'h8s.org', 'hacccc.com', 'haltospam.com', 'harakirimail.com', 'hartbot.de', 'hat-geld.de', 'hatespam.org', 'hellodream.mobi', 'herp.in', 'hidemail.de', 'hidzz.com', 'hmamail.com', 'hochsitze.com', 'hopemail.biz', 'hotpop.com', 'hulapla.de', 'iaoss.com', 'ieatspam.eu', 'ieatspam.info', 'ieh-mail.de', 'ihateyoualot.info', 'iheartspam.org', 'ikbenspamvrij.nl', 'imails.info', 'imgof.com', 'imstations.com', 'inbax.tk', 'inbox.si', 'inboxalias.com', 'inboxclean.com', 'inboxclean.org', 'inboxproxy.com', 'incognitomail.com', 'incognitomail.net', 'incognitomail.org', 'infocom.zp.ua', 'inoutmail.de', 'inoutmail.eu', 'inoutmail.info', 'inoutmail.net', 'insorg-mail.info', 'instant-mail.de', 'ip6.li', 'ipoo.org', 'irish2me.com', 'iwi.net', 'jamit.com.au', 'jetable.com', 'jetable.fr.nf', 'jetable.net', 'jetable.org', 'jnxjn.com', 'jourrapide.com', 'jsrsolutions.com', 'junk1e.com', 'kasmail.com', 'kaspop.com', 'keepmymail.com', 'killmail.com', 'killmail.net', 'kimsdisk.com', 'kingsq.ga', 'kir.ch.tc', 'klassmaster.com', 'klassmaster.net', 'klzlk.com', 'kook.ml', 'koszmail.pl', 'kulturbetrieb.info', 'kurzepost.de', 'l33r.eu', 'lackmail.net', 'lags.us', 'lawlita.com', 'lazyinbox.com', 'letthemeatspam.com', 'lhsdv.com', 'lifebyfood.com', 'link2mail.net', 'litedrop.com', 'loadby.us', 'login-email.ml', 'lol.ovpn.to', 'lolfreak.net', 'lookugly.com', 'lopl.co.cc', 'lortemail.dk', 'lovemeleaveme.com', 'lr78.com', 'lroid.com', 'lukop.dk', 'm21.cc', 'm4ilweb.info', 'maboard.com', 'mail-filter.com', 'mail-temporaire.fr', 'mail.by', 'mail.mezimages.net', 'mail.zp.ua', 'mail114.net', 'mail1a.de', 'mail21.cc', 'mail2rss.org', 'mail333.com', 'mail4trash.com', 'mailbidon.com', 'mailbiz.biz', 'mailblocks.com', 'mailbucket.org', 'mailcat.biz', 'mailcatch.com', 'mailde.de', 'mailde.info', 'maildrop.cc', 'maildx.com', 'maileater.com', 'mailed.ro', 'maileimer.de', 'mailexpire.com', 'mailfa.tk', 'mailforspam.com', 'mailfreeonline.com', 'mailfs.com', 'mailguard.me', 'mailimate.com', 'mailin8r.com', 'mailinater.com', 'mailinator.com', 'mailinator.net', 'mailinator.org', 'mailinator.us', 'mailinator2.com', 'mailincubator.com', 'mailismagic.com', 'mailmate.com', 'mailme.ir', 'mailme.lv', 'mailme24.com', 'mailmetrash.com', 'mailmetrash.comilzilla.org', 'mailmoat.com', 'mailms.com', 'mailnator.com', 'mailnesia.com', 'mailnull.com', 'mailorg.org', 'mailpick.biz', 'mailproxsy.com', 'mailquack.com', 'mailrock.biz', 'mailscrap.com', 'mailshell.com', 'mailsiphon.com', 'mailslapping.com', 'mailslite.com', 'mailtemp.info', 'mailtome.de', 'mailtothis.com', 'mailtrash.net', 'mailtv.net', 'mailtv.tv', 'mailzilla.com', 'mailzilla.org', 'mailzilla.orgmbx.cc', 'makemetheking.com', 'manifestgenerator.com', 'manybrain.com', 'mbx.cc', 'mega.zik.dj', 'meinspamschutz.de', 'meltmail.com', 'messagebeamer.de', 'mezimages.net', 'mierdamail.com', 'migumail.com', 'ministry-of-silly-walks.de', 'mintemail.com', 'misterpinball.de', 'mjukglass.nu', 'mmailinater.com', 'moakt.com', 'mobi.web.id', 'mobileninja.co.uk', 'moburl.com', 'mohmal.com', 'moncourrier.fr.nf', 'monemail.fr.nf', 'monmail.fr.nf', 'monumentmail.com', 'msa.minsmail.com', 'mt2009.com', 'mt2014.com', 'mx0.wwwnew.eu', 'my10minutemail.com', 'mycard.net.ua', 'mycleaninbox.net', 'myemailboxy.com', 'mymail-in.net', 'mymailoasis.com', 'mynetstore.de', 'mypacks.net', 'mypartyclip.de', 'myphantomemail.com', 'mysamp.de', 'myspaceinc.com', 'myspaceinc.net', 'myspaceinc.org', 'myspacepimpedup.com', 'myspamless.com', 'mytemp.email', 'mytempemail.com', 'mytempmail.com', 'mytrashmail.com', 'nabuma.com', 'neomailbox.com', 'nepwk.com', 'nervmich.net', 'nervtmich.net', 'netmails.com', 'netmails.net', 'netzidiot.de', 'neverbox.com', 'nice-4u.com', 'nincsmail.com', 'nincsmail.hu', 'nnh.com', 'no-spam.ws', 'noblepioneer.com', 'nobulk.com', 'noclickemail.com', 'nogmailspam.info', 'nomail.pw', 'nomail.xl.cx', 'nomail2me.com', 'nomorespamemails.com', 'nonspam.eu', 'nonspammer.de', 'noref.in', 'nospam.ze.tc', 'nospam4.us', 'nospamfor.us', 'nospammail.net', 'nospamthanks.info', 'notmailinator.com', 'notsharingmy.info', 'nowhere.org', 'nowmymail.com', 'nurfuerspam.de', 'nus.edu.sg', 'nwldx.com', 'objectmail.com', 'obobbo.com', 'odaymail.com', 'odnorazovoe.ru', 'one-time.email', 'oneoffemail.com', 'oneoffmail.com', 'onewaymail.com', 'onlatedotcom.info', 'online.ms', 'oopi.org', 'opayq.com', 'ordinaryamerican.net', 'otherinbox.codupmyspace.com', 'otherinbox.com', 'ourklips.com', 'outlawspam.com', 'ovpn.to', 'owlpic.com', 'pancakemail.com', 'paplease.com', 'pcusers.otherinbox.com', 'pepbot.com', 'pfui.ru', 'pimpedupmyspace.com', 'pjjkp.com', 'plexolan.de', 'poczta.onet.pl', 'politikerclub.de', 'pooae.com', 'poofy.org', 'pookmail.com', 'privacy.net', 'privatdemail.net', 'privy-mail.com', 'privymail.de', 'proxymail.eu', 'prtnx.com', 'prtz.eu', 'punkass.com', 'putthisinyourspamdatabase.com', 'pwrby.com', 'quickinbox.com', 'quickmail.nl', 'rcpt.at', 'reallymymail.com', 'realtyalerts.ca', 'recode.me', 'recursor.net', 'recyclemail.dk', 'regbypass.com', 'regbypass.comsafe-mail.net', 'rejectmail.com', 'reliable-mail.com', 'rhyta.com', 'rklips.com', 'rmqkr.net', 'royal.net', 'rppkn.com', 'rtrtr.com', 's0ny.net', 'safe-mail.net', 'safersignup.de', 'safetymail.info', 'safetypost.de', 'sandelf.de', 'saynotospams.com', 'schafmail.de', 'schrott-email.de', 'secretemail.de', 'secure-mail.biz', 'selfdestructingmail.com', 'selfdestructingmail.org', 'sendspamhere.com', 'sendspamhere.com', 'senseless-entertainment.com', 'services391.com', 'sharedmailbox.org', 'sharklasers.com', 'shieldedmail.com', 'shieldemail.com', 'shiftmail.com', 'shitmail.me', 'shitmail.org', 'shitware.nl', 'shmeriously.com', 'shortmail.net', 'shotmail.ru', 'showslow.de', 'sibmail.com', 'sinnlos-mail.de', 'siteposter.net', 'skeefmail.com', 'slapsfromlastnight.com', 'slaskpost.se', 'slipry.net', 'slopsbox.com', 'slushmail.com', 'smashmail.de', 'smellfear.com', 'smellrear.com', 'snakemail.com', 'sneakemail.com', 'sneakmail.de', 'snkmail.com', 'sofimail.com', 'sofort-mail.de', 'softpls.asia', 'sogetthis.com', 'sohu.com', 'solvemail.info', 'soodonims.com', 'spa.com', 'spaereplease.com', 'spam.la', 'spam.su', 'spam4.me', 'spamail.de', 'spamarrest.com', 'spamavert.com', 'spambob.com', 'spambob.net', 'spambob.org', 'spambog.com', 'spambog.de', 'spambog.net', 'spambog.ru', 'spambox.info', 'spambox.irishspringrealty.com', 'spambox.us', 'spamcannon.com', 'spamcannon.net', 'spamcero.com', 'spamcon.org', 'spamcorptastic.com', 'spamcowboy.com', 'spamcowboy.net', 'spamcowboy.org', 'spamday.com', 'spamex.com', 'spamfree.eu', 'spamfree24.com', 'spamfree24.de', 'spamfree24.eu', 'spamfree24.info', 'spamfree24.net', 'spamfree24.org', 'spamgoes.in', 'spamgourmet.com', 'spamgourmet.net', 'spamgourmet.org', 'spamherelots.com', 'spamhereplease.com', 'spamhole.com', 'spamify.com', 'spaminator.de', 'spamkill.info', 'spaml.com', 'spaml.de', 'spammotel.com', 'spamobox.com', 'spamoff.de', 'spamsalad.in', 'spamslicer.com', 'spamspot.com', 'spamstack.net', 'spamthis.co.uk', 'spamthisplease.com', 'spamtrail.com', 'spamtroll.net', 'speed.1s.fr', 'spikio.com', 'spoofmail.de', 'squizzy.de', 'ssoia.com', 'startkeys.com', 'stinkefinger.net', 'stop-my-spam.com', 'stuffmail.de', 'super-auswahl.de', 'supergreatmail.com', 'supermailer.jp', 'superrito.com', 'superstachel.de', 'suremail.info', 'svk.jp', 'sweetxxx.de', 'tagyourself.com', 'talkinator.com', 'tapchicuoihoi.com', 'teewars.org', 'teleosaurs.xyz', 'teleworm.com', 'teleworm.us', 'temp-mail.org', 'temp-mail.ru', 'temp.emeraldwebmail.com', 'temp.headstrong.de', 'tempalias.com', 'tempe-mail.com', 'tempemail.biz', 'tempemail.co.za', 'tempemail.com', 'tempemail.net', 'tempemail.net', 'tempinbox.co.uk', 'tempinbox.com', 'tempmail.eu', 'tempmail.it', 'tempmail2.com', 'tempmaildemo.com', 'tempmailer.com', 'tempmailer.de', 'tempomail.fr', 'temporarily.de', 'temporarioemail.com.br', 'temporaryemail.net', 'temporaryemail.us', 'temporaryforwarding.com', 'temporaryinbox.com', 'temporarymailaddress.com', 'tempsky.com', 'tempthe.net', 'tempymail.com', 'thanksnospam.info', 'thankyou2010.com', 'thc.st', 'thecloudindex.com', 'thelimestones.com', 'thisisnotmyrealemail.com', 'thismail.net', 'thrma.com', 'throwawayemailaddress.com', 'tilien.com', 'tittbit.in', 'tizi.com', 'tmail.ws', 'tmailinator.com', 'toiea.com', 'toomail.biz', 'topranklist.de', 'tradermail.info', 'trash-amil.com', 'trash-mail.at', 'trash-mail.com', 'trash-mail.de', 'trash2009.com', 'trash2010.com', 'trash2011.com', 'trashdevil.com', 'trashdevil.de', 'trashemail.de', 'trashmail.at', 'trashmail.com', 'trashmail.de', 'trashmail.me', 'trashmail.net', 'trashmail.org', 'trashmail.ws', 'trashmailer.com', 'trashymail.com', 'trashymail.net', 'trbvm.com', 'trbvn.com', 'trialmail.de', 'trillianpro.com', 'tryalert.com', 'turual.com', 'twinmail.de', 'twoweirdtricks.com', 'tyldd.com', 'uggsrock.com', 'umail.net', 'upliftnow.com', 'uplipht.com', 'uroid.com', 'us.af', 'username.e4ward.com', 'venompen.com', 'veryrealemail.com', 'vidchart.com', 'viditag.com', 'viewcastmedia.com', 'viewcastmedia.net', 'viewcastmedia.org', 'viewcastmediae', 'viralplays.com', 'vkcode.ru', 'vomoto.com', 'vpn.st', 'vsimcard.com', 'vubby.com', 'walala.org', 'walkmail.net', 'walkmail.ru', 'wasteland.rfc822.org', 'webemail.me', 'webm4il.info', 'webuser.in', 'wee.my', 'weg-werf-email.de', 'wegwerf-email-addressen.de', 'wegwerf-emails.de', 'wegwerfadresse.de', 'wegwerfemail.com', 'wegwerfemail.de', 'wegwerfmail.de', 'wegwerfmail.info', 'wegwerfmail.net', 'wegwerfmail.org', 'wetrainbayarea.com', 'wetrainbayarea.org', 'wh4f.org', 'whatiaas.com', 'whatpaas.com', 'whatsaas.com', 'whopy.com', 'whtjddn.33mail.com', 'whyspam.me', 'wilemail.com', 'willhackforfood.biz', 'willselfdestruct.com', 'winemaven.info', 'wronghead.com', 'wuzup.net', 'wuzupmail.net', 'www.e4ward.com', 'www.gishpuppy.com', 'www.mailinator.com', 'wwwnew.eu', 'x.ip6.li', 'xagloo.com', 'xemaps.com', 'xents.com', 'xmaily.com', 'xoxy.net', 'xyzfree.net', 'yapped.net', 'yeah.net', 'yep.it', 'yogamaven.com', 'yomail.info', 'yopmail.com', 'yopmail.fr', 'yopmail.net', 'yourdomain.com', 'ypmail.webarnak.fr.eu.org', 'yuurok.com', 'z1p.biz', 'za.com', 'zehnminuten.de', 'zehnminutenmail.de', 'zetmail.com', 'zippymail.info', 'zoaxe.com', 'zoemail.com', 'zoemail.net', 'zoemail.org', 'zomg.info', 'zxcv.com', 'zxcvbnm.com', 'zzz.com'];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"notifyUsersOnMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/notifyUsersOnMessage.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {                                                // 1
	// skips this callback if the message was edited                                                                      // 2
	if (message.editedAt) {                                                                                               // 3
		return message;                                                                                                      // 4
	}                                                                                                                     // 5
                                                                                                                       //
	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {                                                      // 7
		return message;                                                                                                      // 8
	}                                                                                                                     // 9
                                                                                                                       //
	/**                                                                                                                   // 11
  * Chechs if a messages contains a user highlight                                                                     //
  *                                                                                                                    //
  * @param {string} message                                                                                            //
  * @param {array|undefined} highlights                                                                                //
  *                                                                                                                    //
  * @returns {boolean}                                                                                                 //
     */                                                                                                                //
	function messageContainsHighlight(message, highlights) {                                                              // 19
		if (!highlights || highlights.length === 0) {                                                                        // 20
			return false;                                                                                                       // 20
		}                                                                                                                    // 20
                                                                                                                       //
		var has = false;                                                                                                     // 22
		highlights.some(function (highlight) {                                                                               // 23
			var regexp = new RegExp(s.escapeRegExp(highlight), 'i');                                                            // 24
			if (regexp.test(message.msg)) {                                                                                     // 25
				has = true;                                                                                                        // 26
				return true;                                                                                                       // 27
			}                                                                                                                   // 28
		});                                                                                                                  // 29
                                                                                                                       //
		return has;                                                                                                          // 31
	}                                                                                                                     // 32
                                                                                                                       //
	if (room.t != null && room.t === 'd') {                                                                               // 34
		// Update the other subscriptions                                                                                    // 35
		RocketChat.models.Subscriptions.incUnreadOfDirectForRoomIdExcludingUserId(message.rid, message.u._id, 1);            // 36
	} else {                                                                                                              // 37
		var mentionIds, toAll, highlightsIds, highlights;                                                                    // 38
                                                                                                                       //
		mentionIds = [];                                                                                                     // 40
		highlightsIds = [];                                                                                                  // 41
		toAll = false;                                                                                                       // 42
		highlights = RocketChat.models.Users.findUsersByUsernamesWithHighlights(room.usernames, { fields: { '_id': 1, 'settings.preferences.highlights': 1 } }).fetch();
                                                                                                                       //
		if (message.mentions != null) {                                                                                      // 45
			message.mentions.forEach(function (mention) {                                                                       // 46
				if (!toAll && mention._id === 'all') {                                                                             // 47
					toAll = true;                                                                                                     // 48
				}                                                                                                                  // 49
				if (mention._id !== message.u._id) {                                                                               // 50
					mentionIds.push(mention._id);                                                                                     // 51
				}                                                                                                                  // 52
			});                                                                                                                 // 53
		}                                                                                                                    // 54
                                                                                                                       //
		highlights.forEach(function (user) {                                                                                 // 56
			if (user && user.settings && user.settings.preferences && messageContainsHighlight(message, user.settings.preferences.highlights)) {
				if (user._id !== message.u._id) {                                                                                  // 58
					highlightsIds.push(user._id);                                                                                     // 59
				}                                                                                                                  // 60
			}                                                                                                                   // 61
		});                                                                                                                  // 62
                                                                                                                       //
		if (toAll) {                                                                                                         // 64
			RocketChat.models.Subscriptions.incUnreadForRoomIdExcludingUserId(room._id, message.u._id);                         // 65
		} else if (mentionIds && mentionIds.length > 0 || highlightsIds && highlightsIds.length > 0) {                       // 66
			RocketChat.models.Subscriptions.incUnreadForRoomIdAndUserIds(room._id, _.compact(_.unique(mentionIds.concat(highlightsIds))));
		}                                                                                                                    // 68
	}                                                                                                                     // 69
                                                                                                                       //
	// Update all the room activity tracker fields                                                                        // 71
	RocketChat.models.Rooms.incMsgCountAndSetLastMessageTimestampById(message.rid, 1, message.ts);                        // 72
                                                                                                                       //
	// Update all other subscriptions to alert their owners but witout incrementing                                       // 74
	// the unread counter, as it is only for mentions and direct messages                                                 // 75
	RocketChat.models.Subscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id);                         // 76
                                                                                                                       //
	return message;                                                                                                       // 78
}, RocketChat.callbacks.priority.LOW, 'notifyUsersOnMessage');                                                         // 80
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypes.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/roomTypes.coffee.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var roomTypesServer,                                                                                                   // 1
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
RocketChat.roomTypes = new (roomTypesServer = (function(superClass) {                                                  // 1
  extend(roomTypesServer, superClass);                                                                                 //
                                                                                                                       //
  function roomTypesServer() {                                                                                         //
    return roomTypesServer.__super__.constructor.apply(this, arguments);                                               //
  }                                                                                                                    //
                                                                                                                       //
                                                                                                                       //
  /* add a publish for a room type                                                                                     // 2
  	@param roomType: room type (e.g.: c (for channels), d (for direct channels))                                        //
  	@param callback: function that will return the publish's data                                                       //
   */                                                                                                                  //
                                                                                                                       //
  roomTypesServer.prototype.setPublish = function(roomType, callback) {                                                //
    var ref;                                                                                                           // 7
    if (((ref = this.roomTypes[roomType]) != null ? ref.publish : void 0) != null) {                                   //
      throw new Meteor.Error('route-publish-exists', 'Publish for the given type already exists');                     // 8
    }                                                                                                                  //
    if (this.roomTypes[roomType] == null) {                                                                            //
      this.roomTypes[roomType] = {};                                                                                   //
    }                                                                                                                  //
    return this.roomTypes[roomType].publish = callback;                                                                //
  };                                                                                                                   //
                                                                                                                       //
  roomTypesServer.prototype.setRoomFind = function(roomType, callback) {                                               //
    var ref;                                                                                                           // 16
    if (((ref = this.roomTypes[roomType]) != null ? ref.roomFind : void 0) != null) {                                  //
      throw new Meteor.Error('room-find-exists', 'Room find for the given type already exists');                       // 17
    }                                                                                                                  //
    if (this.roomTypes[roomType] == null) {                                                                            //
      this.roomTypes[roomType] = {};                                                                                   //
    }                                                                                                                  //
    return this.roomTypes[roomType].roomFind = callback;                                                               //
  };                                                                                                                   //
                                                                                                                       //
  roomTypesServer.prototype.getRoomFind = function(roomType) {                                                         //
    var ref;                                                                                                           // 25
    if (((ref = this.roomTypes[roomType]) != null ? ref.roomFind : void 0) == null) {                                  //
      return;                                                                                                          // 25
    }                                                                                                                  //
    return this.roomTypes[roomType].roomFind;                                                                          // 26
  };                                                                                                                   //
                                                                                                                       //
                                                                                                                       //
  /* run the publish for a room type                                                                                   // 28
  	@param scope: Meteor publish scope                                                                                  //
  	@param roomType: room type (e.g.: c (for channels), d (for direct channels))                                        //
  	@param identifier: identifier of the room                                                                           //
   */                                                                                                                  //
                                                                                                                       //
  roomTypesServer.prototype.runPublish = function(scope, roomType, identifier) {                                       //
    var ref;                                                                                                           // 34
    if (((ref = this.roomTypes[roomType]) != null ? ref.publish : void 0) == null) {                                   //
      return;                                                                                                          // 34
    }                                                                                                                  //
    return this.roomTypes[roomType].publish.call(scope, identifier);                                                   // 35
  };                                                                                                                   //
                                                                                                                       //
  return roomTypesServer;                                                                                              //
                                                                                                                       //
})(roomTypesCommon));                                                                                                  //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendEmailOnMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendEmailOnMessage.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {                                                // 1
	// skips this callback if the message was edited                                                                      // 2
	if (message.editedAt) {                                                                                               // 3
		return message;                                                                                                      // 4
	}                                                                                                                     // 5
                                                                                                                       //
	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {                                                      // 7
		return message;                                                                                                      // 8
	}                                                                                                                     // 9
                                                                                                                       //
	var emailSubject,                                                                                                     // 11
	    usersToSendEmail = {};                                                                                            // 11
	var directMessage = room.t === 'd';                                                                                   // 12
                                                                                                                       //
	if (directMessage) {                                                                                                  // 14
		usersToSendEmail[message.rid.replace(message.u._id, '')] = 1;                                                        // 15
                                                                                                                       //
		emailSubject = TAPi18n.__('Offline_DM_Email', {                                                                      // 17
			user: message.u.username                                                                                            // 18
		});                                                                                                                  // 17
	} else {                                                                                                              // 21
		if (message.mentions) {                                                                                              // 22
			message.mentions.forEach(function (mention) {                                                                       // 23
				usersToSendEmail[mention._id] = 1;                                                                                 // 24
			});                                                                                                                 // 25
		}                                                                                                                    // 26
                                                                                                                       //
		emailSubject = TAPi18n.__('Offline_Mention_Email', {                                                                 // 28
			user: message.u.username,                                                                                           // 29
			room: room.name                                                                                                     // 30
		});                                                                                                                  // 28
	}                                                                                                                     // 32
                                                                                                                       //
	var getMessageLink = function getMessageLink(room, sub) {                                                             // 34
		var roomPath = RocketChat.roomTypes.getRouteLink(room.t, sub);                                                       // 35
		var path = Meteor.absoluteUrl(roomPath ? roomPath.replace(/^\//, '') : '');                                          // 36
		var style = ['color: #fff;', 'padding: 9px 12px;', 'border-radius: 4px;', 'background-color: #04436a;', 'text-decoration: none;'].join(' ');
		var message = TAPi18n.__('Offline_Link_Message');                                                                    // 44
		return '<p style="text-align:center;margin-bottom:8px;"><a style="' + style + '" href="' + path + '">' + message + '</a>';
	};                                                                                                                    // 46
                                                                                                                       //
	var divisorMessage = '<hr style="margin: 20px auto; border: none; border-bottom: 1px solid #dddddd;">';               // 48
	var messageHTML = s.escapeHTML(message.msg);                                                                          // 49
                                                                                                                       //
	message = RocketChat.callbacks.run('renderMessage', message);                                                         // 51
	if (message.tokens && message.tokens.length > 0) {                                                                    // 52
		message.tokens.forEach(function (token) {                                                                            // 53
			token.text = token.text.replace(/([^\$])(\$[^\$])/gm, '$1$$$2');                                                    // 54
			messageHTML = messageHTML.replace(token.token, token.text);                                                         // 55
		});                                                                                                                  // 56
	}                                                                                                                     // 57
                                                                                                                       //
	var header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                          // 59
	var footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                          // 60
	messageHTML = messageHTML.replace(/\n/gm, '<br/>');                                                                   // 61
                                                                                                                       //
	RocketChat.models.Subscriptions.findWithSendEmailByRoomId(room._id).forEach(function (sub) {                          // 63
		switch (sub.emailNotifications) {                                                                                    // 64
			case 'all':                                                                                                         // 65
				usersToSendEmail[sub.u._id] = 'force';                                                                             // 66
				break;                                                                                                             // 67
			case 'mentions':                                                                                                    // 68
				if (usersToSendEmail[sub.u._id]) {                                                                                 // 69
					usersToSendEmail[sub.u._id] = 'force';                                                                            // 70
				}                                                                                                                  // 71
				break;                                                                                                             // 72
			case 'nothing':                                                                                                     // 73
				delete usersToSendEmail[sub.u._id];                                                                                // 74
				break;                                                                                                             // 75
			case 'default':                                                                                                     // 76
				break;                                                                                                             // 77
		}                                                                                                                    // 64
	});                                                                                                                   // 79
                                                                                                                       //
	var userIdsToSendEmail = Object.keys(usersToSendEmail);                                                               // 81
                                                                                                                       //
	var defaultLink;                                                                                                      // 83
                                                                                                                       //
	var linkByUser = {};                                                                                                  // 85
	if (RocketChat.roomTypes.hasCustomLink(room.t)) {                                                                     // 86
		RocketChat.models.Subscriptions.findByRoomIdAndUserIds(room._id, userIdsToSendEmail).forEach(function (sub) {        // 87
			linkByUser[sub.u._id] = getMessageLink(room, sub);                                                                  // 88
		});                                                                                                                  // 89
	} else {                                                                                                              // 90
		defaultLink = getMessageLink(room, { name: room.name });                                                             // 91
	}                                                                                                                     // 92
                                                                                                                       //
	if (userIdsToSendEmail.length > 0) {                                                                                  // 94
		var usersOfMention = RocketChat.models.Users.getUsersToSendOfflineEmail(userIdsToSendEmail).fetch();                 // 95
                                                                                                                       //
		if (usersOfMention && usersOfMention.length > 0) {                                                                   // 97
			var siteName = RocketChat.settings.get('Site_Name');                                                                // 98
                                                                                                                       //
			usersOfMention.forEach(function (user) {                                                                            // 100
				if (user.settings && user.settings.preferences && user.settings.preferences.emailNotificationMode && user.settings.preferences.emailNotificationMode === 'disabled' && usersToSendEmail[user._id] !== 'force') {
					return;                                                                                                           // 102
				}                                                                                                                  // 103
                                                                                                                       //
				// Checks if user is in the room he/she is mentioned (unless it's public channel)                                  // 105
				if (room.t !== 'c' && room.usernames.indexOf(user.username) === -1) {                                              // 106
					return;                                                                                                           // 107
				}                                                                                                                  // 108
                                                                                                                       //
				user.emails.some(function (email) {                                                                                // 110
					if (email.verified) {                                                                                             // 111
						email = {                                                                                                        // 112
							to: email.address,                                                                                              // 113
							from: RocketChat.settings.get('From_Email'),                                                                    // 114
							subject: '[' + siteName + '] ' + emailSubject,                                                                  // 115
							html: header + messageHTML + divisorMessage + (linkByUser[user._id] || defaultLink) + footer                    // 116
						};                                                                                                               // 112
                                                                                                                       //
						Meteor.defer(function () {                                                                                       // 119
							Email.send(email);                                                                                              // 120
						});                                                                                                              // 121
                                                                                                                       //
						return true;                                                                                                     // 123
					}                                                                                                                 // 124
				});                                                                                                                // 125
			});                                                                                                                 // 126
		}                                                                                                                    // 127
	}                                                                                                                     // 128
                                                                                                                       //
	return message;                                                                                                       // 130
}, RocketChat.callbacks.priority.LOW, 'sendEmailOnMessage');                                                           // 132
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendNotificationsOnMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendNotificationsOnMessage.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals Push */                                                                                                     // 1
                                                                                                                       //
RocketChat.callbacks.add('afterSaveMessage', function (message, room) {                                                // 3
	// skips this callback if the message was edited                                                                      // 4
	if (message.editedAt) {                                                                                               // 5
		return message;                                                                                                      // 6
	}                                                                                                                     // 7
                                                                                                                       //
	if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {                                                      // 9
		return message;                                                                                                      // 10
	}                                                                                                                     // 11
                                                                                                                       //
	var user = RocketChat.models.Users.findOneById(message.u._id);                                                        // 13
                                                                                                                       //
	/*                                                                                                                    // 15
 Increment unread couter if direct messages                                                                            //
  */                                                                                                                   //
	var indexOf = [].indexOf || function (item) {                                                                         // 18
		for (var i = 0, l = this.length; i < l; i++) {                                                                       // 19
			if (i in this && this[i] === item) {                                                                                // 20
				return i;                                                                                                          // 21
			}                                                                                                                   // 22
		}                                                                                                                    // 23
		return -1;                                                                                                           // 24
	};                                                                                                                    // 25
                                                                                                                       //
	var settings, desktopMentionIds, i, j, len, len1, highlights, mentionIds, highlightsIds, usersWithHighlights, mobileMentionIds, ref, ref1, toAll, toHere, userIdsToNotify, userIdsToPushNotify, userOfMention, userOfMentionId, usersOfDesktopMentions, usersOfMentionId, usersOfMentionItem, usersOfMobileMentions;
                                                                                                                       //
	/**                                                                                                                   // 29
  * Checks if a given user can be notified                                                                             //
  *                                                                                                                    //
  * @param {string} id                                                                                                 //
  * @param {string} type - mobile|desktop                                                                              //
  *                                                                                                                    //
  * @returns {boolean}                                                                                                 //
     */                                                                                                                //
	function canBeNotified(id, type) {                                                                                    // 37
		var types = {                                                                                                        // 38
			mobile: ['dontNotifyDesktopUsers', 'alwaysNotifyDesktopUsers'],                                                     // 39
			desktop: ['dontNotifyMobileUsers', 'alwaysNotifyMobileUsers']                                                       // 40
		};                                                                                                                   // 38
                                                                                                                       //
		return settings[types[type][0]].indexOf(id) === -1 || settings[types[type][1]].indexOf(id) !== -1;                   // 43
	}                                                                                                                     // 44
                                                                                                                       //
	/**                                                                                                                   // 46
  * Checks if a message contains a user highlight                                                                      //
  *                                                                                                                    //
  * @param {string} message                                                                                            //
  * @param {array|undefined} highlights                                                                                //
  *                                                                                                                    //
  * @returns {boolean}                                                                                                 //
  */                                                                                                                   //
	function messageContainsHighlight(message, highlights) {                                                              // 54
		if (!highlights || highlights.length === 0) {                                                                        // 55
			return false;                                                                                                       // 55
		}                                                                                                                    // 55
                                                                                                                       //
		var has = false;                                                                                                     // 57
		highlights.some(function (highlight) {                                                                               // 58
			var regexp = new RegExp(s.escapeRegExp(highlight), 'i');                                                            // 59
			if (regexp.test(message.msg)) {                                                                                     // 60
				has = true;                                                                                                        // 61
				return true;                                                                                                       // 62
			}                                                                                                                   // 63
		});                                                                                                                  // 64
                                                                                                                       //
		return has;                                                                                                          // 66
	}                                                                                                                     // 67
                                                                                                                       //
	settings = {};                                                                                                        // 69
                                                                                                                       //
	settings.alwaysNotifyDesktopUsers = [];                                                                               // 71
	settings.dontNotifyDesktopUsers = [];                                                                                 // 72
	settings.alwaysNotifyMobileUsers = [];                                                                                // 73
	settings.dontNotifyMobileUsers = [];                                                                                  // 74
	settings.desktopNotificationDurations = {};                                                                           // 75
	RocketChat.models.Subscriptions.findNotificationPreferencesByRoom(room._id).forEach(function (subscription) {         // 76
		if (subscription.desktopNotifications === 'all') {                                                                   // 77
			settings.alwaysNotifyDesktopUsers.push(subscription.u._id);                                                         // 78
		} else if (subscription.desktopNotifications === 'nothing') {                                                        // 79
			settings.dontNotifyDesktopUsers.push(subscription.u._id);                                                           // 80
		}                                                                                                                    // 81
		if (subscription.mobilePushNotifications === 'all') {                                                                // 82
			settings.alwaysNotifyMobileUsers.push(subscription.u._id);                                                          // 83
		} else if (subscription.mobilePushNotifications === 'nothing') {                                                     // 84
			settings.dontNotifyMobileUsers.push(subscription.u._id);                                                            // 85
		}                                                                                                                    // 86
		settings.desktopNotificationDurations[subscription.u._id] = subscription.desktopNotificationDuration;                // 87
	});                                                                                                                   // 88
                                                                                                                       //
	userIdsToNotify = [];                                                                                                 // 90
	userIdsToPushNotify = [];                                                                                             // 91
	usersWithHighlights = [];                                                                                             // 92
	highlights = RocketChat.models.Users.findUsersByUsernamesWithHighlights(room.usernames, { fields: { '_id': 1, 'settings.preferences.highlights': 1 } }).fetch();
                                                                                                                       //
	highlights.forEach(function (user) {                                                                                  // 95
		if (user && user.settings && user.settings.preferences && messageContainsHighlight(message, user.settings.preferences.highlights)) {
			usersWithHighlights.push(user);                                                                                     // 97
		}                                                                                                                    // 98
	});                                                                                                                   // 99
                                                                                                                       //
	var push_message = void 0;                                                                                            // 101
	//Set variables depending on Push Notification settings                                                               // 102
	if (RocketChat.settings.get('Push_show_message')) {                                                                   // 103
		push_message = message.msg;                                                                                          // 104
	} else {                                                                                                              // 105
		push_message = ' ';                                                                                                  // 106
	}                                                                                                                     // 107
                                                                                                                       //
	var push_username = void 0;                                                                                           // 109
	var push_room = void 0;                                                                                               // 110
	if (RocketChat.settings.get('Push_show_username_room')) {                                                             // 111
		push_username = '@' + user.username;                                                                                 // 112
		push_room = '#' + room.name + ' ';                                                                                   // 113
	} else {                                                                                                              // 114
		push_username = ' ';                                                                                                 // 115
		push_room = ' ';                                                                                                     // 116
	}                                                                                                                     // 117
                                                                                                                       //
	if (room.t == null || room.t === 'd') {                                                                               // 119
		userOfMentionId = message.rid.replace(message.u._id, '');                                                            // 120
		userOfMention = RocketChat.models.Users.findOne({                                                                    // 121
			_id: userOfMentionId                                                                                                // 122
		}, {                                                                                                                 // 121
			fields: {                                                                                                           // 124
				username: 1,                                                                                                       // 125
				statusConnection: 1                                                                                                // 126
			}                                                                                                                   // 124
		});                                                                                                                  // 123
                                                                                                                       //
		// Always notify Sandstorm                                                                                           // 130
		if (userOfMention != null) {                                                                                         // 131
			RocketChat.Sandstorm.notify(message, [userOfMention._id], '@' + user.username + ': ' + message.msg, 'privateMessage');
		}                                                                                                                    // 135
		if (userOfMention != null && canBeNotified(userOfMentionId, 'mobile')) {                                             // 136
			RocketChat.Notifications.notifyUser(userOfMention._id, 'notification', {                                            // 137
				title: '@' + user.username,                                                                                        // 138
				text: message.msg,                                                                                                 // 139
				duration: settings.desktopNotificationDurations[userOfMention._id],                                                // 140
				payload: {                                                                                                         // 141
					_id: message._id,                                                                                                 // 142
					rid: message.rid,                                                                                                 // 143
					sender: message.u,                                                                                                // 144
					type: room.t,                                                                                                     // 145
					name: room.name                                                                                                   // 146
				}                                                                                                                  // 141
			});                                                                                                                 // 137
		}                                                                                                                    // 149
		if (userOfMention != null && canBeNotified(userOfMentionId, 'desktop')) {                                            // 150
			if (Push.enabled === true && userOfMention.statusConnection !== 'online') {                                         // 151
				Push.send({                                                                                                        // 152
					from: 'push',                                                                                                     // 153
					title: push_username,                                                                                             // 154
					text: push_message,                                                                                               // 155
					apn: {                                                                                                            // 156
						// ternary operator                                                                                              // 157
						text: push_username + (push_username !== ' ' && push_message !== ' ' ? ':\n' : '') + push_message                // 158
					},                                                                                                                // 156
					badge: 1,                                                                                                         // 160
					sound: 'chime',                                                                                                   // 161
					payload: {                                                                                                        // 162
						host: Meteor.absoluteUrl(),                                                                                      // 163
						rid: message.rid,                                                                                                // 164
						sender: message.u,                                                                                               // 165
						type: room.t,                                                                                                    // 166
						name: room.name                                                                                                  // 167
					},                                                                                                                // 162
					query: {                                                                                                          // 169
						userId: userOfMention._id                                                                                        // 170
					}                                                                                                                 // 169
				});                                                                                                                // 152
				return message;                                                                                                    // 173
			}                                                                                                                   // 174
		}                                                                                                                    // 175
	} else {                                                                                                              // 176
		mentionIds = [];                                                                                                     // 177
		if ((ref = message.mentions) != null) {                                                                              // 178
			ref.forEach(function (mention) {                                                                                    // 179
				return mentionIds.push(mention._id);                                                                               // 180
			});                                                                                                                 // 181
		}                                                                                                                    // 182
		toAll = mentionIds.indexOf('all') > -1;                                                                              // 183
		toHere = mentionIds.indexOf('here') > -1;                                                                            // 184
		if (mentionIds.length > 0 || settings.alwaysNotifyDesktopUsers.length > 0) {                                         // 185
			desktopMentionIds = _.union(mentionIds, settings.alwaysNotifyDesktopUsers);                                         // 186
			desktopMentionIds = _.difference(desktopMentionIds, settings.dontNotifyDesktopUsers);                               // 187
                                                                                                                       //
			usersOfDesktopMentions = RocketChat.models.Users.find({                                                             // 189
				_id: {                                                                                                             // 190
					$in: desktopMentionIds                                                                                            // 191
				}                                                                                                                  // 190
			}, {                                                                                                                // 189
				fields: {                                                                                                          // 194
					_id: 1,                                                                                                           // 195
					username: 1,                                                                                                      // 196
					active: 1                                                                                                         // 197
				}                                                                                                                  // 194
			}).fetch();                                                                                                         // 193
			if (room.t === 'c' && !toAll) {                                                                                     // 200
				var callJoin = function callJoin(usersOfMentionItem) {                                                             // 201
					if (usersOfMentionItem.active) {                                                                                  // 202
						Meteor.runAsUser(usersOfMentionItem._id, function () {                                                           // 203
							return Meteor.call('joinRoom', room._id);                                                                       // 204
						});                                                                                                              // 205
					}                                                                                                                 // 206
				};                                                                                                                 // 207
				for (i = 0, len = usersOfDesktopMentions.length; i < len; i++) {                                                   // 208
					usersOfMentionItem = usersOfDesktopMentions[i];                                                                   // 209
					if (room.usernames.indexOf(usersOfMentionItem.username) === -1) {                                                 // 210
						callJoin(usersOfMentionItem);                                                                                    // 211
					}                                                                                                                 // 212
				}                                                                                                                  // 213
			}                                                                                                                   // 214
                                                                                                                       //
			if (room.t !== 'c') {                                                                                               // 216
				usersOfDesktopMentions = _.reject(usersOfDesktopMentions, function (usersOfMentionItem) {                          // 217
					return room.usernames.indexOf(usersOfMentionItem.username) === -1;                                                // 218
				});                                                                                                                // 219
			}                                                                                                                   // 220
                                                                                                                       //
			userIdsToNotify = _.pluck(usersOfDesktopMentions, '_id');                                                           // 222
		}                                                                                                                    // 223
                                                                                                                       //
		if (mentionIds.length > 0 || settings.alwaysNotifyMobileUsers.length > 0) {                                          // 225
			mobileMentionIds = _.union(mentionIds, settings.alwaysNotifyMobileUsers);                                           // 226
			mobileMentionIds = _.difference(mobileMentionIds, settings.dontNotifyMobileUsers);                                  // 227
                                                                                                                       //
			usersOfMobileMentions = RocketChat.models.Users.find({                                                              // 229
				_id: {                                                                                                             // 230
					$in: mobileMentionIds                                                                                             // 231
				}                                                                                                                  // 230
			}, {                                                                                                                // 229
				fields: {                                                                                                          // 234
					_id: 1,                                                                                                           // 235
					username: 1,                                                                                                      // 236
					statusConnection: 1                                                                                               // 237
				}                                                                                                                  // 234
			}).fetch();                                                                                                         // 233
                                                                                                                       //
			if (room.t !== 'c') {                                                                                               // 241
				usersOfMobileMentions = _.reject(usersOfMobileMentions, function (usersOfMentionItem) {                            // 242
					return room.usernames.indexOf(usersOfMentionItem.username) === -1;                                                // 243
				});                                                                                                                // 244
			}                                                                                                                   // 245
                                                                                                                       //
			userIdsToPushNotify = _.pluck(_.filter(usersOfMobileMentions, function (user) {                                     // 247
				return user.statusConnection !== 'online';                                                                         // 248
			}), '_id');                                                                                                         // 249
		}                                                                                                                    // 250
                                                                                                                       //
		if ((toAll || toHere) && ((ref1 = room.usernames) != null ? ref1.length : void 0) > 0) {                             // 252
			RocketChat.models.Users.find({                                                                                      // 253
				username: {                                                                                                        // 254
					$in: room.usernames                                                                                               // 255
				},                                                                                                                 // 254
				_id: {                                                                                                             // 257
					$ne: user._id                                                                                                     // 258
				}                                                                                                                  // 257
			}, {                                                                                                                // 253
				fields: {                                                                                                          // 261
					_id: 1,                                                                                                           // 262
					username: 1,                                                                                                      // 263
					status: 1,                                                                                                        // 264
					statusConnection: 1                                                                                               // 265
				}                                                                                                                  // 261
			}).forEach(function (user) {                                                                                        // 260
				var ref2, ref3, ref4;                                                                                              // 268
				if (((ref2 = user.status) === 'online' || ref2 === 'away' || ref2 === 'busy') && (ref3 = user._id, indexOf.call(settings.dontNotifyDesktopUsers, ref3) < 0)) {
					userIdsToNotify.push(user._id);                                                                                   // 270
				}                                                                                                                  // 271
				if (toAll && user.statusConnection !== 'online' && (ref4 = user._id, indexOf.call(settings.dontNotifyMobileUsers, ref4) < 0)) {
					return userIdsToPushNotify.push(user._id);                                                                        // 273
				}                                                                                                                  // 274
			});                                                                                                                 // 275
		}                                                                                                                    // 276
                                                                                                                       //
		if (usersWithHighlights.length > 0) {                                                                                // 278
			highlightsIds = _.pluck(usersWithHighlights, '_id');                                                                // 279
			userIdsToNotify = userIdsToNotify.concat(highlightsIds);                                                            // 280
			userIdsToPushNotify = userIdsToPushNotify.concat(highlightsIds);                                                    // 281
		}                                                                                                                    // 282
                                                                                                                       //
		userIdsToNotify = _.without(_.compact(_.unique(userIdsToNotify)), message.u._id);                                    // 284
		userIdsToPushNotify = _.without(_.compact(_.unique(userIdsToPushNotify)), message.u._id);                            // 285
                                                                                                                       //
		if (userIdsToNotify.length > 0) {                                                                                    // 287
			for (j = 0, len1 = userIdsToNotify.length; j < len1; j++) {                                                         // 288
				usersOfMentionId = userIdsToNotify[j];                                                                             // 289
				var title = '@' + user.username;                                                                                   // 290
				if (room.name) {                                                                                                   // 291
					title += ' @ #' + room.name;                                                                                      // 292
				}                                                                                                                  // 293
				RocketChat.Notifications.notifyUser(usersOfMentionId, 'notification', {                                            // 294
					title: title,                                                                                                     // 295
					text: message.msg,                                                                                                // 296
					duration: settings.desktopNotificationDurations[usersOfMentionId],                                                // 297
					payload: {                                                                                                        // 298
						_id: message._id,                                                                                                // 299
						rid: message.rid,                                                                                                // 300
						sender: message.u,                                                                                               // 301
						type: room.t,                                                                                                    // 302
						name: room.name                                                                                                  // 303
					}                                                                                                                 // 298
				});                                                                                                                // 294
			}                                                                                                                   // 306
		}                                                                                                                    // 307
                                                                                                                       //
		if (userIdsToPushNotify.length > 0) {                                                                                // 309
			if (Push.enabled === true) {                                                                                        // 310
				Push.send({                                                                                                        // 311
					from: 'push',                                                                                                     // 312
					title: push_room + push_username,                                                                                 // 313
					text: push_message,                                                                                               // 314
					apn: {                                                                                                            // 315
						// ternary operator                                                                                              // 316
						text: push_room + push_username + (push_username !== ' ' && push_room !== ' ' && push_message !== ' ' ? ':\n' : '') + push_message
					},                                                                                                                // 315
					badge: 1,                                                                                                         // 319
					sound: 'chime',                                                                                                   // 320
					payload: {                                                                                                        // 321
						host: Meteor.absoluteUrl(),                                                                                      // 322
						rid: message.rid,                                                                                                // 323
						sender: message.u,                                                                                               // 324
						type: room.t,                                                                                                    // 325
						name: room.name                                                                                                  // 326
					},                                                                                                                // 321
					query: {                                                                                                          // 328
						userId: {                                                                                                        // 329
							$in: userIdsToPushNotify                                                                                        // 330
						}                                                                                                                // 329
					}                                                                                                                 // 328
				});                                                                                                                // 311
			}                                                                                                                   // 334
		}                                                                                                                    // 335
                                                                                                                       //
		var allUserIdsToNotify = _.unique(userIdsToNotify.concat(userIdsToPushNotify));                                      // 337
		if (room.t === 'p') {                                                                                                // 338
			RocketChat.Sandstorm.notify(message, allUserIdsToNotify, '@' + user.username + ': ' + message.msg, 'privateMessage');
		} else {                                                                                                             // 341
			RocketChat.Sandstorm.notify(message, allUserIdsToNotify, '@' + user.username + ': ' + message.msg, 'message');      // 342
		}                                                                                                                    // 344
	}                                                                                                                     // 345
                                                                                                                       //
	return message;                                                                                                       // 347
}, RocketChat.callbacks.priority.LOW, 'sendNotificationOnMessage');                                                    // 349
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateEmailDomain.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/validateEmailDomain.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var dns = Npm.require('dns');                                                                                          // 1
                                                                                                                       //
var emailDomainBlackList = [];                                                                                         // 3
var emailDomainWhiteList = [];                                                                                         // 4
var useDefaultBlackList = false;                                                                                       // 5
var useDNSDomainCheck = false;                                                                                         // 6
                                                                                                                       //
RocketChat.settings.get('Accounts_BlockedDomainsList', function (key, value) {                                         // 8
	emailDomainBlackList = _.map(value.split(','), function (domain) {                                                    // 9
		return domain.trim();                                                                                                // 9
	});                                                                                                                   // 9
});                                                                                                                    // 10
RocketChat.settings.get('Accounts_AllowedDomainsList', function (key, value) {                                         // 11
	emailDomainWhiteList = _.map(value.split(','), function (domain) {                                                    // 12
		return domain.trim();                                                                                                // 12
	});                                                                                                                   // 12
});                                                                                                                    // 13
RocketChat.settings.get('Accounts_UseDefaultBlockedDomainsList', function (key, value) {                               // 14
	useDefaultBlackList = value;                                                                                          // 15
});                                                                                                                    // 16
RocketChat.settings.get('Accounts_UseDNSDomainCheck', function (key, value) {                                          // 17
	useDNSDomainCheck = value;                                                                                            // 18
});                                                                                                                    // 19
                                                                                                                       //
RocketChat.validateEmailDomain = function (email) {                                                                    // 21
	var emailValidation = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
	if (!emailValidation.test(email)) {                                                                                   // 23
		throw new Meteor.Error('error-invalid-email', 'Invalid email ' + email, { 'function': 'RocketChat.validateEmailDomain', email: email });
	}                                                                                                                     // 25
                                                                                                                       //
	var emailDomain = email.substr(email.lastIndexOf('@') + 1);                                                           // 27
                                                                                                                       //
	// if not in whitelist                                                                                                // 29
	if (emailDomainWhiteList.indexOf(emailDomain) === -1) {                                                               // 30
		if (emailDomainBlackList.indexOf(emailDomain) !== -1 || useDefaultBlackList && RocketChat.emailDomainDefaultBlackList.indexOf(emailDomain) !== -1) {
			throw new Meteor.Error('error-email-domain-blacklisted', 'The email domain is blacklisted', { 'function': 'RocketChat.validateEmailDomain' });
		}                                                                                                                    // 33
	}                                                                                                                     // 34
                                                                                                                       //
	if (useDNSDomainCheck) {                                                                                              // 36
		try {                                                                                                                // 37
			Meteor.wrapAsync(dns.resolveMx)(emailDomain);                                                                       // 38
		} catch (e) {                                                                                                        // 39
			throw new Meteor.Error('error-invalid-domain', 'Invalid domain', { 'function': 'RocketChat.validateEmailDomain' });
		}                                                                                                                    // 41
	}                                                                                                                     // 42
};                                                                                                                     // 43
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"functions":{"addUserToDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToDefaultChannels.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToDefaultChannels = function (user, silenced) {                                                      // 1
	RocketChat.callbacks.run('beforeJoinDefaultChannels', user);                                                          // 2
	var defaultRooms = RocketChat.models.Rooms.findByDefaultAndTypes(true, ['c', 'p'], { fields: { usernames: 0 } }).fetch();
	defaultRooms.forEach(function (room) {                                                                                // 4
                                                                                                                       //
		// put user in default rooms                                                                                         // 6
		var muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');                                   // 7
		RocketChat.models.Rooms.addUsernameById(room._id, user.username, muted);                                             // 8
                                                                                                                       //
		if (!RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, user._id)) {                                 // 10
                                                                                                                       //
			// Add a subscription to this user                                                                                  // 12
			RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {                                                 // 13
				ts: new Date(),                                                                                                    // 14
				open: true,                                                                                                        // 15
				alert: true,                                                                                                       // 16
				unread: 1                                                                                                          // 17
			});                                                                                                                 // 13
                                                                                                                       //
			// Insert user joined message                                                                                       // 20
			if (!silenced) {                                                                                                    // 21
				RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, user);                                        // 22
			}                                                                                                                   // 23
		}                                                                                                                    // 24
	});                                                                                                                   // 25
};                                                                                                                     // 26
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToRoom = function (rid, user, inviter, silenced) {                                                   // 1
	var now = new Date();                                                                                                 // 2
	var room = RocketChat.models.Rooms.findOneById(rid);                                                                  // 3
                                                                                                                       //
	// Check if user is already in room                                                                                   // 5
	var subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, user._id);                           // 6
	if (subscription) {                                                                                                   // 7
		return;                                                                                                              // 8
	}                                                                                                                     // 9
                                                                                                                       //
	if (room.t === 'c') {                                                                                                 // 11
		RocketChat.callbacks.run('beforeJoinRoom', user, room);                                                              // 12
	}                                                                                                                     // 13
                                                                                                                       //
	var muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');                                    // 15
	RocketChat.models.Rooms.addUsernameById(rid, user.username, muted);                                                   // 16
	RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {                                                   // 17
		ts: now,                                                                                                             // 18
		open: true,                                                                                                          // 19
		alert: true,                                                                                                         // 20
		unread: 1                                                                                                            // 21
	});                                                                                                                   // 17
                                                                                                                       //
	if (!silenced) {                                                                                                      // 24
		if (inviter) {                                                                                                       // 25
			RocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rid, user, {                                            // 26
				ts: now,                                                                                                           // 27
				u: {                                                                                                               // 28
					_id: inviter._id,                                                                                                 // 29
					username: inviter.username                                                                                        // 30
				}                                                                                                                  // 28
			});                                                                                                                 // 26
		} else {                                                                                                             // 33
			RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rid, user, { ts: now });                                 // 34
		}                                                                                                                    // 35
	}                                                                                                                     // 36
                                                                                                                       //
	if (room.t === 'c') {                                                                                                 // 38
		Meteor.defer(function () {                                                                                           // 39
			RocketChat.callbacks.run('afterJoinRoom', user, room);                                                              // 40
		});                                                                                                                  // 41
	}                                                                                                                     // 42
                                                                                                                       //
	return true;                                                                                                          // 44
};                                                                                                                     // 45
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/archiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.archiveRoom = function (rid) {                                                                              // 1
	RocketChat.models.Rooms.archiveById(rid);                                                                             // 2
	RocketChat.models.Subscriptions.archiveByRoomId(rid);                                                                 // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkUsernameAvailability.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkUsernameAvailability.coffee.js                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.checkUsernameAvailability = function(username) {                                                            // 1
  var usernameBlackList;                                                                                               // 2
  usernameBlackList = [];                                                                                              //
  return RocketChat.settings.get('Accounts_BlockedUsernameList', (function(_this) {                                    //
    return function(key, value) {                                                                                      //
      var i, len, regex, restrictedUsername;                                                                           // 4
      usernameBlackList = _.map(value.split(','), function(username) {                                                 //
        return username.trim();                                                                                        //
      });                                                                                                              //
      if (usernameBlackList.length !== 0) {                                                                            //
        for (i = 0, len = usernameBlackList.length; i < len; i++) {                                                    // 6
          restrictedUsername = usernameBlackList[i];                                                                   //
          regex = new RegExp('^' + s.escapeRegExp(restrictedUsername) + '$', 'i');                                     //
          if (regex.test(s.trim(s.escapeRegExp(username)))) {                                                          //
            return false;                                                                                              // 8
          }                                                                                                            //
        }                                                                                                              // 6
      }                                                                                                                //
      return !Meteor.users.findOne({                                                                                   // 9
        username: {                                                                                                    //
          $regex: new RegExp("^" + s.trim(s.escapeRegExp(username)) + "$", "i")                                        //
        }                                                                                                              //
      });                                                                                                              //
    };                                                                                                                 //
  })(this));                                                                                                           //
};                                                                                                                     // 1
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkEmailAvailability.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkEmailAvailability.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.checkEmailAvailability = function (email) {                                                                 // 1
	return !Meteor.users.findOne({ 'emails.address': { $regex: new RegExp('^' + s.trim(s.escapeRegExp(email)) + '$', 'i') } });
};                                                                                                                     // 3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/createRoom.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals RocketChat */                                                                                               // 1
RocketChat.createRoom = function (type, name, owner, members, readOnly) {                                              // 2
	name = s.trim(name);                                                                                                  // 3
	owner = s.trim(owner);                                                                                                // 4
	members = [].concat(members);                                                                                         // 5
                                                                                                                       //
	if (!name) {                                                                                                          // 7
		throw new Meteor.Error('error-invalid-name', 'Invalid name', { 'function': 'RocketChat.createRoom' });               // 8
	}                                                                                                                     // 9
                                                                                                                       //
	owner = RocketChat.models.Users.findOneByUsername(owner, { fields: { username: 1 } });                                // 11
	if (!owner) {                                                                                                         // 12
		throw new Meteor.Error('error-invalid-user', 'Invalid user', { 'function': 'RocketChat.createRoom' });               // 13
	}                                                                                                                     // 14
                                                                                                                       //
	var nameValidation = void 0;                                                                                          // 16
	try {                                                                                                                 // 17
		nameValidation = new RegExp('^' + RocketChat.settings.get('UTF8_Names_Validation') + '$');                           // 18
	} catch (error) {                                                                                                     // 19
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                    // 20
	}                                                                                                                     // 21
                                                                                                                       //
	if (!nameValidation.test(name)) {                                                                                     // 23
		throw new Meteor.Error('error-invalid-name', 'Invalid name', { 'function': 'RocketChat.createRoom' });               // 24
	}                                                                                                                     // 25
                                                                                                                       //
	var now = new Date();                                                                                                 // 27
	if (!_.contains(members, owner.username)) {                                                                           // 28
		members.push(owner.username);                                                                                        // 29
	}                                                                                                                     // 30
                                                                                                                       //
	// avoid duplicate names                                                                                              // 32
	var room = RocketChat.models.Rooms.findOneByName(name);                                                               // 33
	if (room) {                                                                                                           // 34
		if (room.archived) {                                                                                                 // 35
			throw new Meteor.Error('error-archived-duplicate-name', 'There\'s an archived channel with name ' + name, { 'function': 'RocketChat.createRoom', room_name: name });
		} else {                                                                                                             // 37
			throw new Meteor.Error('error-duplicate-channel-name', 'A channel with name \'' + name + '\' exists', { 'function': 'RocketChat.createRoom', room_name: name });
		}                                                                                                                    // 39
	}                                                                                                                     // 40
                                                                                                                       //
	if (type === 'c') {                                                                                                   // 42
		RocketChat.callbacks.run('beforeCreateChannel', owner, {                                                             // 43
			t: 'c',                                                                                                             // 44
			name: name,                                                                                                         // 45
			ts: now,                                                                                                            // 46
			ro: readOnly === true,                                                                                              // 47
			sysMes: readOnly !== true,                                                                                          // 48
			usernames: members,                                                                                                 // 49
			u: {                                                                                                                // 50
				_id: owner._id,                                                                                                    // 51
				username: owner.username                                                                                           // 52
			}                                                                                                                   // 50
		});                                                                                                                  // 43
	}                                                                                                                     // 55
                                                                                                                       //
	room = RocketChat.models.Rooms.createWithTypeNameUserAndUsernames(type, name, owner.username, members, {              // 57
		ts: now,                                                                                                             // 58
		ro: readOnly === true,                                                                                               // 59
		sysMes: readOnly !== true                                                                                            // 60
	});                                                                                                                   // 57
                                                                                                                       //
	for (var _iterator = members, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		var _ref;                                                                                                            // 63
                                                                                                                       //
		if (_isArray) {                                                                                                      // 63
			if (_i >= _iterator.length) break;                                                                                  // 63
			_ref = _iterator[_i++];                                                                                             // 63
		} else {                                                                                                             // 63
			_i = _iterator.next();                                                                                              // 63
			if (_i.done) break;                                                                                                 // 63
			_ref = _i.value;                                                                                                    // 63
		}                                                                                                                    // 63
                                                                                                                       //
		var username = _ref;                                                                                                 // 63
                                                                                                                       //
		var member = RocketChat.models.Users.findOneByUsername(username, { fields: { username: 1 } });                       // 64
		if (!member) {                                                                                                       // 65
			continue;                                                                                                           // 66
		}                                                                                                                    // 67
                                                                                                                       //
		// make all room members muted by default, unless they have the post-readonly permission                             // 69
		if (readOnly === true && !RocketChat.authz.hasPermission(member._id, 'post-readonly')) {                             // 70
			RocketChat.models.Rooms.muteUsernameByRoomId(room._id, username);                                                   // 71
		}                                                                                                                    // 72
                                                                                                                       //
		var extra = { open: true };                                                                                          // 74
                                                                                                                       //
		if (username === owner.username) {                                                                                   // 76
			extra.ls = now;                                                                                                     // 77
		}                                                                                                                    // 78
                                                                                                                       //
		RocketChat.models.Subscriptions.createWithRoomAndUser(room, member, extra);                                          // 80
	}                                                                                                                     // 81
                                                                                                                       //
	RocketChat.authz.addUserRoles(owner._id, ['owner'], room._id);                                                        // 83
                                                                                                                       //
	if (type === 'c') {                                                                                                   // 85
		Meteor.defer(function () {                                                                                           // 86
			RocketChat.callbacks.run('afterCreateChannel', owner, room);                                                        // 87
		});                                                                                                                  // 88
	}                                                                                                                     // 89
                                                                                                                       //
	return {                                                                                                              // 91
		rid: room._id                                                                                                        // 92
	};                                                                                                                    // 91
};                                                                                                                     // 94
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals FileUpload */                                                                                               // 1
RocketChat.deleteMessage = function (message, user) {                                                                  // 2
	var keepHistory = RocketChat.settings.get('Message_KeepHistory');                                                     // 3
	var showDeletedStatus = RocketChat.settings.get('Message_ShowDeletedStatus');                                         // 4
                                                                                                                       //
	if (keepHistory) {                                                                                                    // 6
		if (showDeletedStatus) {                                                                                             // 7
			RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);                                                  // 8
		} else {                                                                                                             // 9
			RocketChat.models.Messages.setHiddenById(message._id, true);                                                        // 10
		}                                                                                                                    // 11
                                                                                                                       //
		if (message.file && message.file._id) {                                                                              // 13
			RocketChat.models.Uploads.update(message.file._id, { $set: { _hidden: true } });                                    // 14
		}                                                                                                                    // 15
	} else {                                                                                                              // 16
		if (!showDeletedStatus) {                                                                                            // 17
			RocketChat.models.Messages.removeById(message._id);                                                                 // 18
		}                                                                                                                    // 19
                                                                                                                       //
		if (message.file && message.file._id) {                                                                              // 21
			FileUpload['delete'](message.file._id);                                                                             // 22
		}                                                                                                                    // 23
	}                                                                                                                     // 24
                                                                                                                       //
	if (showDeletedStatus) {                                                                                              // 26
		RocketChat.models.Messages.setAsDeletedByIdAndUser(message._id, user);                                               // 27
	} else {                                                                                                              // 28
		RocketChat.Notifications.notifyRoom(message.rid, 'deleteMessage', { _id: message._id });                             // 29
	}                                                                                                                     // 30
};                                                                                                                     // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteUser.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals RocketChat */                                                                                               // 1
RocketChat.deleteUser = function (userId) {                                                                            // 2
	var user = RocketChat.models.Users.findOneById(userId);                                                               // 3
                                                                                                                       //
	RocketChat.models.Messages.removeByUserId(userId); // Remove user messages                                            // 5
	RocketChat.models.Subscriptions.findByUserId(userId).forEach(function (subscription) {                                // 6
		var room = RocketChat.models.Rooms.findOneById(subscription.rid);                                                    // 7
		if (room) {                                                                                                          // 8
			if (room.t !== 'c' && room.usernames.length === 1) {                                                                // 9
				RocketChat.models.Rooms.removeById(subscription.rid); // Remove non-channel rooms with only 1 user (the one being deleted)
			}                                                                                                                   // 11
			if (room.t === 'd') {                                                                                               // 12
				RocketChat.models.Subscriptions.removeByRoomId(subscription.rid);                                                  // 13
				RocketChat.models.Messages.removeByRoomId(subscription.rid);                                                       // 14
			}                                                                                                                   // 15
		}                                                                                                                    // 16
	});                                                                                                                   // 17
                                                                                                                       //
	RocketChat.models.Subscriptions.removeByUserId(userId); // Remove user subscriptions                                  // 19
	RocketChat.models.Rooms.removeByTypeContainingUsername('d', user.username); // Remove direct rooms with the user      // 20
	RocketChat.models.Rooms.removeUsernameFromAll(user.username); // Remove user from all other rooms                     // 21
                                                                                                                       //
	// removes user's avatar                                                                                              // 23
	if (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {                                                  // 24
		RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(user.username + '.jpg'));                                 // 25
	}                                                                                                                     // 26
                                                                                                                       //
	RocketChat.models.Users.removeById(userId); // Remove user from users database                                        // 28
};                                                                                                                     // 29
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUserFromRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/removeUserFromRoom.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.removeUserFromRoom = function (rid, user) {                                                                 // 1
	var room = RocketChat.models.Rooms.findOneById(rid);                                                                  // 2
                                                                                                                       //
	if (room) {                                                                                                           // 4
		RocketChat.callbacks.run('beforeLeaveRoom', user, room);                                                             // 5
		RocketChat.models.Rooms.removeUsernameById(rid, user.username);                                                      // 6
                                                                                                                       //
		if (room.usernames.indexOf(user.username) !== -1) {                                                                  // 8
			var removedUser = user;                                                                                             // 9
			RocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rid, removedUser);                                      // 10
		}                                                                                                                    // 11
                                                                                                                       //
		if (room.t === 'l') {                                                                                                // 13
			RocketChat.models.Messages.createCommandWithRoomIdAndUser('survey', rid, user);                                     // 14
		}                                                                                                                    // 15
                                                                                                                       //
		RocketChat.models.Subscriptions.removeByRoomIdAndUserId(rid, user._id);                                              // 17
                                                                                                                       //
		Meteor.defer(function () {                                                                                           // 19
			RocketChat.callbacks.run('afterLeaveRoom', user, room);                                                             // 20
		});                                                                                                                  // 21
	}                                                                                                                     // 22
};                                                                                                                     // 23
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveUser.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.saveUser = function (userId, userData) {                                                                    // 1
	var user = RocketChat.models.Users.findOneById(userId);                                                               // 2
                                                                                                                       //
	if (userData._id && userId !== userData._id && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {     // 4
		throw new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed', { method: 'insertOrUpdateUser', action: 'Editing_user' });
	}                                                                                                                     // 6
                                                                                                                       //
	if (!userData._id && !RocketChat.authz.hasPermission(userId, 'create-user')) {                                        // 8
		throw new Meteor.Error('error-action-not-allowed', 'Adding user is not allowed', { method: 'insertOrUpdateUser', action: 'Adding_user' });
	}                                                                                                                     // 10
                                                                                                                       //
	if (userData.role === 'admin' && !RocketChat.authz.hasPermission(userId, 'assign-admin-role')) {                      // 12
		throw new Meteor.Error('error-action-not-allowed', 'Assigning admin is not allowed', { method: 'insertOrUpdateUser', action: 'Assign_admin' });
	}                                                                                                                     // 14
                                                                                                                       //
	if (!userData._id && !s.trim(userData.name)) {                                                                        // 16
		throw new Meteor.Error('error-the-field-is-required', 'The field Name is required', { method: 'insertOrUpdateUser', field: 'Name' });
	}                                                                                                                     // 18
                                                                                                                       //
	if (!userData._id && !s.trim(userData.username)) {                                                                    // 20
		throw new Meteor.Error('error-the-field-is-required', 'The field Username is required', { method: 'insertOrUpdateUser', field: 'Username' });
	}                                                                                                                     // 22
                                                                                                                       //
	var nameValidation = void 0;                                                                                          // 24
                                                                                                                       //
	try {                                                                                                                 // 26
		nameValidation = new RegExp('^' + RocketChat.settings.get('UTF8_Names_Validation') + '$');                           // 27
	} catch (e) {                                                                                                         // 28
		nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                    // 29
	}                                                                                                                     // 30
                                                                                                                       //
	if (userData.username && !nameValidation.test(userData.username)) {                                                   // 32
		throw new Meteor.Error('error-input-is-not-a-valid-field', _.escape(userData.username) + ' is not a valid username', { method: 'insertOrUpdateUser', input: userData.username, field: 'Username' });
	}                                                                                                                     // 34
                                                                                                                       //
	if (!userData._id && !userData.password) {                                                                            // 36
		throw new Meteor.Error('error-the-field-is-required', 'The field Password is required', { method: 'insertOrUpdateUser', field: 'Password' });
	}                                                                                                                     // 38
                                                                                                                       //
	if (!userData._id) {                                                                                                  // 40
		if (!RocketChat.checkUsernameAvailability(userData.username)) {                                                      // 41
			throw new Meteor.Error('error-field-unavailable', _.escape(userData.username) + ' is already in use :(', { method: 'insertOrUpdateUser', field: userData.username });
		}                                                                                                                    // 43
                                                                                                                       //
		if (userData.email && !RocketChat.checkEmailAvailability(userData.email)) {                                          // 45
			throw new Meteor.Error('error-field-unavailable', _.escape(userData.email) + ' is already in use :(', { method: 'insertOrUpdateUser', field: userData.email });
		}                                                                                                                    // 47
                                                                                                                       //
		RocketChat.validateEmailDomain(userData.email);                                                                      // 49
                                                                                                                       //
		// insert user                                                                                                       // 51
		var createUser = {                                                                                                   // 52
			username: userData.username,                                                                                        // 53
			password: userData.password                                                                                         // 54
		};                                                                                                                   // 52
		if (userData.email) {                                                                                                // 56
			createUser.email = userData.email;                                                                                  // 57
		}                                                                                                                    // 58
                                                                                                                       //
		var _id = Accounts.createUser(createUser);                                                                           // 60
                                                                                                                       //
		var updateUser = {                                                                                                   // 62
			$set: {                                                                                                             // 63
				name: userData.name,                                                                                               // 64
				roles: [userData.role || 'user']                                                                                   // 65
			}                                                                                                                   // 63
		};                                                                                                                   // 62
                                                                                                                       //
		if (userData.requirePasswordChange) {                                                                                // 69
			updateUser.$set.requirePasswordChange = userData.requirePasswordChange;                                             // 70
		}                                                                                                                    // 71
                                                                                                                       //
		if (userData.verified) {                                                                                             // 73
			updateUser.$set['emails.0.verified'] = true;                                                                        // 74
		}                                                                                                                    // 75
                                                                                                                       //
		Meteor.users.update({ _id: _id }, updateUser);                                                                       // 77
                                                                                                                       //
		if (userData.joinDefaultChannels) {                                                                                  // 79
			Meteor.runAsUser(_id, function () {                                                                                 // 80
				Meteor.call('joinDefaultChannels');                                                                                // 81
			});                                                                                                                 // 82
		}                                                                                                                    // 83
                                                                                                                       //
		if (userData.sendWelcomeEmail) {                                                                                     // 85
			(function () {                                                                                                      // 85
				var header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                       // 86
				var footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                       // 87
                                                                                                                       //
				var subject = void 0,                                                                                              // 89
				    html = void 0,                                                                                                 // 89
				    email = void 0;                                                                                                // 89
                                                                                                                       //
				if (RocketChat.settings.get('Accounts_UserAddedEmail_Customized')) {                                               // 91
					subject = RocketChat.settings.get('Accounts_UserAddedEmailSubject');                                              // 92
					html = RocketChat.settings.get('Accounts_UserAddedEmail');                                                        // 93
				} else {                                                                                                           // 94
					subject = TAPi18n.__('Accounts_UserAddedEmailSubject_Default', { lng: user.language || RocketChat.settings.get('language') || 'en' });
					html = TAPi18n.__('Accounts_UserAddedEmail_Default', { lng: user.language || RocketChat.settings.get('language') || 'en' });
				}                                                                                                                  // 97
                                                                                                                       //
				subject = RocketChat.placeholders.replace(subject);                                                                // 99
				html = RocketChat.placeholders.replace(html, {                                                                     // 100
					name: userData.name,                                                                                              // 101
					email: userData.email,                                                                                            // 102
					password: userData.password                                                                                       // 103
				});                                                                                                                // 100
                                                                                                                       //
				email = {                                                                                                          // 106
					to: userData.email,                                                                                               // 107
					from: RocketChat.settings.get('From_Email'),                                                                      // 108
					subject: subject,                                                                                                 // 109
					html: header + html + footer                                                                                      // 110
				};                                                                                                                 // 106
                                                                                                                       //
				Meteor.defer(function () {                                                                                         // 113
					try {                                                                                                             // 114
						Email.send(email);                                                                                               // 115
					} catch (error) {                                                                                                 // 116
						throw new Meteor.Error('error-email-send-failed', 'Error trying to send email: ' + error.message, { 'function': 'RocketChat.saveUser', message: error.message });
					}                                                                                                                 // 118
				});                                                                                                                // 119
			})();                                                                                                               // 85
		}                                                                                                                    // 120
                                                                                                                       //
		return _id;                                                                                                          // 122
	} else {                                                                                                              // 123
		// update user                                                                                                       // 124
		var _updateUser = {                                                                                                  // 125
			$set: {}                                                                                                            // 126
		};                                                                                                                   // 125
                                                                                                                       //
		if (userData.name) {                                                                                                 // 129
			_updateUser.$set.name = userData.name;                                                                              // 130
		}                                                                                                                    // 131
                                                                                                                       //
		if (userData.requirePasswordChange) {                                                                                // 133
			_updateUser.$set.requirePasswordChange = userData.requirePasswordChange;                                            // 134
		}                                                                                                                    // 135
                                                                                                                       //
		if (userData.verified) {                                                                                             // 137
			_updateUser.$set['emails.0.verified'] = true;                                                                       // 138
		} else {                                                                                                             // 139
			_updateUser.$set['emails.0.verified'] = false;                                                                      // 140
		}                                                                                                                    // 141
                                                                                                                       //
		Meteor.users.update({ _id: userData._id }, _updateUser);                                                             // 143
                                                                                                                       //
		if (userData.username) {                                                                                             // 145
			RocketChat.setUsername(userData._id, userData.username);                                                            // 146
		}                                                                                                                    // 147
                                                                                                                       //
		if (userData.email) {                                                                                                // 149
			RocketChat.setEmail(userData._id, userData.email);                                                                  // 150
		}                                                                                                                    // 151
                                                                                                                       //
		if (userData.password && userData.password.trim() && RocketChat.authz.hasPermission(userId, 'edit-other-user-password')) {
			Accounts.setPassword(userData._id, userData.password.trim());                                                       // 154
		}                                                                                                                    // 155
                                                                                                                       //
		return true;                                                                                                         // 157
	}                                                                                                                     // 158
};                                                                                                                     // 159
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveCustomFields.js":["babel-runtime/helpers/typeof",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveCustomFields.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _typeof;module.import('babel-runtime/helpers/typeof',{"default":function(v){_typeof=v}});                          //
RocketChat.saveCustomFields = function (userId, formData) {                                                            // 1
	if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) !== '') {                                                // 2
		var _ret = function () {                                                                                             // 2
			var customFieldsMeta = void 0;                                                                                      // 3
			try {                                                                                                               // 4
				customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));                                   // 5
			} catch (e) {                                                                                                       // 6
				throw new Meteor.Error('error-invalid-customfield-json', 'Invalid JSON for Custom Fields');                        // 7
			}                                                                                                                   // 8
                                                                                                                       //
			var customFields = {};                                                                                              // 10
                                                                                                                       //
			Object.keys(customFieldsMeta).forEach(function (fieldName) {                                                        // 12
				var field = customFieldsMeta[fieldName];                                                                           // 13
                                                                                                                       //
				customFields[fieldName] = formData[fieldName];                                                                     // 15
				if (field.required && !formData[fieldName]) {                                                                      // 16
					throw new Meteor.Error('error-user-registration-custom-field', 'Field ' + fieldName + ' is required', { method: 'registerUser' });
				}                                                                                                                  // 18
                                                                                                                       //
				if (field.type === 'select' && field.options.indexOf(formData[fieldName]) === -1) {                                // 20
					throw new Meteor.Error('error-user-registration-custom-field', 'Value for field ' + fieldName + ' is invalid', { method: 'registerUser' });
				}                                                                                                                  // 22
                                                                                                                       //
				if (field.maxLength && formData[fieldName].length > field.maxLength) {                                             // 24
					throw new Meteor.Error('error-user-registration-custom-field', 'Max length of field ' + fieldName + ' ' + field.maxLength, { method: 'registerUser' });
				}                                                                                                                  // 26
                                                                                                                       //
				if (field.minLength && formData[fieldName].length < field.minLength) {                                             // 28
					throw new Meteor.Error('error-user-registration-custom-field', 'Min length of field ' + fieldName + ' ' + field.minLength, { method: 'registerUser' });
				}                                                                                                                  // 30
			});                                                                                                                 // 31
                                                                                                                       //
			// for fieldName, field of customFieldsMeta                                                                         // 33
			RocketChat.models.Users.setCustomFields(userId, customFields);                                                      // 34
                                                                                                                       //
			Object.keys(customFields).forEach(function (fieldName) {                                                            // 36
				if (!customFieldsMeta[fieldName].modifyRecordField) {                                                              // 37
					return;                                                                                                           // 38
				}                                                                                                                  // 39
                                                                                                                       //
				var modifyRecordField = customFieldsMeta[fieldName].modifyRecordField;                                             // 41
				var update = {};                                                                                                   // 42
				if (modifyRecordField.array) {                                                                                     // 43
					update.$addToSet = {};                                                                                            // 44
					update.$addToSet[modifyRecordField.field] = customFields[fieldName];                                              // 45
				} else {                                                                                                           // 46
					update.$set = {};                                                                                                 // 47
					update.$set[modifyRecordField.field] = customFields[fieldName];                                                   // 48
				}                                                                                                                  // 49
                                                                                                                       //
				RocketChat.models.Users.update(userId, update);                                                                    // 51
			});                                                                                                                 // 52
                                                                                                                       //
			return {                                                                                                            // 54
				v: true                                                                                                            // 54
			};                                                                                                                  // 54
		}();                                                                                                                 // 2
                                                                                                                       //
		if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;                         // 2
	}                                                                                                                     // 55
};                                                                                                                     // 56
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"sendMessage.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/sendMessage.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.sendMessage = function(user, message, room, upsert) {                                                       // 1
  var _id, sandstormSessionId, urls;                                                                                   // 2
  if (upsert == null) {                                                                                                //
    upsert = false;                                                                                                    //
  }                                                                                                                    //
  if (!user || !message || !room._id) {                                                                                //
    return false;                                                                                                      // 3
  }                                                                                                                    //
  if (message.ts == null) {                                                                                            //
    message.ts = new Date();                                                                                           //
  }                                                                                                                    //
  message.u = _.pick(user, ['_id', 'username']);                                                                       //
  if (!Match.test(message.msg, String)) {                                                                              //
    message.msg = '';                                                                                                  //
  }                                                                                                                    //
  message.rid = room._id;                                                                                              //
  if ((room.usernames == null) || room.usernames.length === 0) {                                                       //
    room = RocketChat.models.Rooms.findOneById(room._id);                                                              //
  }                                                                                                                    //
  if (message.parseUrls !== false) {                                                                                   //
    if (urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g)) {
      message.urls = urls.map(function(url) {                                                                          //
        return {                                                                                                       //
          url: url                                                                                                     //
        };                                                                                                             //
      });                                                                                                              //
    }                                                                                                                  //
  }                                                                                                                    //
  message = RocketChat.callbacks.run('beforeSaveMessage', message);                                                    //
  sandstormSessionId = null;                                                                                           //
  if (message.sandstormSessionId) {                                                                                    //
    sandstormSessionId = message.sandstormSessionId;                                                                   //
    delete message.sandstormSessionId;                                                                                 //
  }                                                                                                                    //
  if ((message._id != null) && upsert) {                                                                               //
    _id = message._id;                                                                                                 //
    delete message._id;                                                                                                //
    RocketChat.models.Messages.upsert({                                                                                //
      _id: _id,                                                                                                        //
      'u._id': message.u._id                                                                                           //
    }, message);                                                                                                       //
    message._id = _id;                                                                                                 //
  } else {                                                                                                             //
    message._id = RocketChat.models.Messages.insert(message);                                                          //
  }                                                                                                                    //
                                                                                                                       //
  /*                                                                                                                   // 38
  	Defer other updates as their return is not interesting to the user                                                  //
   */                                                                                                                  //
  Meteor.defer(function() {                                                                                            //
    message.sandstormSessionId = sandstormSessionId;                                                                   //
    return RocketChat.callbacks.run('afterSaveMessage', message, room);                                                //
  });                                                                                                                  //
  return message;                                                                                                      // 46
};                                                                                                                     // 1
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/settings.coffee.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var blockedSettings, hiddenSettings, ref, ref1;                                                                        // 1
                                                                                                                       //
blockedSettings = {};                                                                                                  // 1
                                                                                                                       //
if ((ref = process.env.SETTINGS_BLOCKED) != null) {                                                                    //
  ref.split(',').forEach(function(settingId) {                                                                         //
    return blockedSettings[settingId] = 1;                                                                             //
  });                                                                                                                  //
}                                                                                                                      //
                                                                                                                       //
hiddenSettings = {};                                                                                                   // 5
                                                                                                                       //
if ((ref1 = process.env.SETTINGS_HIDDEN) != null) {                                                                    //
  ref1.split(',').forEach(function(settingId) {                                                                        //
    return hiddenSettings[settingId] = 1;                                                                              //
  });                                                                                                                  //
}                                                                                                                      //
                                                                                                                       //
RocketChat.settings._sorter = {};                                                                                      // 9
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 11
 * Add a setting                                                                                                       //
 * @param {String} _id                                                                                                 //
 * @param {Mixed} value                                                                                                //
 * @param {Object} setting                                                                                             //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.add = function(_id, value, options) {                                                              // 17
  var base, name, query, ref2, ref3, ref4, updateOperations;                                                           // 20
  if (options == null) {                                                                                               //
    options = {};                                                                                                      //
  }                                                                                                                    //
  if (!_id || (value == null)) {                                                                                       //
    return false;                                                                                                      // 21
  }                                                                                                                    //
  if ((base = RocketChat.settings._sorter)[name = options.group] == null) {                                            //
    base[name] = 0;                                                                                                    //
  }                                                                                                                    //
  options.packageValue = value;                                                                                        //
  options.valueSource = 'packageValue';                                                                                //
  options.hidden = false;                                                                                              //
  options.blocked = options.blocked || false;                                                                          //
  if (options.sorter == null) {                                                                                        //
    options.sorter = RocketChat.settings._sorter[options.group]++;                                                     //
  }                                                                                                                    //
  if (options.enableQuery != null) {                                                                                   //
    options.enableQuery = JSON.stringify(options.enableQuery);                                                         //
  }                                                                                                                    //
  if (options.i18nDefaultQuery != null) {                                                                              //
    options.i18nDefaultQuery = JSON.stringify(options.i18nDefaultQuery);                                               //
  }                                                                                                                    //
  if ((typeof process !== "undefined" && process !== null ? (ref2 = process.env) != null ? ref2[_id] : void 0 : void 0) != null) {
    value = process.env[_id];                                                                                          //
    if (value.toLowerCase() === "true") {                                                                              //
      value = true;                                                                                                    //
    } else if (value.toLowerCase() === "false") {                                                                      //
      value = false;                                                                                                   //
    }                                                                                                                  //
    options.processEnvValue = value;                                                                                   //
    options.valueSource = 'processEnvValue';                                                                           //
  } else if (((ref3 = Meteor.settings) != null ? ref3[_id] : void 0) != null) {                                        //
    value = Meteor.settings[_id];                                                                                      //
    options.meteorSettingsValue = value;                                                                               //
    options.valueSource = 'meteorSettingsValue';                                                                       //
  }                                                                                                                    //
  if (options.i18nLabel == null) {                                                                                     //
    options.i18nLabel = _id;                                                                                           //
  }                                                                                                                    //
  if (options.i18nDescription == null) {                                                                               //
    options.i18nDescription = _id + "_Description";                                                                    //
  }                                                                                                                    //
  if (blockedSettings[_id] != null) {                                                                                  //
    options.blocked = true;                                                                                            //
  }                                                                                                                    //
  if (hiddenSettings[_id] != null) {                                                                                   //
    options.hidden = true;                                                                                             //
  }                                                                                                                    //
  if ((typeof process !== "undefined" && process !== null ? (ref4 = process.env) != null ? ref4['OVERWRITE_SETTING_' + _id] : void 0 : void 0) != null) {
    value = process.env['OVERWRITE_SETTING_' + _id];                                                                   //
    if (value.toLowerCase() === "true") {                                                                              //
      value = true;                                                                                                    //
    } else if (value.toLowerCase() === "false") {                                                                      //
      value = false;                                                                                                   //
    }                                                                                                                  //
    options.value = value;                                                                                             //
    options.processEnvValue = value;                                                                                   //
    options.valueSource = 'processEnvValue';                                                                           //
  }                                                                                                                    //
  updateOperations = {                                                                                                 //
    $set: options,                                                                                                     //
    $setOnInsert: {                                                                                                    //
      createdAt: new Date                                                                                              //
    }                                                                                                                  //
  };                                                                                                                   //
  if (options.value == null) {                                                                                         //
    if (options.force === true) {                                                                                      //
      updateOperations.$set.value = options.packageValue;                                                              //
    } else {                                                                                                           //
      updateOperations.$setOnInsert.value = value;                                                                     //
    }                                                                                                                  //
  }                                                                                                                    //
  query = _.extend({                                                                                                   //
    _id: _id                                                                                                           //
  }, updateOperations.$set);                                                                                           //
  if (options.section == null) {                                                                                       //
    updateOperations.$unset = {                                                                                        //
      section: 1                                                                                                       //
    };                                                                                                                 //
    query.section = {                                                                                                  //
      $exists: false                                                                                                   //
    };                                                                                                                 //
  }                                                                                                                    //
  if (RocketChat.models.Settings.findOne(query) == null) {                                                             //
    updateOperations.$set.ts = new Date;                                                                               //
    return RocketChat.models.Settings.upsert({                                                                         // 93
      _id: _id                                                                                                         //
    }, updateOperations);                                                                                              //
  }                                                                                                                    //
};                                                                                                                     // 17
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 97
 * Add a setting group                                                                                                 //
 * @param {String} _id                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup = function(_id, options, cb) {                                                            // 101
  if (options == null) {                                                                                               //
    options = {};                                                                                                      //
  }                                                                                                                    //
  if (!_id) {                                                                                                          //
    return false;                                                                                                      // 105
  }                                                                                                                    //
  if (_.isFunction(options)) {                                                                                         //
    cb = options;                                                                                                      //
    options = {};                                                                                                      //
  }                                                                                                                    //
  if (options.i18nLabel == null) {                                                                                     //
    options.i18nLabel = _id;                                                                                           //
  }                                                                                                                    //
  if (options.i18nDescription == null) {                                                                               //
    options.i18nDescription = _id + "_Description";                                                                    //
  }                                                                                                                    //
  options.ts = new Date;                                                                                               //
  options.blocked = false;                                                                                             //
  options.hidden = false;                                                                                              //
  if (blockedSettings[_id] != null) {                                                                                  //
    options.blocked = true;                                                                                            //
  }                                                                                                                    //
  if (hiddenSettings[_id] != null) {                                                                                   //
    options.hidden = true;                                                                                             //
  }                                                                                                                    //
  RocketChat.models.Settings.upsert({                                                                                  //
    _id: _id                                                                                                           //
  }, {                                                                                                                 //
    $set: options,                                                                                                     //
    $setOnInsert: {                                                                                                    //
      type: 'group',                                                                                                   //
      createdAt: new Date                                                                                              //
    }                                                                                                                  //
  });                                                                                                                  //
  if (cb != null) {                                                                                                    //
    cb.call({                                                                                                          //
      add: function(id, value, options) {                                                                              //
        if (options == null) {                                                                                         //
          options = {};                                                                                                //
        }                                                                                                              //
        options.group = _id;                                                                                           //
        return RocketChat.settings.add(id, value, options);                                                            //
      },                                                                                                               //
      section: function(section, cb) {                                                                                 //
        return cb.call({                                                                                               //
          add: function(id, value, options) {                                                                          //
            if (options == null) {                                                                                     //
              options = {};                                                                                            //
            }                                                                                                          //
            options.group = _id;                                                                                       //
            options.section = section;                                                                                 //
            return RocketChat.settings.add(id, value, options);                                                        //
          }                                                                                                            //
        });                                                                                                            //
      }                                                                                                                //
    });                                                                                                                //
  }                                                                                                                    //
};                                                                                                                     // 101
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 149
 * Remove a setting by id                                                                                              //
 * @param {String} _id                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.removeById = function(_id) {                                                                       // 153
  if (!_id) {                                                                                                          //
    return false;                                                                                                      // 157
  }                                                                                                                    //
  return RocketChat.models.Settings.removeById(_id);                                                                   // 159
};                                                                                                                     // 153
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 162
 * Update a setting by id                                                                                              //
 * @param {String} _id                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.updateById = function(_id, value) {                                                                // 166
  if (!_id || (value == null)) {                                                                                       //
    return false;                                                                                                      // 170
  }                                                                                                                    //
  return RocketChat.models.Settings.updateValueById(_id, value);                                                       // 172
};                                                                                                                     // 166
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 175
 * Update options of a setting by id                                                                                   //
 * @param {String} _id                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.updateOptionsById = function(_id, options) {                                                       // 179
  if (!_id || (options == null)) {                                                                                     //
    return false;                                                                                                      // 183
  }                                                                                                                    //
  return RocketChat.models.Settings.updateOptionsById(_id, options);                                                   // 185
};                                                                                                                     // 179
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 188
 * Update a setting by id                                                                                              //
 * @param {String} _id                                                                                                 //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.clearById = function(_id) {                                                                        // 192
  if (_id == null) {                                                                                                   //
    return false;                                                                                                      // 196
  }                                                                                                                    //
  return RocketChat.models.Settings.updateValueById(_id, void 0);                                                      // 198
};                                                                                                                     // 192
                                                                                                                       //
                                                                                                                       //
/*                                                                                                                     // 201
 * Update a setting by id                                                                                              //
 */                                                                                                                    //
                                                                                                                       //
RocketChat.settings.init = function() {                                                                                // 204
  var fn, i, len, ref2, results;                                                                                       // 205
  RocketChat.settings.initialLoad = true;                                                                              //
  RocketChat.models.Settings.find().observe({                                                                          //
    added: function(record) {                                                                                          //
      Meteor.settings[record._id] = record.value;                                                                      //
      if (record.env === true) {                                                                                       //
        process.env[record._id] = record.value;                                                                        //
      }                                                                                                                //
      return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);                      //
    },                                                                                                                 //
    changed: function(record) {                                                                                        //
      Meteor.settings[record._id] = record.value;                                                                      //
      if (record.env === true) {                                                                                       //
        process.env[record._id] = record.value;                                                                        //
      }                                                                                                                //
      return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);                      //
    },                                                                                                                 //
    removed: function(record) {                                                                                        //
      delete Meteor.settings[record._id];                                                                              //
      if (record.env === true) {                                                                                       //
        delete process.env[record._id];                                                                                //
      }                                                                                                                //
      return RocketChat.settings.load(record._id, void 0, RocketChat.settings.initialLoad);                            //
    }                                                                                                                  //
  });                                                                                                                  //
  RocketChat.settings.initialLoad = false;                                                                             //
  ref2 = RocketChat.settings.afterInitialLoad;                                                                         // 224
  results = [];                                                                                                        // 224
  for (i = 0, len = ref2.length; i < len; i++) {                                                                       //
    fn = ref2[i];                                                                                                      //
    results.push(fn(Meteor.settings));                                                                                 //
  }                                                                                                                    // 224
  return results;                                                                                                      //
};                                                                                                                     // 204
                                                                                                                       //
RocketChat.settings.afterInitialLoad = [];                                                                             // 228
                                                                                                                       //
RocketChat.settings.onAfterInitialLoad = function(fn) {                                                                // 230
  RocketChat.settings.afterInitialLoad.push(fn);                                                                       //
  if (RocketChat.settings.initialLoad === false) {                                                                     //
    return fn(Meteor.settings);                                                                                        //
  }                                                                                                                    //
};                                                                                                                     // 230
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUserAvatar.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUserAvatar.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.setUserAvatar = function (user, dataURI, contentType, service) {                                            // 1
	if (service === 'initials') {                                                                                         // 2
		return RocketChat.models.Users.setAvatarOrigin(user._id, service);                                                   // 3
	}                                                                                                                     // 4
                                                                                                                       //
	if (service === 'url') {                                                                                              // 6
		var result = null;                                                                                                   // 7
                                                                                                                       //
		try {                                                                                                                // 9
			result = HTTP.get(dataURI, { npmRequestOptions: { encoding: 'binary' } });                                          // 10
		} catch (error) {                                                                                                    // 11
			console.log('Error while handling the setting of the avatar from a url (' + dataURI + ') for ' + user.username + ':', error);
			throw new Meteor.Error('error-avatar-url-handling', 'Error while handling avatar setting from a URL (' + dataURI + ') for ' + user.username, { 'function': 'RocketChat.setUserAvatar', url: dataURI, username: user.username });
		}                                                                                                                    // 14
                                                                                                                       //
		if (result.statusCode !== 200) {                                                                                     // 16
			console.log('Not a valid response, ' + result.statusCode + ', from the avatar url: ' + dataURI);                    // 17
			throw new Meteor.Error('error-avatar-invalid-url', 'Invalid avatar URL: ' + dataURI, { 'function': 'RocketChat.setUserAvatar', url: dataURI });
		}                                                                                                                    // 19
                                                                                                                       //
		if (!/image\/.+/.test(result.headers['content-type'])) {                                                             // 21
			console.log('Not a valid content-type from the provided url, ' + result.headers['content-type'] + ', from the avatar url: ' + dataURI);
			throw new Meteor.Error('error-avatar-invalid-url', 'Invalid avatar URL: ' + dataURI, { 'function': 'RocketChat.setUserAvatar', url: dataURI });
		}                                                                                                                    // 24
                                                                                                                       //
		var ars = RocketChatFile.bufferToStream(new Buffer(result.content, 'binary'));                                       // 26
		RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(user.username + '.jpg'));                                 // 27
		var aws = RocketChatFileAvatarInstance.createWriteStream(encodeURIComponent(user.username + '.jpg'), result.headers['content-type']);
		aws.on('end', Meteor.bindEnvironment(function () {                                                                   // 29
			Meteor.setTimeout(function () {                                                                                     // 30
				console.log('Set ' + user.username + '\'s avatar from the url: ' + dataURI);                                       // 31
				RocketChat.models.Users.setAvatarOrigin(user._id, service);                                                        // 32
				RocketChat.Notifications.notifyAll('updateAvatar', { username: user.username });                                   // 33
			}, 500);                                                                                                            // 34
		}));                                                                                                                 // 35
                                                                                                                       //
		ars.pipe(aws);                                                                                                       // 37
		return;                                                                                                              // 38
	}                                                                                                                     // 39
                                                                                                                       //
	var fileData = RocketChatFile.dataURIParse(dataURI);                                                                  // 41
	var image = fileData.image;                                                                                           // 42
	contentType = fileData.contentType;                                                                                   // 43
                                                                                                                       //
	var rs = RocketChatFile.bufferToStream(new Buffer(image, 'base64'));                                                  // 45
	RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(user.username + '.jpg'));                                  // 46
	var ws = RocketChatFileAvatarInstance.createWriteStream(encodeURIComponent(user.username + '.jpg'), contentType);     // 47
	ws.on('end', Meteor.bindEnvironment(function () {                                                                     // 48
		Meteor.setTimeout(function () {                                                                                      // 49
			RocketChat.models.Users.setAvatarOrigin(user._id, service);                                                         // 50
			RocketChat.Notifications.notifyAll('updateAvatar', { username: user.username });                                    // 51
		}, 500);                                                                                                             // 52
	}));                                                                                                                  // 53
	rs.pipe(ws);                                                                                                          // 54
};                                                                                                                     // 55
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUsername.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat._setUsername = function(userId, username) {                                                                 // 1
  var error, nameValidation, previousUsername, ref, rs, user, ws;                                                      // 2
  username = s.trim(username);                                                                                         //
  if (!userId || !username) {                                                                                          //
    return false;                                                                                                      // 4
  }                                                                                                                    //
  try {                                                                                                                // 6
    nameValidation = new RegExp('^' + RocketChat.settings.get('UTF8_Names_Validation') + '$');                         //
  } catch (error1) {                                                                                                   //
    nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                  //
  }                                                                                                                    //
  if (!nameValidation.test(username)) {                                                                                //
    return false;                                                                                                      // 12
  }                                                                                                                    //
  user = RocketChat.models.Users.findOneById(userId);                                                                  //
  if (user.username === username) {                                                                                    //
    return user;                                                                                                       // 18
  }                                                                                                                    //
  previousUsername = user.username;                                                                                    //
  if (!previousUsername || !(username.toLowerCase() === previousUsername.toLowerCase())) {                             //
    if (!RocketChat.checkUsernameAvailability(username)) {                                                             //
      return false;                                                                                                    // 25
    }                                                                                                                  //
  }                                                                                                                    //
  try {                                                                                                                // 30
    if (!previousUsername && ((ref = user.emails) != null ? ref.length : void 0) > 0 && RocketChat.settings.get('Accounts_Enrollment_Email')) {
      Accounts.sendEnrollmentEmail(user._id);                                                                          //
    }                                                                                                                  //
  } catch (error1) {                                                                                                   //
    error = error1;                                                                                                    //
  }                                                                                                                    //
  if (previousUsername) {                                                                                              //
    RocketChat.models.Messages.updateAllUsernamesByUserId(user._id, username);                                         //
    RocketChat.models.Messages.updateUsernameOfEditByUserId(user._id, username);                                       //
    RocketChat.models.Messages.findByMention(previousUsername).forEach(function(msg) {                                 //
      var updatedMsg;                                                                                                  // 41
      updatedMsg = msg.msg.replace(new RegExp("@" + previousUsername, "ig"), "@" + username);                          //
      return RocketChat.models.Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);
    });                                                                                                                //
    RocketChat.models.Rooms.replaceUsername(previousUsername, username);                                               //
    RocketChat.models.Rooms.replaceMutedUsername(previousUsername, username);                                          //
    RocketChat.models.Rooms.replaceUsernameOfUserByUserId(user._id, username);                                         //
    RocketChat.models.Subscriptions.setUserUsernameByUserId(user._id, username);                                       //
    RocketChat.models.Subscriptions.setNameForDirectRoomsWithOldName(previousUsername, username);                      //
    rs = RocketChatFileAvatarInstance.getFileWithReadStream(encodeURIComponent(previousUsername + ".jpg"));            //
    if (rs != null) {                                                                                                  //
      RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(username + ".jpg"));                                  //
      ws = RocketChatFileAvatarInstance.createWriteStream(encodeURIComponent(username + ".jpg"), rs.contentType);      //
      ws.on('end', Meteor.bindEnvironment(function() {                                                                 //
        return RocketChatFileAvatarInstance.deleteFile(encodeURIComponent(previousUsername + ".jpg"));                 //
      }));                                                                                                             //
      rs.readStream.pipe(ws);                                                                                          //
    }                                                                                                                  //
  }                                                                                                                    //
  RocketChat.models.Users.setUsername(user._id, username);                                                             //
  user.username = username;                                                                                            //
  return user;                                                                                                         // 62
};                                                                                                                     // 1
                                                                                                                       //
RocketChat.setUsername = RocketChat.RateLimiter.limitFunction(RocketChat._setUsername, 1, 60000, {                     // 64
  0: function(userId) {                                                                                                //
    return !userId || !RocketChat.authz.hasPermission(userId, 'edit-other-user-info');                                 // 65
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setEmail.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat._setEmail = function (userId, email) {                                                                      // 1
	email = s.trim(email);                                                                                                // 2
	if (!userId) {                                                                                                        // 3
		throw new Meteor.Error('error-invalid-user', 'Invalid user', { 'function': '_setEmail' });                           // 4
	}                                                                                                                     // 5
                                                                                                                       //
	if (!email) {                                                                                                         // 7
		throw new Meteor.Error('error-invalid-email', 'Invalid email', { 'function': '_setEmail' });                         // 8
	}                                                                                                                     // 9
                                                                                                                       //
	RocketChat.validateEmailDomain(email);                                                                                // 11
                                                                                                                       //
	var user = RocketChat.models.Users.findOneById(userId);                                                               // 13
                                                                                                                       //
	// User already has desired username, return                                                                          // 15
	if (user.emails && user.emails[0] && user.emails[0].address === email) {                                              // 16
		return user;                                                                                                         // 17
	}                                                                                                                     // 18
                                                                                                                       //
	// Check email availability                                                                                           // 20
	if (!RocketChat.checkEmailAvailability(email)) {                                                                      // 21
		throw new Meteor.Error('error-field-unavailable', email + ' is already in use :(', { 'function': '_setEmail', field: email });
	}                                                                                                                     // 23
                                                                                                                       //
	// Set new email                                                                                                      // 25
	RocketChat.models.Users.setEmail(user._id, email);                                                                    // 26
	user.email = email;                                                                                                   // 27
	return user;                                                                                                          // 28
};                                                                                                                     // 29
                                                                                                                       //
RocketChat.setEmail = RocketChat.RateLimiter.limitFunction(RocketChat._setEmail, 1, 60000, {                           // 31
	0: function () {                                                                                                      // 32
		function _() {                                                                                                       // 32
			return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');                // 32
		}                                                                                                                    // 32
                                                                                                                       //
		return _;                                                                                                            // 32
	}() // Administrators have permission to change others emails, so don't limit those                                   // 32
});                                                                                                                    // 31
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/unarchiveRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.unarchiveRoom = function (rid) {                                                                            // 1
	RocketChat.models.Rooms.unarchiveById(rid);                                                                           // 2
	RocketChat.models.Subscriptions.unarchiveByRoomId(rid);                                                               // 3
};                                                                                                                     // 4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/updateMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.updateMessage = function (message, user) {                                                                  // 1
	// If we keep history of edits, insert a new message to store history information                                     // 2
	if (RocketChat.settings.get('Message_KeepHistory')) {                                                                 // 3
		RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);                                                   // 4
	}                                                                                                                     // 5
                                                                                                                       //
	message.editedAt = new Date();                                                                                        // 7
	message.editedBy = {                                                                                                  // 8
		_id: user._id,                                                                                                       // 9
		username: user.username                                                                                              // 10
	};                                                                                                                    // 8
                                                                                                                       //
	var urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g);
	if (urls) {                                                                                                           // 14
		message.urls = urls.map(function (url) {                                                                             // 15
			return { url: url };                                                                                                // 15
		});                                                                                                                  // 15
	}                                                                                                                     // 16
                                                                                                                       //
	message = RocketChat.callbacks.run('beforeSaveMessage', message);                                                     // 18
                                                                                                                       //
	var tempid = message._id;                                                                                             // 20
	delete message._id;                                                                                                   // 21
                                                                                                                       //
	RocketChat.models.Messages.update({ _id: tempid }, { $set: message });                                                // 23
                                                                                                                       //
	var room = RocketChat.models.Rooms.findOneById(message.rid);                                                          // 25
                                                                                                                       //
	Meteor.defer(function () {                                                                                            // 27
		RocketChat.callbacks.run('afterSaveMessage', RocketChat.models.Messages.findOneById(tempid), room);                  // 28
	});                                                                                                                   // 29
};                                                                                                                     // 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Notifications.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/Notifications.coffee.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var func,                                                                                                              // 1
  slice = [].slice;                                                                                                    //
                                                                                                                       //
RocketChat.Notifications = new ((function() {                                                                          // 1
  function _Class() {                                                                                                  //
    var self;                                                                                                          // 3
    self = this;                                                                                                       //
    this.debug = false;                                                                                                //
    this.streamAll = new Meteor.Streamer('notify-all');                                                                //
    this.streamRoom = new Meteor.Streamer('notify-room');                                                              //
    this.streamRoomUsers = new Meteor.Streamer('notify-room-users');                                                   //
    this.streamUser = new Meteor.Streamer('notify-user');                                                              //
    this.streamAll.allowWrite('none');                                                                                 //
    this.streamRoom.allowWrite('none');                                                                                //
    this.streamRoomUsers.allowWrite(function() {                                                                       //
      var args, e, eventName, i, len, ref, ref1, roomId, subscription, subscriptions, user;                            // 16
      eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                          //
      ref = eventName.split('/'), roomId = ref[0], e = ref[1];                                                         //
      user = Meteor.users.findOne(this.userId, {                                                                       //
        fields: {                                                                                                      //
          username: 1                                                                                                  //
        }                                                                                                              //
      });                                                                                                              //
      if (RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId) != null) {                     //
        subscriptions = RocketChat.models.Subscriptions.findByRoomId(roomId).fetch();                                  //
        for (i = 0, len = subscriptions.length; i < len; i++) {                                                        // 21
          subscription = subscriptions[i];                                                                             //
          (ref1 = RocketChat.Notifications).notifyUser.apply(ref1, [subscription.u._id, eventName].concat(slice.call(args)));
        }                                                                                                              // 21
      }                                                                                                                //
      return false;                                                                                                    // 24
    });                                                                                                                //
    this.streamUser.allowWrite('logged');                                                                              //
    this.streamAll.allowRead('logged');                                                                                //
    this.streamRoom.allowRead(function(eventName) {                                                                    //
      var roomId, user;                                                                                                // 31
      if (this.userId == null) {                                                                                       //
        return false;                                                                                                  // 31
      }                                                                                                                //
      roomId = eventName.split('/')[0];                                                                                //
      user = Meteor.users.findOne(this.userId, {                                                                       //
        fields: {                                                                                                      //
          username: 1                                                                                                  //
        }                                                                                                              //
      });                                                                                                              //
      return RocketChat.models.Rooms.findOneByIdContainigUsername(roomId, user.username, {                             // 36
        fields: {                                                                                                      //
          _id: 1                                                                                                       //
        }                                                                                                              //
      }) != null;                                                                                                      //
    });                                                                                                                //
    this.streamRoomUsers.allowRead('none');                                                                            //
    this.streamUser.allowRead(function(eventName) {                                                                    //
      var userId;                                                                                                      // 41
      userId = eventName.split('/')[0];                                                                                //
      return (this.userId != null) && this.userId === userId;                                                          // 42
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  _Class.prototype.notifyAll = function() {                                                                            //
    var args, eventName;                                                                                               // 46
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                            //
    if (this.debug === true) {                                                                                         //
      console.log('notifyAll', arguments);                                                                             //
    }                                                                                                                  //
    args.unshift(eventName);                                                                                           //
    return this.streamAll.emit.apply(this.streamAll, args);                                                            //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.notifyRoom = function() {                                                                           //
    var args, eventName, room;                                                                                         // 52
    room = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];       //
    if (this.debug === true) {                                                                                         //
      console.log('notifyRoom', arguments);                                                                            //
    }                                                                                                                  //
    args.unshift(room + "/" + eventName);                                                                              //
    return this.streamRoom.emit.apply(this.streamRoom, args);                                                          //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.notifyUser = function() {                                                                           //
    var args, eventName, userId;                                                                                       // 58
    userId = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];     //
    if (this.debug === true) {                                                                                         //
      console.log('notifyUser', arguments);                                                                            //
    }                                                                                                                  //
    args.unshift(userId + "/" + eventName);                                                                            //
    return this.streamUser.emit.apply(this.streamUser, args);                                                          //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.notifyAllInThisInstance = function() {                                                              //
    var args, eventName;                                                                                               // 65
    eventName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                            //
    if (this.debug === true) {                                                                                         //
      console.log('notifyAll', arguments);                                                                             //
    }                                                                                                                  //
    args.unshift(eventName);                                                                                           //
    return this.streamAll.emitWithoutBroadcast.apply(this.streamAll, args);                                            //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.notifyRoomInThisInstance = function() {                                                             //
    var args, eventName, room;                                                                                         // 71
    room = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];       //
    if (this.debug === true) {                                                                                         //
      console.log('notifyRoomAndBroadcast', arguments);                                                                //
    }                                                                                                                  //
    args.unshift(room + "/" + eventName);                                                                              //
    return this.streamRoom.emitWithoutBroadcast.apply(this.streamRoom, args);                                          //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.notifyUserInThisInstance = function() {                                                             //
    var args, eventName, userId;                                                                                       // 77
    userId = arguments[0], eventName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];     //
    if (this.debug === true) {                                                                                         //
      console.log('notifyUserAndBroadcast', arguments);                                                                //
    }                                                                                                                  //
    args.unshift(userId + "/" + eventName);                                                                            //
    return this.streamUser.emitWithoutBroadcast.apply(this.streamUser, args);                                          //
  };                                                                                                                   //
                                                                                                                       //
  return _Class;                                                                                                       //
                                                                                                                       //
})());                                                                                                                 //
                                                                                                                       //
func = function(eventName, username) {                                                                                 // 86
  var e, ref, room, user;                                                                                              // 87
  ref = eventName.split('/'), room = ref[0], e = ref[1];                                                               //
  if (e === 'webrtc') {                                                                                                //
    return true;                                                                                                       // 90
  }                                                                                                                    //
  if (e === 'typing') {                                                                                                //
    user = Meteor.users.findOne(this.userId, {                                                                         //
      fields: {                                                                                                        //
        username: 1                                                                                                    //
      }                                                                                                                //
    });                                                                                                                //
    if ((user != null ? user.username : void 0) === username) {                                                        //
      return true;                                                                                                     // 95
    }                                                                                                                  //
  }                                                                                                                    //
  return false;                                                                                                        // 97
};                                                                                                                     // 86
                                                                                                                       //
RocketChat.Notifications.streamRoom.allowWrite(func);                                                                  // 99
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"models":{"_Base.js":["babel-runtime/helpers/classCallCheck","babel-runtime/helpers/createClass","babel-runtime/helpers/possibleConstructorReturn","babel-runtime/helpers/inherits",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_Base.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});var _createClass;module.import('babel-runtime/helpers/createClass',{"default":function(v){_createClass=v}});var _possibleConstructorReturn;module.import('babel-runtime/helpers/possibleConstructorReturn',{"default":function(v){_possibleConstructorReturn=v}});var _inherits;module.import('babel-runtime/helpers/inherits',{"default":function(v){_inherits=v}});
                                                                                                                       //
                                                                                                                       //
                                                                                                                       //
                                                                                                                       //
var _Npm$require = Npm.require('events');                                                                              //
                                                                                                                       //
var EventEmitter = _Npm$require.EventEmitter;                                                                          //
                                                                                                                       //
                                                                                                                       //
var baseName = 'rocketchat_';                                                                                          // 3
                                                                                                                       //
var trash = new Mongo.Collection(baseName + '_trash');                                                                 // 5
try {                                                                                                                  // 6
	trash._ensureIndex({ collection: 1 });                                                                                // 7
	trash._ensureIndex({ _deletedAt: 1 }, { expireAfterSeconds: 60 * 60 * 24 * 30 });                                     // 8
} catch (e) {                                                                                                          // 9
	console.log(e);                                                                                                       // 10
}                                                                                                                      // 11
                                                                                                                       //
var ModelsBase = function (_EventEmitter) {                                                                            //
	_inherits(ModelsBase, _EventEmitter);                                                                                 //
                                                                                                                       //
	function ModelsBase(model) {                                                                                          // 14
		_classCallCheck(this, ModelsBase);                                                                                   // 14
                                                                                                                       //
		var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));                                              // 14
                                                                                                                       //
		if (Match.test(model, String)) {                                                                                     // 17
			_this.name = model;                                                                                                 // 18
			_this.collectionName = _this.baseName + _this.name;                                                                 // 19
			_this.model = new Mongo.Collection(_this.collectionName);                                                           // 20
		} else {                                                                                                             // 21
			_this.name = model._name;                                                                                           // 22
			_this.collectionName = _this.name;                                                                                  // 23
			_this.model = model;                                                                                                // 24
		}                                                                                                                    // 25
                                                                                                                       //
		_this.tryEnsureIndex({ '_updatedAt': 1 });                                                                           // 27
		return _this;                                                                                                        // 14
	}                                                                                                                     // 28
                                                                                                                       //
	ModelsBase.prototype.setUpdatedAt = function () {                                                                     //
		function setUpdatedAt() {                                                                                            //
			var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                                // 34
			var checkQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;                         // 34
			var query = arguments[2];                                                                                           // 34
                                                                                                                       //
			if (checkQuery === true) {                                                                                          // 35
				if (!query || Object.keys(query).length === 0) {                                                                   // 36
					throw new Meteor.Error('Models._Base: Empty query');                                                              // 37
				}                                                                                                                  // 38
			}                                                                                                                   // 39
                                                                                                                       //
			if (/(^|,)\$/.test(Object.keys(record).join(','))) {                                                                // 41
				record.$set = record.$set || {};                                                                                   // 42
				record.$set._updatedAt = new Date();                                                                               // 43
			} else {                                                                                                            // 44
				record._updatedAt = new Date();                                                                                    // 45
			}                                                                                                                   // 46
                                                                                                                       //
			return record;                                                                                                      // 48
		}                                                                                                                    // 49
                                                                                                                       //
		return setUpdatedAt;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.find = function () {                                                                             //
		function find() {                                                                                                    //
			var _model;                                                                                                         // 51
                                                                                                                       //
			return (_model = this.model).find.apply(_model, arguments);                                                         // 52
		}                                                                                                                    // 53
                                                                                                                       //
		return find;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.findOne = function () {                                                                          //
		function findOne() {                                                                                                 //
			var _model2;                                                                                                        // 55
                                                                                                                       //
			return (_model2 = this.model).findOne.apply(_model2, arguments);                                                    // 56
		}                                                                                                                    // 57
                                                                                                                       //
		return findOne;                                                                                                      //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.insert = function () {                                                                           //
		function insert(record) {                                                                                            //
			var _model3;                                                                                                        // 59
                                                                                                                       //
			this.setUpdatedAt(record);                                                                                          // 60
                                                                                                                       //
			var result = (_model3 = this.model).insert.apply(_model3, arguments);                                               // 62
			record._id = result;                                                                                                // 63
			this.emit('insert', record);                                                                                        // 64
			this.emit('change', 'insert', record);                                                                              // 65
			return result;                                                                                                      // 66
		}                                                                                                                    // 67
                                                                                                                       //
		return insert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.update = function () {                                                                           //
		function update(query, _update) {                                                                                    //
			var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};                               // 69
                                                                                                                       //
			this.setUpdatedAt(_update, true, query);                                                                            // 70
                                                                                                                       //
			if (options.upsert) {                                                                                               // 72
				return this.upsert(query, _update);                                                                                // 73
			}                                                                                                                   // 74
                                                                                                                       //
			var ids = [];                                                                                                       // 76
			if (options.multi === true) {                                                                                       // 77
				var updated = this.model.find(query, { fields: { _id: 1 } }).fetch();                                              // 78
				if (updated) {                                                                                                     // 79
					ids = ids.concat(updated);                                                                                        // 80
				}                                                                                                                  // 81
			} else {                                                                                                            // 82
				var _updated = this.model.findOne(query, { fields: { _id: 1 } });                                                  // 83
				if (_updated) {                                                                                                    // 84
					ids.push(_updated);                                                                                               // 85
				}                                                                                                                  // 86
			}                                                                                                                   // 87
                                                                                                                       //
			var result = this.model.update(query, _update, options);                                                            // 89
			var idQuery = { _id: { $in: _.pluck(ids, '_id') } };                                                                // 90
			this.emit('update', idQuery, _update);                                                                              // 91
			this.emit('change', 'update', idQuery, _update);                                                                    // 92
			return result;                                                                                                      // 93
		}                                                                                                                    // 94
                                                                                                                       //
		return update;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.upsert = function () {                                                                           //
		function upsert(query, update) {                                                                                     //
			var _model4;                                                                                                        // 96
                                                                                                                       //
			this.setUpdatedAt(update, true, query);                                                                             // 97
                                                                                                                       //
			var id = this.model.findOne(query, { fields: { _id: 1 } });                                                         // 99
			var result = (_model4 = this.model).upsert.apply(_model4, arguments);                                               // 100
                                                                                                                       //
			var record = id;                                                                                                    // 102
			if (result.insertedId) {                                                                                            // 103
				record = { _id: result.insertedId };                                                                               // 104
			}                                                                                                                   // 105
                                                                                                                       //
			this.emit('update', record);                                                                                        // 107
			this.emit('change', 'update', record);                                                                              // 108
			return result;                                                                                                      // 109
		}                                                                                                                    // 110
                                                                                                                       //
		return upsert;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.remove = function () {                                                                           //
		function remove(query) {                                                                                             //
			var records = this.model.find(query).fetch();                                                                       // 113
                                                                                                                       //
			var ids = [];                                                                                                       // 115
			for (var _iterator = records, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref;                                                                                                          // 116
                                                                                                                       //
				if (_isArray) {                                                                                                    // 116
					if (_i >= _iterator.length) break;                                                                                // 116
					_ref = _iterator[_i++];                                                                                           // 116
				} else {                                                                                                           // 116
					_i = _iterator.next();                                                                                            // 116
					if (_i.done) break;                                                                                               // 116
					_ref = _i.value;                                                                                                  // 116
				}                                                                                                                  // 116
                                                                                                                       //
				var record = _ref;                                                                                                 // 116
                                                                                                                       //
				ids.push(record._id);                                                                                              // 117
                                                                                                                       //
				record._deletedAt = new Date();                                                                                    // 119
				record.__collection__ = this.name;                                                                                 // 120
                                                                                                                       //
				trash.upsert({ _id: record._id }, _.omit(record, '_id'));                                                          // 122
			}                                                                                                                   // 123
                                                                                                                       //
			query = { _id: { $in: ids } };                                                                                      // 125
                                                                                                                       //
			this.emit('remove', records);                                                                                       // 127
			this.emit('change', 'remove', records);                                                                             // 128
			return this.model.remove(query);                                                                                    // 129
		}                                                                                                                    // 130
                                                                                                                       //
		return remove;                                                                                                       //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.insertOrUpsert = function () {                                                                   //
		function insertOrUpsert() {                                                                                          //
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {                              // 132
				args[_key] = arguments[_key];                                                                                      // 132
			}                                                                                                                   // 132
                                                                                                                       //
			if (args[0] && args[0]._id) {                                                                                       // 133
				var _id = args[0]._id;                                                                                             // 134
				delete args[0]._id;                                                                                                // 135
				args.unshift({                                                                                                     // 136
					_id: _id                                                                                                          // 137
				});                                                                                                                // 136
                                                                                                                       //
				this.upsert.apply(this, args);                                                                                     // 140
				return _id;                                                                                                        // 141
			} else {                                                                                                            // 142
				return this.insert.apply(this, args);                                                                              // 143
			}                                                                                                                   // 144
		}                                                                                                                    // 145
                                                                                                                       //
		return insertOrUpsert;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.allow = function () {                                                                            //
		function allow() {                                                                                                   //
			var _model5;                                                                                                        // 147
                                                                                                                       //
			return (_model5 = this.model).allow.apply(_model5, arguments);                                                      // 148
		}                                                                                                                    // 149
                                                                                                                       //
		return allow;                                                                                                        //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.deny = function () {                                                                             //
		function deny() {                                                                                                    //
			var _model6;                                                                                                        // 151
                                                                                                                       //
			return (_model6 = this.model).deny.apply(_model6, arguments);                                                       // 152
		}                                                                                                                    // 153
                                                                                                                       //
		return deny;                                                                                                         //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.ensureIndex = function () {                                                                      //
		function ensureIndex() {                                                                                             //
			var _model7;                                                                                                        // 155
                                                                                                                       //
			return (_model7 = this.model)._ensureIndex.apply(_model7, arguments);                                               // 156
		}                                                                                                                    // 157
                                                                                                                       //
		return ensureIndex;                                                                                                  //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.dropIndex = function () {                                                                        //
		function dropIndex() {                                                                                               //
			var _model8;                                                                                                        // 159
                                                                                                                       //
			return (_model8 = this.model)._dropIndex.apply(_model8, arguments);                                                 // 160
		}                                                                                                                    // 161
                                                                                                                       //
		return dropIndex;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.tryEnsureIndex = function () {                                                                   //
		function tryEnsureIndex() {                                                                                          //
			try {                                                                                                               // 164
				return this.ensureIndex.apply(this, arguments);                                                                    // 165
			} catch (e) {                                                                                                       // 166
				console.log(e);                                                                                                    // 167
			}                                                                                                                   // 168
		}                                                                                                                    // 169
                                                                                                                       //
		return tryEnsureIndex;                                                                                               //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.tryDropIndex = function () {                                                                     //
		function tryDropIndex() {                                                                                            //
			try {                                                                                                               // 172
				return this.dropIndex.apply(this, arguments);                                                                      // 173
			} catch (e) {                                                                                                       // 174
				console.log(e);                                                                                                    // 175
			}                                                                                                                   // 176
		}                                                                                                                    // 177
                                                                                                                       //
		return tryDropIndex;                                                                                                 //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.getChangedRecords = function () {                                                                //
		function getChangedRecords(type, recordOrQuery, fields) {                                                            //
			if (type === 'insert') {                                                                                            // 180
				return [recordOrQuery];                                                                                            // 181
			}                                                                                                                   // 182
                                                                                                                       //
			if (type === 'remove') {                                                                                            // 184
				return recordOrQuery;                                                                                              // 185
			}                                                                                                                   // 186
                                                                                                                       //
			if (type === 'update') {                                                                                            // 188
				var options = {};                                                                                                  // 189
				if (fields) {                                                                                                      // 190
					options.fields = fields;                                                                                          // 191
				}                                                                                                                  // 192
				return this.find(recordOrQuery, options).fetch();                                                                  // 193
			}                                                                                                                   // 194
		}                                                                                                                    // 195
                                                                                                                       //
		return getChangedRecords;                                                                                            //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.trashFind = function () {                                                                        //
		function trashFind(query, options) {                                                                                 //
			query.__collection__ = this.name;                                                                                   // 198
                                                                                                                       //
			return trash.find(query, options);                                                                                  // 200
		}                                                                                                                    // 201
                                                                                                                       //
		return trashFind;                                                                                                    //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.trashFindDeletedAfter = function () {                                                            //
		function trashFindDeletedAfter(deletedAt) {                                                                          //
			var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};                                 // 203
			var options = arguments[2];                                                                                         // 203
                                                                                                                       //
			query.__collection__ = this.name;                                                                                   // 204
			query._deletedAt = {                                                                                                // 205
				$gt: deletedAt                                                                                                     // 206
			};                                                                                                                  // 205
                                                                                                                       //
			return trash.find(query, options);                                                                                  // 209
		}                                                                                                                    // 210
                                                                                                                       //
		return trashFindDeletedAfter;                                                                                        //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.dinamicTrashFindAfter = function () {                                                            //
		function dinamicTrashFindAfter(method, deletedAt) {                                                                  //
			var _this2 = this;                                                                                                  // 212
                                                                                                                       //
			var scope = {                                                                                                       // 213
				find: function () {                                                                                                // 214
					function find() {                                                                                                 // 214
						var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                              // 214
                                                                                                                       //
						return _this2.trashFindDeletedAfter(deletedAt, query, { fields: { _id: 1, _deletedAt: 1 } });                    // 215
					}                                                                                                                 // 216
                                                                                                                       //
					return find;                                                                                                      // 214
				}()                                                                                                                // 214
			};                                                                                                                  // 213
                                                                                                                       //
			scope.model = {                                                                                                     // 219
				find: scope.find                                                                                                   // 220
			};                                                                                                                  // 219
                                                                                                                       //
			for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {    // 212
				args[_key2 - 2] = arguments[_key2];                                                                                // 212
			}                                                                                                                   // 212
                                                                                                                       //
			return this[method].apply(scope, args);                                                                             // 223
		}                                                                                                                    // 224
                                                                                                                       //
		return dinamicTrashFindAfter;                                                                                        //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.dinamicFindAfter = function () {                                                                 //
		function dinamicFindAfter(method, updatedAt) {                                                                       //
			var _this3 = this;                                                                                                  // 226
                                                                                                                       //
			var scope = {                                                                                                       // 227
				find: function () {                                                                                                // 228
					function find() {                                                                                                 // 228
						var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};                              // 228
						var options = arguments[1];                                                                                      // 228
                                                                                                                       //
						query._updatedAt = {                                                                                             // 229
							$gt: updatedAt                                                                                                  // 230
						};                                                                                                               // 229
                                                                                                                       //
						return _this3.find(query, options);                                                                              // 233
					}                                                                                                                 // 234
                                                                                                                       //
					return find;                                                                                                      // 228
				}()                                                                                                                // 228
			};                                                                                                                  // 227
                                                                                                                       //
			scope.model = {                                                                                                     // 237
				find: scope.find                                                                                                   // 238
			};                                                                                                                  // 237
                                                                                                                       //
			for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {    // 226
				args[_key3 - 2] = arguments[_key3];                                                                                // 226
			}                                                                                                                   // 226
                                                                                                                       //
			return this[method].apply(scope, args);                                                                             // 241
		}                                                                                                                    // 242
                                                                                                                       //
		return dinamicFindAfter;                                                                                             //
	}();                                                                                                                  //
                                                                                                                       //
	ModelsBase.prototype.dinamicFindChangesAfter = function () {                                                          //
		function dinamicFindChangesAfter(method, updatedAt) {                                                                //
			for (var _len4 = arguments.length, args = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {    // 244
				args[_key4 - 2] = arguments[_key4];                                                                                // 244
			}                                                                                                                   // 244
                                                                                                                       //
			return {                                                                                                            // 245
				update: this.dinamicFindAfter.apply(this, [method, updatedAt].concat(args)).fetch(),                               // 246
				remove: this.dinamicTrashFindAfter.apply(this, [method, updatedAt].concat(args)).fetch()                           // 247
			};                                                                                                                  // 245
		}                                                                                                                    // 249
                                                                                                                       //
		return dinamicFindChangesAfter;                                                                                      //
	}();                                                                                                                  //
                                                                                                                       //
	_createClass(ModelsBase, [{                                                                                           //
		key: 'baseName',                                                                                                     //
		get: function () {                                                                                                   //
			function get() {                                                                                                    //
				return baseName;                                                                                                   // 31
			}                                                                                                                   // 32
                                                                                                                       //
			return get;                                                                                                         //
		}()                                                                                                                  //
	}]);                                                                                                                  //
                                                                                                                       //
	return ModelsBase;                                                                                                    //
}(EventEmitter);                                                                                                       //
                                                                                                                       //
RocketChat.models._Base = ModelsBase;                                                                                  // 253
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"Messages.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Messages.coffee.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
RocketChat.models.Messages = new ((function(superClass) {                                                              // 1
  extend(_Class, superClass);                                                                                          //
                                                                                                                       //
  function _Class() {                                                                                                  //
    _Class.__super__.constructor.call(this, 'message');                                                                //
    this.tryEnsureIndex({                                                                                              //
      'rid': 1,                                                                                                        //
      'ts': 1                                                                                                          //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'ts': 1                                                                                                          //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'u._id': 1                                                                                                       //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'editedAt': 1                                                                                                    //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'editedBy._id': 1                                                                                                //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'rid': 1,                                                                                                        //
      't': 1,                                                                                                          //
      'u._id': 1                                                                                                       //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'expireAt': 1                                                                                                    //
    }, {                                                                                                               //
      expireAfterSeconds: 0                                                                                            //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'msg': 'text'                                                                                                    //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'file._id': 1                                                                                                    //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'mentions.username': 1                                                                                           //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'pinned': 1                                                                                                      //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'location': '2dsphere'                                                                                           //
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  _Class.prototype.findOneById = function(_id, options) {                                                              //
    var query;                                                                                                         // 21
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 24
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findByMention = function(username, options) {                                                       //
    var query;                                                                                                         // 28
    query = {                                                                                                          //
      "mentions.username": username                                                                                    //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 31
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByMentionAndRoomId = function(username, rid, options) {                                  //
    var query;                                                                                                         // 34
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      "mentions.username": username,                                                                                   //
      "rid": rid                                                                                                       //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 39
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomId = function(roomId, options) {                                                   //
    var query;                                                                                                         // 42
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 48
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdNotContainingTypes = function(roomId, types, options) {                          //
    var query;                                                                                                         // 51
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    if (Match.test(types, [String]) && types.length > 0) {                                                             //
      query.t = {                                                                                                      //
        $nin: types                                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
    return this.find(query, options);                                                                                  // 61
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findInvisibleByRoomId = function(roomId, options) {                                                 //
    var query;                                                                                                         // 64
    query = {                                                                                                          //
      _hidden: true,                                                                                                   //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 68
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdAfterTimestamp = function(roomId, timestamp, options) {                          //
    var query;                                                                                                         // 71
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId,                                                                                                     //
      ts: {                                                                                                            //
        $gt: timestamp                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 78
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBeforeTimestamp = function(roomId, timestamp, options) {                         //
    var query;                                                                                                         // 81
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId,                                                                                                     //
      ts: {                                                                                                            //
        $lt: timestamp                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 88
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBetweenTimestamps = function(roomId, afterTimestamp, beforeTimestamp, options) {
    var query;                                                                                                         // 91
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId,                                                                                                     //
      ts: {                                                                                                            //
        $gt: afterTimestamp,                                                                                           //
        $lt: beforeTimestamp                                                                                           //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 99
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBeforeTimestampNotContainingTypes = function(roomId, timestamp, types, options) {
    var query;                                                                                                         // 102
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId,                                                                                                     //
      ts: {                                                                                                            //
        $lt: timestamp                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    if (Match.test(types, [String]) && types.length > 0) {                                                             //
      query.t = {                                                                                                      //
        $nin: types                                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
    return this.find(query, options);                                                                                  // 113
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleByRoomIdBetweenTimestampsNotContainingTypes = function(roomId, afterTimestamp, beforeTimestamp, types, options) {
    var query;                                                                                                         // 116
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      rid: roomId,                                                                                                     //
      ts: {                                                                                                            //
        $gt: afterTimestamp,                                                                                           //
        $lt: beforeTimestamp                                                                                           //
      }                                                                                                                //
    };                                                                                                                 //
    if (Match.test(types, [String]) && types.length > 0) {                                                             //
      query.t = {                                                                                                      //
        $nin: types                                                                                                    //
      };                                                                                                               //
    }                                                                                                                  //
    return this.find(query, options);                                                                                  // 128
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findVisibleCreatedOrEditedAfterTimestamp = function(timestamp, options) {                           //
    var query;                                                                                                         // 131
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      $or: [                                                                                                           //
        {                                                                                                              //
          ts: {                                                                                                        //
            $gt: timestamp                                                                                             //
          }                                                                                                            //
        }, {                                                                                                           //
          'editedAt': {                                                                                                //
            $gt: timestamp                                                                                             //
          }                                                                                                            //
        }                                                                                                              //
      ]                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 141
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findStarredByUserAtRoom = function(userId, roomId, options) {                                       //
    var query;                                                                                                         // 144
    query = {                                                                                                          //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      'starred._id': userId,                                                                                           //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 149
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findPinnedByRoom = function(roomId, options) {                                                      //
    var query;                                                                                                         // 152
    query = {                                                                                                          //
      t: {                                                                                                             //
        $ne: 'rm'                                                                                                      //
      },                                                                                                               //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      pinned: true,                                                                                                    //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 158
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.getLastTimestamp = function(options) {                                                              //
    var query, ref, ref1, ref2;                                                                                        // 161
    if (options == null) {                                                                                             //
      options = {};                                                                                                    //
    }                                                                                                                  //
    query = {                                                                                                          //
      ts: {                                                                                                            //
        $exists: 1                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    options.sort = {                                                                                                   //
      ts: -1                                                                                                           //
    };                                                                                                                 //
    options.limit = 1;                                                                                                 //
    return (ref = this.find(query, options)) != null ? typeof ref.fetch === "function" ? (ref1 = ref.fetch()) != null ? (ref2 = ref1[0]) != null ? ref2.ts : void 0 : void 0 : void 0 : void 0;
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findByRoomIdAndMessageIds = function(rid, messageIds, options) {                                    //
    var query;                                                                                                         // 168
    query = {                                                                                                          //
      rid: rid,                                                                                                        //
      _id: {                                                                                                           //
        $in: messageIds                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 173
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.cloneAndSaveAsHistoryById = function(_id) {                                                         //
    var me, record;                                                                                                    // 176
    me = RocketChat.models.Users.findOneById(Meteor.userId());                                                         //
    record = this.findOneById(_id);                                                                                    //
    record._hidden = true;                                                                                             //
    record.parent = record._id;                                                                                        //
    record.editedAt = new Date;                                                                                        //
    record.editedBy = {                                                                                                //
      _id: Meteor.userId(),                                                                                            //
      username: me.username                                                                                            //
    };                                                                                                                 //
    delete record._id;                                                                                                 //
    return this.insert(record);                                                                                        // 185
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.setHiddenById = function(_id, hidden) {                                                             //
    var query, update;                                                                                                 // 189
    if (hidden == null) {                                                                                              //
      hidden = true;                                                                                                   //
    }                                                                                                                  //
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        _hidden: hidden                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 196
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.setAsDeletedByIdAndUser = function(_id, user) {                                                     //
    var query, update;                                                                                                 // 199
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        msg: '',                                                                                                       //
        t: 'rm',                                                                                                       //
        urls: [],                                                                                                      //
        mentions: [],                                                                                                  //
        attachments: [],                                                                                               //
        editedAt: new Date(),                                                                                          //
        editedBy: {                                                                                                    //
          _id: user._id,                                                                                               //
          username: user.username                                                                                      //
        }                                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 214
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.setPinnedByIdAndUserId = function(_id, pinnedBy, pinned, pinnedAt) {                                //
    var query, update;                                                                                                 // 217
    if (pinned == null) {                                                                                              //
      pinned = true;                                                                                                   //
    }                                                                                                                  //
    if (pinnedAt == null) {                                                                                            //
      pinnedAt = 0;                                                                                                    //
    }                                                                                                                  //
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        pinned: pinned,                                                                                                //
        pinnedAt: pinnedAt || new Date,                                                                                //
        pinnedBy: pinnedBy                                                                                             //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 226
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.setUrlsById = function(_id, urls) {                                                                 //
    var query, update;                                                                                                 // 229
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        urls: urls                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 236
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.updateAllUsernamesByUserId = function(userId, username) {                                           //
    var query, update;                                                                                                 // 239
    query = {                                                                                                          //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "u.username": username                                                                                         //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 246
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.updateUsernameOfEditByUserId = function(userId, username) {                                         //
    var query, update;                                                                                                 // 249
    query = {                                                                                                          //
      'editedBy._id': userId                                                                                           //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "editedBy.username": username                                                                                  //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 256
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.updateUsernameAndMessageOfMentionByIdAndOldUsername = function(_id, oldUsername, newUsername, newMessage) {
    var query, update;                                                                                                 // 259
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      "mentions.username": oldUsername                                                                                 //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "mentions.$.username": newUsername,                                                                            //
        "msg": newMessage                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 268
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.updateUserStarById = function(_id, userId, starred) {                                               //
    var query, update;                                                                                                 // 271
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    if (starred) {                                                                                                     //
      update = {                                                                                                       //
        $addToSet: {                                                                                                   //
          starred: {                                                                                                   //
            _id: userId                                                                                                //
          }                                                                                                            //
        }                                                                                                              //
      };                                                                                                               //
    } else {                                                                                                           //
      update = {                                                                                                       //
        $pull: {                                                                                                       //
          starred: {                                                                                                   //
            _id: Meteor.userId()                                                                                       //
          }                                                                                                            //
        }                                                                                                              //
      };                                                                                                               //
    }                                                                                                                  //
    return this.update(query, update);                                                                                 // 283
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.upgradeEtsToEditAt = function() {                                                                   //
    var query, update;                                                                                                 // 286
    query = {                                                                                                          //
      ets: {                                                                                                           //
        $exists: 1                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $rename: {                                                                                                       //
        "ets": "editedAt"                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 293
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.setMessageAttachments = function(_id, attachments) {                                                //
    var query, update;                                                                                                 // 296
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        attachments: attachments                                                                                       //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 303
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createWithTypeRoomIdMessageAndUser = function(type, roomId, message, user, extraData) {             //
    var record, room;                                                                                                  // 308
    room = RocketChat.models.Rooms.findOneById(roomId, {                                                               //
      fields: {                                                                                                        //
        sysMes: 1                                                                                                      //
      }                                                                                                                //
    });                                                                                                                //
    if ((room != null ? room.sysMes : void 0) === false) {                                                             //
      return;                                                                                                          // 310
    }                                                                                                                  //
    record = {                                                                                                         //
      t: type,                                                                                                         //
      rid: roomId,                                                                                                     //
      ts: new Date,                                                                                                    //
      msg: message,                                                                                                    //
      u: {                                                                                                             //
        _id: user._id,                                                                                                 //
        username: user.username                                                                                        //
      },                                                                                                               //
      groupable: false                                                                                                 //
    };                                                                                                                 //
    _.extend(record, extraData);                                                                                       //
    record._id = this.insertOrUpsert(record);                                                                          //
    return record;                                                                                                     // 324
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createUserJoinWithRoomIdAndUser = function(roomId, user, extraData) {                               //
    var message;                                                                                                       // 327
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);                            // 328
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createUserLeaveWithRoomIdAndUser = function(roomId, user, extraData) {                              //
    var message;                                                                                                       // 331
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);                            // 332
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createUserRemovedWithRoomIdAndUser = function(roomId, user, extraData) {                            //
    var message;                                                                                                       // 335
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);                            // 336
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createUserAddedWithRoomIdAndUser = function(roomId, user, extraData) {                              //
    var message;                                                                                                       // 339
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);                            // 340
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createCommandWithRoomIdAndUser = function(command, roomId, user, extraData) {                       //
    return this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);                       // 343
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createUserMutedWithRoomIdAndUser = function(roomId, user, extraData) {                              //
    var message;                                                                                                       // 346
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);                    // 347
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createUserUnmutedWithRoomIdAndUser = function(roomId, user, extraData) {                            //
    var message;                                                                                                       // 350
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);                  // 351
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createNewModeratorWithRoomIdAndUser = function(roomId, user, extraData) {                           //
    var message;                                                                                                       // 354
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);                 // 355
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createModeratorRemovedWithRoomIdAndUser = function(roomId, user, extraData) {                       //
    var message;                                                                                                       // 358
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);             // 359
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createNewOwnerWithRoomIdAndUser = function(roomId, user, extraData) {                               //
    var message;                                                                                                       // 362
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);                     // 363
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createOwnerRemovedWithRoomIdAndUser = function(roomId, user, extraData) {                           //
    var message;                                                                                                       // 366
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);                 // 367
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createSubscriptionRoleAddedWithRoomIdAndUser = function(roomId, user, extraData) {                  //
    var message;                                                                                                       // 370
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);       // 371
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.createSubscriptionRoleRemovedWithRoomIdAndUser = function(roomId, user, extraData) {                //
    var message;                                                                                                       // 374
    message = user.username;                                                                                           //
    return this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);     // 375
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.removeById = function(_id) {                                                                        //
    var query;                                                                                                         // 379
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 382
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.removeByRoomId = function(roomId) {                                                                 //
    var query;                                                                                                         // 385
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 388
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.removeByUserId = function(userId) {                                                                 //
    var query;                                                                                                         // 391
    query = {                                                                                                          //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 394
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.getMessageByFileId = function(fileID) {                                                             //
    return this.findOne({                                                                                              // 397
      'file._id': fileID                                                                                               //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  return _Class;                                                                                                       //
                                                                                                                       //
})(RocketChat.models._Base));                                                                                          //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Reports.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Reports.coffee.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
RocketChat.models.Reports = new ((function(superClass) {                                                               // 1
  extend(_Class, superClass);                                                                                          //
                                                                                                                       //
  function _Class() {                                                                                                  //
    _Class.__super__.constructor.call(this, 'reports');                                                                //
  }                                                                                                                    //
                                                                                                                       //
  _Class.prototype.createWithMessageDescriptionAndUserId = function(message, description, userId, extraData) {         //
    var record;                                                                                                        // 8
    record = {                                                                                                         //
      message: message,                                                                                                //
      description: description,                                                                                        //
      ts: new Date(),                                                                                                  //
      userId: userId                                                                                                   //
    };                                                                                                                 //
    _.extend(record, extraData);                                                                                       //
    record._id = this.insert(record);                                                                                  //
    return record;                                                                                                     // 17
  };                                                                                                                   //
                                                                                                                       //
  return _Class;                                                                                                       //
                                                                                                                       //
})(RocketChat.models._Base));                                                                                          //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Rooms.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Rooms.coffee.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelRooms,                                                                                                        // 1
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
ModelRooms = (function(superClass) {                                                                                   // 1
  extend(ModelRooms, superClass);                                                                                      //
                                                                                                                       //
  function ModelRooms() {                                                                                              //
    ModelRooms.__super__.constructor.apply(this, arguments);                                                           //
    this.tryEnsureIndex({                                                                                              //
      'name': 1                                                                                                        //
    }, {                                                                                                               //
      unique: 1,                                                                                                       //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'default': 1                                                                                                     //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'usernames': 1                                                                                                   //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      't': 1                                                                                                           //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'u._id': 1                                                                                                       //
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  ModelRooms.prototype.findOneById = function(_id, options) {                                                          //
    var query;                                                                                                         // 13
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 16
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findOneByIdOrName = function(_idOrName, options) {                                              //
    var query;                                                                                                         // 19
    query = {                                                                                                          //
      $or: [                                                                                                           //
        {                                                                                                              //
          _id: _idOrName                                                                                               //
        }, {                                                                                                           //
          name: _idOrName                                                                                              //
        }                                                                                                              //
      ]                                                                                                                //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 27
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findOneByImportId = function(_id, options) {                                                    //
    var query;                                                                                                         // 30
    query = {                                                                                                          //
      importIds: _id                                                                                                   //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 33
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findOneByName = function(name, options) {                                                       //
    var query;                                                                                                         // 36
    query = {                                                                                                          //
      name: name                                                                                                       //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 39
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findOneByNameAndType = function(name, type, options) {                                          //
    var query;                                                                                                         // 42
    query = {                                                                                                          //
      name: name,                                                                                                      //
      t: type                                                                                                          //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 46
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findOneByIdContainigUsername = function(_id, username, options) {                               //
    var query;                                                                                                         // 49
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      usernames: username                                                                                              //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 53
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findOneByNameAndTypeNotContainigUsername = function(name, type, username, options) {            //
    var query;                                                                                                         // 56
    query = {                                                                                                          //
      name: name,                                                                                                      //
      t: type,                                                                                                         //
      usernames: {                                                                                                     //
        $ne: username                                                                                                  //
      }                                                                                                                //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 62
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findById = function(roomId, options) {                                                          //
    return this.find({                                                                                                 // 68
      _id: roomId                                                                                                      //
    }, options);                                                                                                       //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByIds = function(roomIds, options) {                                                        //
    return this.find({                                                                                                 // 71
      _id: {                                                                                                           //
        $in: [].concat(roomIds)                                                                                        //
      }                                                                                                                //
    }, options);                                                                                                       //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByType = function(type, options) {                                                          //
    var query;                                                                                                         // 74
    query = {                                                                                                          //
      t: type                                                                                                          //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 77
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypes = function(types, options) {                                                        //
    var query;                                                                                                         // 80
    query = {                                                                                                          //
      t: {                                                                                                             //
        $in: types                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 84
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByUserId = function(userId, options) {                                                      //
    var query;                                                                                                         // 87
    query = {                                                                                                          //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 90
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByNameContaining = function(name, options) {                                                //
    var nameRegex, query;                                                                                              // 93
    nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), "i");                                                         //
    query = {                                                                                                          //
      $or: [                                                                                                           //
        {                                                                                                              //
          name: nameRegex                                                                                              //
        }, {                                                                                                           //
          t: 'd',                                                                                                      //
          usernames: nameRegex                                                                                         //
        }                                                                                                              //
      ]                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 103
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByNameContainingTypesWithUsername = function(name, types, options) {                        //
    var $or, i, len, nameRegex, obj, query, type;                                                                      // 106
    nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), "i");                                                         //
    $or = [];                                                                                                          //
    for (i = 0, len = types.length; i < len; i++) {                                                                    // 109
      type = types[i];                                                                                                 //
      obj = {                                                                                                          //
        name: nameRegex,                                                                                               //
        t: type.type                                                                                                   //
      };                                                                                                               //
      if (type.username != null) {                                                                                     //
        obj.usernames = type.username;                                                                                 //
      }                                                                                                                //
      if (type.ids != null) {                                                                                          //
        obj._id = {                                                                                                    //
          $in: type.ids                                                                                                //
        };                                                                                                             //
      }                                                                                                                //
      $or.push(obj);                                                                                                   //
    }                                                                                                                  // 109
    query = {                                                                                                          //
      $or: $or                                                                                                         //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 120
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findContainingTypesWithUsername = function(types, options) {                                    //
    var $or, i, len, obj, query, type;                                                                                 // 124
    $or = [];                                                                                                          //
    for (i = 0, len = types.length; i < len; i++) {                                                                    // 125
      type = types[i];                                                                                                 //
      obj = {                                                                                                          //
        t: type.type                                                                                                   //
      };                                                                                                               //
      if (type.username != null) {                                                                                     //
        obj.usernames = type.username;                                                                                 //
      }                                                                                                                //
      if (type.ids != null) {                                                                                          //
        obj._id = {                                                                                                    //
          $in: type.ids                                                                                                //
        };                                                                                                             //
      }                                                                                                                //
      $or.push(obj);                                                                                                   //
    }                                                                                                                  // 125
    query = {                                                                                                          //
      $or: $or                                                                                                         //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 136
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByNameContainingAndTypes = function(name, types, options) {                                 //
    var nameRegex, query;                                                                                              // 139
    nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), "i");                                                         //
    query = {                                                                                                          //
      t: {                                                                                                             //
        $in: types                                                                                                     //
      },                                                                                                               //
      $or: [                                                                                                           //
        {                                                                                                              //
          name: nameRegex                                                                                              //
        }, {                                                                                                           //
          t: 'd',                                                                                                      //
          usernames: nameRegex                                                                                         //
        }                                                                                                              //
      ]                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 151
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByNameAndTypeNotContainingUsername = function(name, type, username, options) {              //
    var query;                                                                                                         // 154
    query = {                                                                                                          //
      t: type,                                                                                                         //
      name: name,                                                                                                      //
      usernames: {                                                                                                     //
        $ne: username                                                                                                  //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 160
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByNameStartingAndTypes = function(name, types, options) {                                   //
    var nameRegex, query;                                                                                              // 163
    nameRegex = new RegExp("^" + s.trim(s.escapeRegExp(name)), "i");                                                   //
    query = {                                                                                                          //
      t: {                                                                                                             //
        $in: types                                                                                                     //
      },                                                                                                               //
      $or: [                                                                                                           //
        {                                                                                                              //
          name: nameRegex                                                                                              //
        }, {                                                                                                           //
          t: 'd',                                                                                                      //
          usernames: nameRegex                                                                                         //
        }                                                                                                              //
      ]                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 175
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByDefaultAndTypes = function(defaultValue, types, options) {                                //
    var query;                                                                                                         // 178
    query = {                                                                                                          //
      "default": defaultValue,                                                                                         //
      t: {                                                                                                             //
        $in: types                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 183
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypeContainigUsername = function(type, username, options) {                               //
    var query;                                                                                                         // 186
    query = {                                                                                                          //
      t: type,                                                                                                         //
      usernames: username                                                                                              //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 190
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypeContainigUsernames = function(type, username, options) {                              //
    var query;                                                                                                         // 193
    query = {                                                                                                          //
      t: type,                                                                                                         //
      usernames: {                                                                                                     //
        $all: [].concat(username)                                                                                      //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 197
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypesAndNotUserIdContainingUsername = function(types, userId, username, options) {        //
    var query;                                                                                                         // 200
    query = {                                                                                                          //
      t: {                                                                                                             //
        $in: types                                                                                                     //
      },                                                                                                               //
      uid: {                                                                                                           //
        $ne: userId                                                                                                    //
      },                                                                                                               //
      usernames: username                                                                                              //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 207
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByContainigUsername = function(username, options) {                                         //
    var query;                                                                                                         // 210
    query = {                                                                                                          //
      usernames: username                                                                                              //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 213
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypeAndName = function(type, name, options) {                                             //
    var query;                                                                                                         // 216
    query = {                                                                                                          //
      name: name,                                                                                                      //
      t: type                                                                                                          //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 220
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypeAndNameContainingUsername = function(type, name, username, options) {                 //
    var query;                                                                                                         // 223
    query = {                                                                                                          //
      name: name,                                                                                                      //
      t: type,                                                                                                         //
      usernames: username                                                                                              //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 228
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.findByTypeAndArchivationState = function(type, archivationstate, options) {                     //
    var query;                                                                                                         // 231
    query = {                                                                                                          //
      t: type                                                                                                          //
    };                                                                                                                 //
    if (archivationstate) {                                                                                            //
      query.archived = true;                                                                                           //
    } else {                                                                                                           //
      query.archived = {                                                                                               //
        $ne: true                                                                                                      //
      };                                                                                                               //
    }                                                                                                                  //
    return this.find(query, options);                                                                                  // 239
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.archiveById = function(_id) {                                                                   //
    var query, update;                                                                                                 // 243
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        archived: true                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 250
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.unarchiveById = function(_id) {                                                                 //
    var query, update;                                                                                                 // 253
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        archived: false                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 260
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.addUsernameById = function(_id, username, muted) {                                              //
    var query, update;                                                                                                 // 263
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $addToSet: {                                                                                                     //
        usernames: username                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    if (muted) {                                                                                                       //
      update.$addToSet.muted = username;                                                                               //
    }                                                                                                                  //
    return this.update(query, update);                                                                                 // 273
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.addUsernamesById = function(_id, usernames) {                                                   //
    var query, update;                                                                                                 // 276
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $addToSet: {                                                                                                     //
        usernames: {                                                                                                   //
          $each: usernames                                                                                             //
        }                                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 284
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.addUsernameByName = function(name, username) {                                                  //
    var query, update;                                                                                                 // 287
    query = {                                                                                                          //
      name: name                                                                                                       //
    };                                                                                                                 //
    update = {                                                                                                         //
      $addToSet: {                                                                                                     //
        usernames: username                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 294
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.removeUsernameById = function(_id, username) {                                                  //
    var query, update;                                                                                                 // 297
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $pull: {                                                                                                         //
        usernames: username                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 304
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.removeUsernamesById = function(_id, usernames) {                                                //
    var query, update;                                                                                                 // 307
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $pull: {                                                                                                         //
        usernames: {                                                                                                   //
          $in: usernames                                                                                               //
        }                                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 315
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.removeUsernameFromAll = function(username) {                                                    //
    var query, update;                                                                                                 // 318
    query = {                                                                                                          //
      usernames: username                                                                                              //
    };                                                                                                                 //
    update = {                                                                                                         //
      $pull: {                                                                                                         //
        usernames: username                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 325
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.removeUsernameByName = function(name, username) {                                               //
    var query, update;                                                                                                 // 328
    query = {                                                                                                          //
      name: name                                                                                                       //
    };                                                                                                                 //
    update = {                                                                                                         //
      $pull: {                                                                                                         //
        usernames: username                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 335
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.setNameById = function(_id, name) {                                                             //
    var query, update;                                                                                                 // 338
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        name: name                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 345
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.incMsgCountAndSetLastMessageTimestampById = function(_id, inc, lastMessageTimestamp) {          //
    var query, update;                                                                                                 // 348
    if (inc == null) {                                                                                                 //
      inc = 1;                                                                                                         //
    }                                                                                                                  //
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        lm: lastMessageTimestamp                                                                                       //
      },                                                                                                               //
      $inc: {                                                                                                          //
        msgs: inc                                                                                                      //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 357
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.replaceUsername = function(previousUsername, username) {                                        //
    var query, update;                                                                                                 // 360
    query = {                                                                                                          //
      usernames: previousUsername                                                                                      //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "usernames.$": username                                                                                        //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 367
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.replaceMutedUsername = function(previousUsername, username) {                                   //
    var query, update;                                                                                                 // 370
    query = {                                                                                                          //
      muted: previousUsername                                                                                          //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "muted.$": username                                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 377
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.replaceUsernameOfUserByUserId = function(userId, username) {                                    //
    var query, update;                                                                                                 // 380
    query = {                                                                                                          //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "u.username": username                                                                                         //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 387
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.setJoinCodeById = function(_id, joinCode) {                                                     //
    var query, update;                                                                                                 // 390
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    if ((joinCode != null ? joinCode.trim() : void 0) !== '') {                                                        //
      update = {                                                                                                       //
        $set: {                                                                                                        //
          joinCodeRequired: true,                                                                                      //
          joinCode: joinCode                                                                                           //
        }                                                                                                              //
      };                                                                                                               //
    } else {                                                                                                           //
      update = {                                                                                                       //
        $set: {                                                                                                        //
          joinCodeRequired: false                                                                                      //
        },                                                                                                             //
        $unset: {                                                                                                      //
          joinCode: 1                                                                                                  //
        }                                                                                                              //
      };                                                                                                               //
    }                                                                                                                  //
    return this.update(query, update);                                                                                 // 405
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.setUserById = function(_id, user) {                                                             //
    var query, update;                                                                                                 // 408
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        u: {                                                                                                           //
          _id: user._id,                                                                                               //
          username: user.username                                                                                      //
        }                                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 417
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.setTypeById = function(_id, type) {                                                             //
    var query, update;                                                                                                 // 420
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        t: type                                                                                                        //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 427
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.setTopicById = function(_id, topic) {                                                           //
    var query, update;                                                                                                 // 430
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        topic: topic                                                                                                   //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 437
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.muteUsernameByRoomId = function(_id, username) {                                                //
    var query, update;                                                                                                 // 440
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $addToSet: {                                                                                                     //
        muted: username                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 447
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.unmuteUsernameByRoomId = function(_id, username) {                                              //
    var query, update;                                                                                                 // 450
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $pull: {                                                                                                         //
        muted: username                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 457
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.saveDefaultById = function(_id, defaultValue) {                                                 //
    var query, update;                                                                                                 // 460
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "default": defaultValue === 'true'                                                                             //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 467
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.saveRoomById = function(_id, data) {                                                            //
    var setData, unsetData, update;                                                                                    // 470
    setData = {};                                                                                                      //
    unsetData = {};                                                                                                    //
    if (data.topic != null) {                                                                                          //
      if (!_.isEmpty(s.trim(data.topic))) {                                                                            //
        setData.topic = s.trim(data.topic);                                                                            //
      } else {                                                                                                         //
        unsetData.topic = 1;                                                                                           //
      }                                                                                                                //
    }                                                                                                                  //
    if (data.tags != null) {                                                                                           //
      if (!_.isEmpty(s.trim(data.tags))) {                                                                             //
        setData.tags = s.trim(data.tags).split(',').map((function(_this) {                                             //
          return function(tag) {                                                                                       //
            return s.trim(tag);                                                                                        // 481
          };                                                                                                           //
        })(this));                                                                                                     //
      } else {                                                                                                         //
        unsetData.tags = 1;                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    update = {};                                                                                                       //
    if (!_.isEmpty(setData)) {                                                                                         //
      update.$set = setData;                                                                                           //
    }                                                                                                                  //
    if (!_.isEmpty(unsetData)) {                                                                                       //
      update.$unset = unsetData;                                                                                       //
    }                                                                                                                  //
    return this.update({                                                                                               // 493
      _id: _id                                                                                                         //
    }, update);                                                                                                        //
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.createWithTypeNameUserAndUsernames = function(type, name, user, usernames, extraData) {         //
    var room;                                                                                                          // 497
    room = {                                                                                                           //
      name: name,                                                                                                      //
      t: type,                                                                                                         //
      usernames: usernames,                                                                                            //
      msgs: 0,                                                                                                         //
      u: {                                                                                                             //
        _id: user._id,                                                                                                 //
        username: user.username                                                                                        //
      }                                                                                                                //
    };                                                                                                                 //
    _.extend(room, extraData);                                                                                         //
    room._id = this.insert(room);                                                                                      //
    return room;                                                                                                       // 509
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.createWithIdTypeAndName = function(_id, type, name, extraData) {                                //
    var room;                                                                                                          // 512
    room = {                                                                                                           //
      _id: _id,                                                                                                        //
      ts: new Date(),                                                                                                  //
      t: type,                                                                                                         //
      name: name,                                                                                                      //
      usernames: [],                                                                                                   //
      msgs: 0                                                                                                          //
    };                                                                                                                 //
    _.extend(room, extraData);                                                                                         //
    this.insert(room);                                                                                                 //
    return room;                                                                                                       // 523
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.removeById = function(_id) {                                                                    //
    var query;                                                                                                         // 528
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 531
  };                                                                                                                   //
                                                                                                                       //
  ModelRooms.prototype.removeByTypeContainingUsername = function(type, username) {                                     //
    var query;                                                                                                         // 534
    query = {                                                                                                          //
      t: type,                                                                                                         //
      usernames: username                                                                                              //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 538
  };                                                                                                                   //
                                                                                                                       //
  return ModelRooms;                                                                                                   //
                                                                                                                       //
})(RocketChat.models._Base);                                                                                           //
                                                                                                                       //
RocketChat.models.Rooms = new ModelRooms('room');                                                                      // 540
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Settings.coffee.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelSettings,                                                                                                     // 1
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
ModelSettings = (function(superClass) {                                                                                // 1
  extend(ModelSettings, superClass);                                                                                   //
                                                                                                                       //
  function ModelSettings() {                                                                                           //
    ModelSettings.__super__.constructor.apply(this, arguments);                                                        //
    this.tryEnsureIndex({                                                                                              //
      'blocked': 1                                                                                                     //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'hidden': 1                                                                                                      //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  ModelSettings.prototype.findOneById = function(_id, options) {                                                       //
    var query;                                                                                                         // 10
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               // 13
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findById = function(_id) {                                                                   //
    var query;                                                                                                         // 17
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.find(query);                                                                                           // 20
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findOneNotHiddenById = function(_id) {                                                       //
    var query;                                                                                                         // 23
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      }                                                                                                                //
    };                                                                                                                 //
    return this.findOne(query);                                                                                        // 27
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findByIds = function(_id) {                                                                  //
    var query;                                                                                                         // 30
    if (_id == null) {                                                                                                 //
      _id = [];                                                                                                        //
    }                                                                                                                  //
    _id = [].concat(_id);                                                                                              //
    query = {                                                                                                          //
      _id: {                                                                                                           //
        $in: _id                                                                                                       //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query);                                                                                           // 36
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findByRole = function(role, options) {                                                       //
    var query;                                                                                                         // 39
    query = {                                                                                                          //
      role: role                                                                                                       //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 42
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findPublic = function(options) {                                                             //
    var query;                                                                                                         // 45
    query = {                                                                                                          //
      "public": true                                                                                                   //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 48
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenPublic = function(ids) {                                                        //
    var filter;                                                                                                        // 51
    if (ids == null) {                                                                                                 //
      ids = [];                                                                                                        //
    }                                                                                                                  //
    filter = {                                                                                                         //
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      },                                                                                                               //
      "public": true                                                                                                   //
    };                                                                                                                 //
    if (ids.length > 0) {                                                                                              //
      filter._id = {                                                                                                   //
        $in: ids                                                                                                       //
      };                                                                                                               //
    }                                                                                                                  //
    return this.find(filter, {                                                                                         // 59
      fields: {                                                                                                        //
        _id: 1,                                                                                                        //
        value: 1                                                                                                       //
      }                                                                                                                //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenPublicUpdatedAfter = function(updatedAt) {                                      //
    var filter;                                                                                                        // 62
    filter = {                                                                                                         //
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      },                                                                                                               //
      "public": true,                                                                                                  //
      _updatedAt: {                                                                                                    //
        $gt: updatedAt                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(filter, {                                                                                         // 68
      fields: {                                                                                                        //
        _id: 1,                                                                                                        //
        value: 1                                                                                                       //
      }                                                                                                                //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenPrivate = function() {                                                          //
    return this.find({                                                                                                 // 71
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      },                                                                                                               //
      "public": {                                                                                                      //
        $ne: true                                                                                                      //
      }                                                                                                                //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findNotHidden = function(options) {                                                          //
    return this.find({                                                                                                 // 77
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      }                                                                                                                //
    }, options);                                                                                                       //
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.findNotHiddenUpdatedAfter = function(updatedAt) {                                            //
    return this.find({                                                                                                 // 80
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      },                                                                                                               //
      _updatedAt: {                                                                                                    //
        $gt: updatedAt                                                                                                 //
      }                                                                                                                //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.updateValueById = function(_id, value) {                                                     //
    var query, update;                                                                                                 // 88
    query = {                                                                                                          //
      blocked: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      value: {                                                                                                         //
        $ne: value                                                                                                     //
      },                                                                                                               //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        value: value                                                                                                   //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 97
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.updateValueNotHiddenById = function(_id, value) {                                            //
    var query, update;                                                                                                 // 100
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      hidden: {                                                                                                        //
        $ne: true                                                                                                      //
      },                                                                                                               //
      blocked: {                                                                                                       //
        $ne: true                                                                                                      //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        value: value                                                                                                   //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 109
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.updateOptionsById = function(_id, options) {                                                 //
    var query, update;                                                                                                 // 112
    query = {                                                                                                          //
      blocked: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: options                                                                                                    //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 119
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.createWithIdAndValue = function(_id, value) {                                                //
    var record;                                                                                                        // 123
    record = {                                                                                                         //
      _id: _id,                                                                                                        //
      value: value,                                                                                                    //
      _createdAt: new Date                                                                                             //
    };                                                                                                                 //
    return this.insert(record);                                                                                        // 128
  };                                                                                                                   //
                                                                                                                       //
  ModelSettings.prototype.removeById = function(_id) {                                                                 //
    var query;                                                                                                         // 132
    query = {                                                                                                          //
      blocked: {                                                                                                       //
        $ne: true                                                                                                      //
      },                                                                                                               //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 136
  };                                                                                                                   //
                                                                                                                       //
  return ModelSettings;                                                                                                //
                                                                                                                       //
})(RocketChat.models._Base);                                                                                           //
                                                                                                                       //
RocketChat.models.Settings = new ModelSettings('settings');                                                            // 138
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Subscriptions.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Subscriptions.coffee.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelSubscriptions,                                                                                                // 1
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
ModelSubscriptions = (function(superClass) {                                                                           // 1
  extend(ModelSubscriptions, superClass);                                                                              //
                                                                                                                       //
  function ModelSubscriptions() {                                                                                      //
    ModelSubscriptions.__super__.constructor.apply(this, arguments);                                                   //
    this.tryEnsureIndex({                                                                                              //
      'rid': 1,                                                                                                        //
      'u._id': 1                                                                                                       //
    }, {                                                                                                               //
      unique: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'rid': 1,                                                                                                        //
      'alert': 1,                                                                                                      //
      'u._id': 1                                                                                                       //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'rid': 1,                                                                                                        //
      'roles': 1                                                                                                       //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'u._id': 1,                                                                                                      //
      'name': 1,                                                                                                       //
      't': 1                                                                                                           //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'u._id': 1,                                                                                                      //
      'name': 1,                                                                                                       //
      't': 1,                                                                                                          //
      'code': 1                                                                                                        //
    }, {                                                                                                               //
      unique: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'open': 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'alert': 1                                                                                                       //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'unread': 1                                                                                                      //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'ts': 1                                                                                                          //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'ls': 1                                                                                                          //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'desktopNotifications': 1                                                                                        //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'mobilePushNotifications': 1                                                                                     //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'emailNotifications': 1                                                                                          //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  ModelSubscriptions.prototype.findOneByRoomIdAndUserId = function(roomId, userId) {                                   //
    var query;                                                                                                         // 21
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    return this.findOne(query);                                                                                        // 25
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByUserId = function(userId, options) {                                              //
    var query;                                                                                                         // 29
    query = {                                                                                                          //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 32
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByUserIdUpdatedAfter = function(userId, updatedAt, options) {                       //
    var query;                                                                                                         // 35
    query = {                                                                                                          //
      "u._id": userId,                                                                                                 //
      _updatedAt: {                                                                                                    //
        $gt: updatedAt                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 40
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomIdAndRoles = function(roomId, roles, options) {                               //
    var query;                                                                                                         // 44
    roles = [].concat(roles);                                                                                          //
    query = {                                                                                                          //
      "rid": roomId,                                                                                                   //
      "roles": {                                                                                                       //
        $in: roles                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 49
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByType = function(types, options) {                                                 //
    var query;                                                                                                         // 52
    query = {                                                                                                          //
      t: {                                                                                                             //
        $in: types                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 56
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByTypeAndUserId = function(type, userId, options) {                                 //
    var query;                                                                                                         // 59
    query = {                                                                                                          //
      t: type,                                                                                                         //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 63
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByTypeNameAndUserId = function(type, name, userId, options) {                       //
    var query;                                                                                                         // 66
    query = {                                                                                                          //
      t: type,                                                                                                         //
      name: name,                                                                                                      //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 71
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomId = function(roomId, options) {                                              //
    var query;                                                                                                         // 74
    query = {                                                                                                          //
      "rid": roomId                                                                                                    //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  // 77
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.getLastSeen = function(options) {                                                       //
    var query, ref, ref1, ref2;                                                                                        // 80
    if (options == null) {                                                                                             //
      options = {};                                                                                                    //
    }                                                                                                                  //
    query = {                                                                                                          //
      ls: {                                                                                                            //
        $exists: 1                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    options.sort = {                                                                                                   //
      ls: -1                                                                                                           //
    };                                                                                                                 //
    options.limit = 1;                                                                                                 //
    return (ref = this.find(query, options)) != null ? typeof ref.fetch === "function" ? (ref1 = ref.fetch()) != null ? (ref2 = ref1[0]) != null ? ref2.ls : void 0 : void 0 : void 0 : void 0;
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.findByRoomIdAndUserIds = function(roomId, userIds) {                                    //
    var query;                                                                                                         // 87
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': {                                                                                                       //
        $in: userIds                                                                                                   //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query);                                                                                           // 92
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.archiveByRoomId = function(roomId) {                                                    //
    var query, update;                                                                                                 // 96
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: false,                                                                                                  //
        open: false,                                                                                                   //
        archived: true                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 105
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.unarchiveByRoomId = function(roomId) {                                                  //
    var query, update;                                                                                                 // 108
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: false,                                                                                                  //
        open: true,                                                                                                    //
        archived: false                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 117
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.hideByRoomIdAndUserId = function(roomId, userId) {                                      //
    var query, update;                                                                                                 // 120
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: false,                                                                                                  //
        open: false                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 129
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.openByRoomIdAndUserId = function(roomId, userId) {                                      //
    var query, update;                                                                                                 // 132
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        open: true                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 140
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setAsReadByRoomIdAndUserId = function(roomId, userId) {                                 //
    var query, update;                                                                                                 // 143
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        open: true,                                                                                                    //
        alert: false,                                                                                                  //
        unread: 0,                                                                                                     //
        ls: new Date                                                                                                   //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 154
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setAsUnreadByRoomIdAndUserId = function(roomId, userId, firstMessageUnreadTimestamp) {  //
    var query, update;                                                                                                 // 157
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        open: true,                                                                                                    //
        alert: true,                                                                                                   //
        ls: firstMessageUnreadTimestamp                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 167
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setFavoriteByRoomIdAndUserId = function(roomId, userId, favorite) {                     //
    var query, update;                                                                                                 // 170
    if (favorite == null) {                                                                                            //
      favorite = true;                                                                                                 //
    }                                                                                                                  //
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        f: favorite                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 178
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.updateNameAndAlertByRoomId = function(roomId, name) {                                   //
    var query, update;                                                                                                 // 181
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        name: name,                                                                                                    //
        alert: true                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 189
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.updateNameByRoomId = function(roomId, name) {                                           //
    var query, update;                                                                                                 // 192
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        name: name                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 199
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setUserUsernameByUserId = function(userId, username) {                                  //
    var query, update;                                                                                                 // 202
    query = {                                                                                                          //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "u.username": username                                                                                         //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 209
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setNameForDirectRoomsWithOldName = function(oldName, name) {                            //
    var query, update;                                                                                                 // 212
    query = {                                                                                                          //
      name: oldName,                                                                                                   //
      t: "d"                                                                                                           //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        name: name                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 220
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.incUnreadOfDirectForRoomIdExcludingUserId = function(roomId, userId, inc) {             //
    var query, update;                                                                                                 // 223
    if (inc == null) {                                                                                                 //
      inc = 1;                                                                                                         //
    }                                                                                                                  //
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      t: 'd',                                                                                                          //
      'u._id': {                                                                                                       //
        $ne: userId                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: true,                                                                                                   //
        open: true                                                                                                     //
      },                                                                                                               //
      $inc: {                                                                                                          //
        unread: inc                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 236
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.incUnreadForRoomIdExcludingUserId = function(roomId, userId, inc) {                     //
    var query, update;                                                                                                 // 239
    if (inc == null) {                                                                                                 //
      inc = 1;                                                                                                         //
    }                                                                                                                  //
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': {                                                                                                       //
        $ne: userId                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: true,                                                                                                   //
        open: true                                                                                                     //
      },                                                                                                               //
      $inc: {                                                                                                          //
        unread: inc                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 251
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.incUnreadForRoomIdAndUserIds = function(roomId, userIds, inc) {                         //
    var query, update;                                                                                                 // 254
    if (inc == null) {                                                                                                 //
      inc = 1;                                                                                                         //
    }                                                                                                                  //
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': {                                                                                                       //
        $in: userIds                                                                                                   //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: true,                                                                                                   //
        open: true                                                                                                     //
      },                                                                                                               //
      $inc: {                                                                                                          //
        unread: inc                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 266
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setAlertForRoomIdExcludingUserId = function(roomId, userId) {                           //
    var query, update;                                                                                                 // 269
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      'u._id': {                                                                                                       //
        $ne: userId                                                                                                    //
      },                                                                                                               //
      $or: [                                                                                                           //
        {                                                                                                              //
          alert: {                                                                                                     //
            $ne: true                                                                                                  //
          }                                                                                                            //
        }, {                                                                                                           //
          open: {                                                                                                      //
            $ne: true                                                                                                  //
          }                                                                                                            //
        }                                                                                                              //
      ]                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        alert: true,                                                                                                   //
        open: true                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 283
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.updateTypeByRoomId = function(roomId, type) {                                           //
    var query, update;                                                                                                 // 286
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        t: type                                                                                                        //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 293
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.addRoleById = function(_id, role) {                                                     //
    var query, update;                                                                                                 // 296
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $addToSet: {                                                                                                     //
        roles: role                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 303
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.removeRoleById = function(_id, role) {                                                  //
    var query, update;                                                                                                 // 306
    query = {                                                                                                          //
      _id: _id                                                                                                         //
    };                                                                                                                 //
    update = {                                                                                                         //
      $pull: {                                                                                                         //
        roles: role                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 // 313
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.setArchivedByUsername = function(username, archived) {                                  //
    var query, update;                                                                                                 // 316
    query = {                                                                                                          //
      t: 'd',                                                                                                          //
      name: username                                                                                                   //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        archived: archived                                                                                             //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update, {                                                                                // 324
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.createWithRoomAndUser = function(room, user, extraData) {                               //
    var subscription;                                                                                                  // 328
    subscription = {                                                                                                   //
      open: false,                                                                                                     //
      alert: false,                                                                                                    //
      unread: 0,                                                                                                       //
      ts: room.ts,                                                                                                     //
      rid: room._id,                                                                                                   //
      name: room.name,                                                                                                 //
      t: room.t,                                                                                                       //
      u: {                                                                                                             //
        _id: user._id,                                                                                                 //
        username: user.username                                                                                        //
      }                                                                                                                //
    };                                                                                                                 //
    _.extend(subscription, extraData);                                                                                 //
    return this.insert(subscription);                                                                                  // 342
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.removeByUserId = function(userId) {                                                     //
    var query;                                                                                                         // 347
    query = {                                                                                                          //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 350
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.removeByRoomId = function(roomId) {                                                     //
    var query;                                                                                                         // 353
    query = {                                                                                                          //
      rid: roomId                                                                                                      //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 356
  };                                                                                                                   //
                                                                                                                       //
  ModelSubscriptions.prototype.removeByRoomIdAndUserId = function(roomId, userId) {                                    //
    var query;                                                                                                         // 359
    query = {                                                                                                          //
      rid: roomId,                                                                                                     //
      "u._id": userId                                                                                                  //
    };                                                                                                                 //
    return this.remove(query);                                                                                         // 363
  };                                                                                                                   //
                                                                                                                       //
  return ModelSubscriptions;                                                                                           //
                                                                                                                       //
})(RocketChat.models._Base);                                                                                           //
                                                                                                                       //
RocketChat.models.Subscriptions = new ModelSubscriptions('subscription');                                              // 365
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Uploads.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Uploads.coffee.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;                                                                                         //
                                                                                                                       //
RocketChat.models.Uploads = new ((function(superClass) {                                                               // 1
  extend(_Class, superClass);                                                                                          //
                                                                                                                       //
  function _Class() {                                                                                                  //
    _Class.__super__.constructor.call(this, 'uploads');                                                                //
    this.tryEnsureIndex({                                                                                              //
      'rid': 1                                                                                                         //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'uploadedAt': 1                                                                                                  //
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  _Class.prototype.findOneById = function(fileId) {                                                                    //
    return this.findOne({                                                                                              //
      _id: fileId                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.findNotHiddenFilesOfRoom = function(roomId, limit) {                                                //
    var fileOptions, fileQuery;                                                                                        // 12
    fileQuery = {                                                                                                      //
      rid: roomId,                                                                                                     //
      complete: true,                                                                                                  //
      uploading: false,                                                                                                //
      _hidden: {                                                                                                       //
        $ne: true                                                                                                      //
      }                                                                                                                //
    };                                                                                                                 //
    fileOptions = {                                                                                                    //
      limit: limit,                                                                                                    //
      sort: {                                                                                                          //
        uploadedAt: -1                                                                                                 //
      },                                                                                                               //
      fields: {                                                                                                        //
        _id: 1,                                                                                                        //
        userId: 1,                                                                                                     //
        rid: 1,                                                                                                        //
        name: 1,                                                                                                       //
        type: 1,                                                                                                       //
        url: 1,                                                                                                        //
        uploadedAt: 1                                                                                                  //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(fileQuery, fileOptions);                                                                          // 32
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.insertFileInit = function(roomId, userId, store, file, extra) {                                     //
    var fileData, ref;                                                                                                 // 35
    fileData = {                                                                                                       //
      rid: roomId,                                                                                                     //
      userId: userId,                                                                                                  //
      store: store,                                                                                                    //
      complete: false,                                                                                                 //
      uploading: true,                                                                                                 //
      progress: 0,                                                                                                     //
      extension: s.strRightBack(file.name, '.'),                                                                       //
      uploadedAt: new Date()                                                                                           //
    };                                                                                                                 //
    _.extend(fileData, file, extra);                                                                                   //
    if (((ref = this.model.direct) != null ? ref.insert : void 0) != null) {                                           //
      file = this.model.direct.insert(fileData);                                                                       //
    } else {                                                                                                           //
      file = this.insert(fileData);                                                                                    //
    }                                                                                                                  //
    return file;                                                                                                       // 52
  };                                                                                                                   //
                                                                                                                       //
  _Class.prototype.updateFileComplete = function(fileId, userId, file) {                                               //
    var filter, ref, result, update;                                                                                   // 55
    if (!fileId) {                                                                                                     //
      return;                                                                                                          // 56
    }                                                                                                                  //
    filter = {                                                                                                         //
      _id: fileId,                                                                                                     //
      userId: userId                                                                                                   //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        complete: true,                                                                                                //
        uploading: false,                                                                                              //
        progress: 1                                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    update.$set = _.extend(file, update.$set);                                                                         //
    if (((ref = this.model.direct) != null ? ref.insert : void 0) != null) {                                           //
      result = this.model.direct.update(filter, update);                                                               //
    } else {                                                                                                           //
      result = this.update(filter, update);                                                                            //
    }                                                                                                                  //
    return result;                                                                                                     // 75
  };                                                                                                                   //
                                                                                                                       //
  return _Class;                                                                                                       //
                                                                                                                       //
})(RocketChat.models._Base));                                                                                          //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Users.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Users.coffee.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var ModelUsers,                                                                                                        //
    extend = function extend(child, parent) {                                                                          //
  for (var key in meteorBabelHelpers.sanitizeForInObject(parent)) {                                                    //
    if (hasProp.call(parent, key)) child[key] = parent[key];                                                           //
  }function ctor() {                                                                                                   //
    this.constructor = child;                                                                                          //
  }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;     //
},                                                                                                                     //
    hasProp = {}.hasOwnProperty;                                                                                       //
                                                                                                                       //
ModelUsers = function (superClass) {                                                                                   //
  extend(ModelUsers, superClass);                                                                                      //
                                                                                                                       //
  function ModelUsers() {                                                                                              //
    ModelUsers.__super__.constructor.apply(this, arguments);                                                           //
    this.tryEnsureIndex({                                                                                              //
      'roles': 1                                                                                                       //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'name': 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'lastLogin': 1                                                                                                   //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'status': 1                                                                                                      //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'active': 1                                                                                                      //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'statusConnection': 1                                                                                            //
    }, {                                                                                                               //
      sparse: 1                                                                                                        //
    });                                                                                                                //
    this.tryEnsureIndex({                                                                                              //
      'type': 1                                                                                                        //
    });                                                                                                                //
  }                                                                                                                    //
                                                                                                                       //
  ModelUsers.prototype.findOneById = function (_id, options) {                                                         //
    return this.findOne(_id, options);                                                                                 //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findOneByImportId = function (_id, options) {                                                   //
    return this.findOne({                                                                                              //
      importIds: _id                                                                                                   //
    }, options);                                                                                                       //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findOneByUsername = function (username, options) {                                              //
    var query;                                                                                                         //
    query = {                                                                                                          //
      username: username                                                                                               //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findOneByEmailAddress = function (emailAddress, options) {                                      //
    var query;                                                                                                         //
    query = {                                                                                                          //
      'emails.address': new RegExp("^" + s.escapeRegExp(emailAddress) + "$", 'i')                                      //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findOneAdmin = function (admin, options) {                                                      //
    var query;                                                                                                         //
    query = {                                                                                                          //
      admin: admin                                                                                                     //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findOneByIdAndLoginToken = function (_id, token, options) {                                     //
    var query;                                                                                                         //
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token)                                       //
    };                                                                                                                 //
    return this.findOne(query, options);                                                                               //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findById = function (userId) {                                                                  //
    var query;                                                                                                         //
    query = {                                                                                                          //
      _id: userId                                                                                                      //
    };                                                                                                                 //
    return this.find(query);                                                                                           //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findUsersNotOffline = function (options) {                                                      //
    var query;                                                                                                         //
    query = {                                                                                                          //
      username: {                                                                                                      //
        $exists: 1                                                                                                     //
      },                                                                                                               //
      status: {                                                                                                        //
        $in: ['online', 'away', 'busy']                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findByUsername = function (username, options) {                                                 //
    var query;                                                                                                         //
    query = {                                                                                                          //
      username: username                                                                                               //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findUsersByUsernamesWithHighlights = function (usernames, options) {                            //
    var query;                                                                                                         //
    query = {                                                                                                          //
      username: {                                                                                                      //
        $in: usernames                                                                                                 //
      },                                                                                                               //
      'settings.preferences.highlights.0': {                                                                           //
        $exists: true                                                                                                  //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findActiveByUsernameOrNameRegexWithExceptions = function (searchTerm, exceptions, options) {    //
    var query, termRegex;                                                                                              //
    if (exceptions == null) {                                                                                          //
      exceptions = [];                                                                                                 //
    }                                                                                                                  //
    if (options == null) {                                                                                             //
      options = {};                                                                                                    //
    }                                                                                                                  //
    if (!_.isArray(exceptions)) {                                                                                      //
      exceptions = [exceptions];                                                                                       //
    }                                                                                                                  //
    termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');                                                           //
    query = {                                                                                                          //
      $or: [{                                                                                                          //
        username: termRegex                                                                                            //
      }, {                                                                                                             //
        name: termRegex                                                                                                //
      }],                                                                                                              //
      active: true,                                                                                                    //
      type: {                                                                                                          //
        $in: ['user', 'bot']                                                                                           //
      },                                                                                                               //
      $and: [{                                                                                                         //
        username: {                                                                                                    //
          $exists: true                                                                                                //
        }                                                                                                              //
      }, {                                                                                                             //
        username: {                                                                                                    //
          $nin: exceptions                                                                                             //
        }                                                                                                              //
      }]                                                                                                               //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findByActiveUsersUsernameExcept = function (searchTerm, exceptions, options) {                  //
    var query, termRegex;                                                                                              //
    if (exceptions == null) {                                                                                          //
      exceptions = [];                                                                                                 //
    }                                                                                                                  //
    if (options == null) {                                                                                             //
      options = {};                                                                                                    //
    }                                                                                                                  //
    if (!_.isArray(exceptions)) {                                                                                      //
      exceptions = [exceptions];                                                                                       //
    }                                                                                                                  //
    termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');                                                           //
    query = {                                                                                                          //
      $and: [{                                                                                                         //
        active: true,                                                                                                  //
        username: termRegex                                                                                            //
      }, {                                                                                                             //
        username: {                                                                                                    //
          $nin: exceptions                                                                                             //
        }                                                                                                              //
      }]                                                                                                               //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findUsersByNameOrUsername = function (nameOrUsername, options) {                                //
    var query;                                                                                                         //
    query = {                                                                                                          //
      username: {                                                                                                      //
        $exists: 1                                                                                                     //
      },                                                                                                               //
      $or: [{                                                                                                          //
        name: nameOrUsername                                                                                           //
      }, {                                                                                                             //
        username: nameOrUsername                                                                                       //
      }],                                                                                                              //
      type: {                                                                                                          //
        $in: ['user']                                                                                                  //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findByUsernameNameOrEmailAddress = function (usernameNameOrEmailAddress, options) {             //
    var query;                                                                                                         //
    query = {                                                                                                          //
      $or: [{                                                                                                          //
        name: usernameNameOrEmailAddress                                                                               //
      }, {                                                                                                             //
        username: usernameNameOrEmailAddress                                                                           //
      }, {                                                                                                             //
        'emails.address': usernameNameOrEmailAddress                                                                   //
      }],                                                                                                              //
      type: {                                                                                                          //
        $in: ['user', 'bot']                                                                                           //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findLDAPUsers = function (options) {                                                            //
    var query;                                                                                                         //
    query = {                                                                                                          //
      ldap: true                                                                                                       //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findCrowdUsers = function (options) {                                                           //
    var query;                                                                                                         //
    query = {                                                                                                          //
      crowd: true                                                                                                      //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.getLastLogin = function (options) {                                                             //
    var query, ref, ref1, ref2;                                                                                        //
    if (options == null) {                                                                                             //
      options = {};                                                                                                    //
    }                                                                                                                  //
    query = {                                                                                                          //
      lastLogin: {                                                                                                     //
        $exists: 1                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    options.sort = {                                                                                                   //
      lastLogin: -1                                                                                                    //
    };                                                                                                                 //
    options.limit = 1;                                                                                                 //
    return (ref = this.find(query, options)) != null ? typeof ref.fetch === "function" ? (ref1 = ref.fetch()) != null ? (ref2 = ref1[0]) != null ? ref2.lastLogin : void 0 : void 0 : void 0 : void 0;
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.findUsersByUsernames = function (usernames, options) {                                          //
    var query;                                                                                                         //
    query = {                                                                                                          //
      username: {                                                                                                      //
        $in: usernames                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.find(query, options);                                                                                  //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.updateLastLoginById = function (_id) {                                                          //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        lastLogin: new Date()                                                                                          //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setServiceId = function (_id, serviceName, serviceId) {                                         //
    var serviceIdKey, update;                                                                                          //
    update = {                                                                                                         //
      $set: {}                                                                                                         //
    };                                                                                                                 //
    serviceIdKey = "services." + serviceName + ".id";                                                                  //
    update.$set[serviceIdKey] = serviceId;                                                                             //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setUsername = function (_id, username) {                                                        //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        username: username                                                                                             //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setEmail = function (_id, email) {                                                              //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        emails: [{                                                                                                     //
          address: email,                                                                                              //
          verified: false                                                                                              //
        }]                                                                                                             //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setEmailVerified = function (_id, email) {                                                      //
    var query, update;                                                                                                 //
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      emails: {                                                                                                        //
        $elemMatch: {                                                                                                  //
          address: email,                                                                                              //
          verified: false                                                                                              //
        }                                                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        'emails.$.verified': true                                                                                      //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setName = function (_id, name) {                                                                //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        name: name                                                                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setCustomFields = function (_id, fields) {                                                      //
    var key, update, value, values;                                                                                    //
    values = {};                                                                                                       //
    for (key in meteorBabelHelpers.sanitizeForInObject(fields)) {                                                      //
      value = fields[key];                                                                                             //
      values["customFields." + key] = value;                                                                           //
    }                                                                                                                  //
    update = {                                                                                                         //
      $set: values                                                                                                     //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setAvatarOrigin = function (_id, origin) {                                                      //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        avatarOrigin: origin                                                                                           //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.unsetAvatarOrigin = function (_id) {                                                            //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $unset: {                                                                                                        //
        avatarOrigin: 1                                                                                                //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setUserActive = function (_id, active) {                                                        //
    var update;                                                                                                        //
    if (active == null) {                                                                                              //
      active = true;                                                                                                   //
    }                                                                                                                  //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        active: active                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setAllUsersActive = function (active) {                                                         //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        active: active                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update({}, update, {                                                                                   //
      multi: true                                                                                                      //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.unsetLoginTokens = function (_id) {                                                             //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "services.resume.loginTokens": []                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.unsetRequirePasswordChange = function (_id) {                                                   //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $unset: {                                                                                                        //
        "requirePasswordChange": true,                                                                                 //
        "requirePasswordChangeReason": true                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.resetPasswordAndSetRequirePasswordChange = function (_id, requirePasswordChange, requirePasswordChangeReason) {
    var update;                                                                                                        //
    update = {                                                                                                         //
      $unset: {                                                                                                        //
        "services.password": 1                                                                                         //
      },                                                                                                               //
      $set: {                                                                                                          //
        "requirePasswordChange": requirePasswordChange,                                                                //
        "requirePasswordChangeReason": requirePasswordChangeReason                                                     //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setLanguage = function (_id, language) {                                                        //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        language: language                                                                                             //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setProfile = function (_id, profile) {                                                          //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "settings.profile": profile                                                                                    //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setPreferences = function (_id, preferences) {                                                  //
    var update;                                                                                                        //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        "settings.preferences": preferences                                                                            //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(_id, update);                                                                                   //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.setUtcOffset = function (_id, utcOffset) {                                                      //
    var query, update;                                                                                                 //
    query = {                                                                                                          //
      _id: _id,                                                                                                        //
      utcOffset: {                                                                                                     //
        $ne: utcOffset                                                                                                 //
      }                                                                                                                //
    };                                                                                                                 //
    update = {                                                                                                         //
      $set: {                                                                                                          //
        utcOffset: utcOffset                                                                                           //
      }                                                                                                                //
    };                                                                                                                 //
    return this.update(query, update);                                                                                 //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.saveUserById = function (_id, data) {                                                           //
    var setData, unsetData, update;                                                                                    //
    setData = {};                                                                                                      //
    unsetData = {};                                                                                                    //
    if (data.name != null) {                                                                                           //
      if (!_.isEmpty(s.trim(data.name))) {                                                                             //
        setData.name = s.trim(data.name);                                                                              //
      } else {                                                                                                         //
        unsetData.name = 1;                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    if (data.email != null) {                                                                                          //
      if (!_.isEmpty(s.trim(data.email))) {                                                                            //
        setData.emails = [{                                                                                            //
          address: s.trim(data.email)                                                                                  //
        }];                                                                                                            //
      } else {                                                                                                         //
        unsetData.name = 1;                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    if (data.phone != null) {                                                                                          //
      if (!_.isEmpty(s.trim(data.phone))) {                                                                            //
        setData.phone = [{                                                                                             //
          phoneNumber: s.trim(data.phone)                                                                              //
        }];                                                                                                            //
      } else {                                                                                                         //
        unsetData.phone = 1;                                                                                           //
      }                                                                                                                //
    }                                                                                                                  //
    update = {};                                                                                                       //
    if (!_.isEmpty(setData)) {                                                                                         //
      update.$set = setData;                                                                                           //
    }                                                                                                                  //
    if (!_.isEmpty(unsetData)) {                                                                                       //
      update.$unset = unsetData;                                                                                       //
    }                                                                                                                  //
    if (_.isEmpty(update)) {                                                                                           //
      return true;                                                                                                     //
    }                                                                                                                  //
    return this.update({                                                                                               //
      _id: _id                                                                                                         //
    }, update);                                                                                                        //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.create = function (data) {                                                                      //
    var user;                                                                                                          //
    user = {                                                                                                           //
      createdAt: new Date(),                                                                                           //
      avatarOrigin: 'none'                                                                                             //
    };                                                                                                                 //
    _.extend(user, data);                                                                                              //
    return this.insert(user);                                                                                          //
  };                                                                                                                   //
                                                                                                                       //
  ModelUsers.prototype.removeById = function (_id) {                                                                   //
    return this.remove(_id);                                                                                           //
  };                                                                                                                   //
                                                                                                                       //
  /*                                                                                                                   //
  	Find users to send a message by email if:                                                                           //
  	- he is not online                                                                                                  //
  	- has a verified email                                                                                              //
  	- has not disabled email notifications                                                                              //
  	- `active` is equal to true (false means they were deactivated and can't login)                                     //
   */                                                                                                                  //
                                                                                                                       //
  ModelUsers.prototype.getUsersToSendOfflineEmail = function (usersIds) {                                              //
    var query;                                                                                                         //
    query = {                                                                                                          //
      _id: {                                                                                                           //
        $in: usersIds                                                                                                  //
      },                                                                                                               //
      active: true,                                                                                                    //
      status: 'offline',                                                                                               //
      statusConnection: {                                                                                              //
        $ne: 'online'                                                                                                  //
      },                                                                                                               //
      'emails.verified': true                                                                                          //
    };                                                                                                                 //
    return this.find(query, {                                                                                          //
      fields: {                                                                                                        //
        name: 1,                                                                                                       //
        username: 1,                                                                                                   //
        emails: 1,                                                                                                     //
        'settings.preferences.emailNotificationMode': 1                                                                //
      }                                                                                                                //
    });                                                                                                                //
  };                                                                                                                   //
                                                                                                                       //
  return ModelUsers;                                                                                                   //
}(RocketChat.models._Base);                                                                                            //
                                                                                                                       //
RocketChat.models.Users = new ModelUsers(Meteor.users);                                                                //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup":{"statsTracker.js":["babel-runtime/helpers/classCallCheck",function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/statsTracker.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _classCallCheck;module.import('babel-runtime/helpers/classCallCheck',{"default":function(v){_classCallCheck=v}});  //
RocketChat.statsTracker = new (function () {                                                                           // 1
	function StatsTracker() {                                                                                             // 2
		_classCallCheck(this, StatsTracker);                                                                                 // 2
                                                                                                                       //
		this.StatsD = Npm.require('node-dogstatsd').StatsD;                                                                  // 3
		this.dogstatsd = new this.StatsD();                                                                                  // 4
	}                                                                                                                     // 5
                                                                                                                       //
	StatsTracker.prototype.track = function () {                                                                          // 1
		function track(type, stats) {                                                                                        // 1
			var _dogstatsd;                                                                                                     // 7
                                                                                                                       //
			for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {           // 7
				args[_key - 2] = arguments[_key];                                                                                  // 7
			}                                                                                                                   // 7
                                                                                                                       //
			(_dogstatsd = this.dogstatsd)[type].apply(_dogstatsd, ['RocketChat.' + stats].concat(args));                        // 8
		}                                                                                                                    // 9
                                                                                                                       //
		return track;                                                                                                        // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.now = function () {                                                                            // 1
		function now() {                                                                                                     // 1
			var hrtime = process.hrtime();                                                                                      // 12
			return hrtime[0] * 1000000 + hrtime[1] / 1000;                                                                      // 13
		}                                                                                                                    // 14
                                                                                                                       //
		return now;                                                                                                          // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.timing = function () {                                                                         // 1
		function timing(stats, time, tags) {                                                                                 // 1
			this.track('timing', stats, time, tags);                                                                            // 17
		}                                                                                                                    // 18
                                                                                                                       //
		return timing;                                                                                                       // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.increment = function () {                                                                      // 1
		function increment(stats, time, tags) {                                                                              // 1
			this.track('increment', stats, time, tags);                                                                         // 21
		}                                                                                                                    // 22
                                                                                                                       //
		return increment;                                                                                                    // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.decrement = function () {                                                                      // 1
		function decrement(stats, time, tags) {                                                                              // 1
			this.track('decrement', stats, time, tags);                                                                         // 25
		}                                                                                                                    // 26
                                                                                                                       //
		return decrement;                                                                                                    // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.histogram = function () {                                                                      // 1
		function histogram(stats, time, tags) {                                                                              // 1
			this.track('histogram', stats, time, tags);                                                                         // 29
		}                                                                                                                    // 30
                                                                                                                       //
		return histogram;                                                                                                    // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.gauge = function () {                                                                          // 1
		function gauge(stats, time, tags) {                                                                                  // 1
			this.track('gauge', stats, time, tags);                                                                             // 33
		}                                                                                                                    // 34
                                                                                                                       //
		return gauge;                                                                                                        // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.unique = function () {                                                                         // 1
		function unique(stats, time, tags) {                                                                                 // 1
			this.track('unique', stats, time, tags);                                                                            // 37
		}                                                                                                                    // 38
                                                                                                                       //
		return unique;                                                                                                       // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	StatsTracker.prototype.set = function () {                                                                            // 1
		function set(stats, time, tags) {                                                                                    // 1
			this.track('set', stats, time, tags);                                                                               // 41
		}                                                                                                                    // 42
                                                                                                                       //
		return set;                                                                                                          // 1
	}();                                                                                                                  // 1
                                                                                                                       //
	return StatsTracker;                                                                                                  // 1
}())();                                                                                                                // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"settingsOnLoadCdnPrefix.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadCdnPrefix.coffee.js                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.settings.onload('CDN_PREFIX', function(key, value, initialLoad) {                                           // 1
  if (_.isString(value)) {                                                                                             //
    return typeof WebAppInternals !== "undefined" && WebAppInternals !== null ? WebAppInternals.setBundledJsCssPrefix(value) : void 0;
  }                                                                                                                    //
});                                                                                                                    // 1
                                                                                                                       //
Meteor.startup(function() {                                                                                            // 5
  var value;                                                                                                           // 6
  value = RocketChat.settings.get('CDN_PREFIX');                                                                       //
  if (_.isString(value)) {                                                                                             //
    return typeof WebAppInternals !== "undefined" && WebAppInternals !== null ? WebAppInternals.setBundledJsCssPrefix(value) : void 0;
  }                                                                                                                    //
});                                                                                                                    // 5
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadSMTP.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadSMTP.coffee.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var buildMailURL;                                                                                                      // 1
                                                                                                                       //
buildMailURL = _.debounce(function() {                                                                                 // 1
  console.log('Updating process.env.MAIL_URL');                                                                        //
  if (RocketChat.settings.get('SMTP_Host')) {                                                                          //
    process.env.MAIL_URL = "smtp://";                                                                                  //
    if (RocketChat.settings.get('SMTP_Username') && RocketChat.settings.get('SMTP_Password')) {                        //
      process.env.MAIL_URL += encodeURIComponent(RocketChat.settings.get('SMTP_Username')) + ':' + encodeURIComponent(RocketChat.settings.get('SMTP_Password')) + '@';
    }                                                                                                                  //
    process.env.MAIL_URL += encodeURIComponent(RocketChat.settings.get('SMTP_Host'));                                  //
    if (RocketChat.settings.get('SMTP_Port')) {                                                                        //
      return process.env.MAIL_URL += ':' + parseInt(RocketChat.settings.get('SMTP_Port'));                             //
    }                                                                                                                  //
  }                                                                                                                    //
}, 500);                                                                                                               // 1
                                                                                                                       //
RocketChat.settings.onload('SMTP_Host', function(key, value, initialLoad) {                                            // 12
  if (_.isString(value)) {                                                                                             //
    return buildMailURL();                                                                                             //
  }                                                                                                                    //
});                                                                                                                    // 12
                                                                                                                       //
RocketChat.settings.onload('SMTP_Port', function(key, value, initialLoad) {                                            // 16
  return buildMailURL();                                                                                               //
});                                                                                                                    // 16
                                                                                                                       //
RocketChat.settings.onload('SMTP_Username', function(key, value, initialLoad) {                                        // 19
  if (_.isString(value)) {                                                                                             //
    return buildMailURL();                                                                                             //
  }                                                                                                                    //
});                                                                                                                    // 19
                                                                                                                       //
RocketChat.settings.onload('SMTP_Password', function(key, value, initialLoad) {                                        // 23
  if (_.isString(value)) {                                                                                             //
    return buildMailURL();                                                                                             //
  }                                                                                                                    //
});                                                                                                                    // 23
                                                                                                                       //
Meteor.startup(function() {                                                                                            // 27
  return buildMailURL();                                                                                               //
});                                                                                                                    // 27
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"oAuthServicesUpdate.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/oAuthServicesUpdate.coffee.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var OAuthServicesRemove, OAuthServicesUpdate, logger, timer;                                                           // 1
                                                                                                                       //
logger = new Logger('rocketchat:lib', {                                                                                // 1
  methods: {                                                                                                           //
    oauth_updated: {                                                                                                   //
      type: 'info'                                                                                                     //
    }                                                                                                                  //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
timer = void 0;                                                                                                        // 6
                                                                                                                       //
OAuthServicesUpdate = function() {                                                                                     // 7
  if (timer != null) {                                                                                                 //
    Meteor.clearTimeout(timer);                                                                                        //
  }                                                                                                                    //
  return timer = Meteor.setTimeout(function() {                                                                        //
    var data, i, len, results, service, serviceName, services;                                                         // 11
    services = RocketChat.settings.get(/^(Accounts_OAuth_|Accounts_OAuth_Custom_)[a-z0-9_-]+$/i);                      //
    results = [];                                                                                                      // 12
    for (i = 0, len = services.length; i < len; i++) {                                                                 //
      service = services[i];                                                                                           //
      logger.oauth_updated(service.key);                                                                               //
      serviceName = service.key.replace('Accounts_OAuth_', '');                                                        //
      if (serviceName === 'Meteor') {                                                                                  //
        serviceName = 'meteor-developer';                                                                              //
      }                                                                                                                //
      if (/Accounts_OAuth_Custom_/.test(service.key)) {                                                                //
        serviceName = service.key.replace('Accounts_OAuth_Custom_', '');                                               //
      }                                                                                                                //
      if (service.value === true) {                                                                                    //
        data = {                                                                                                       //
          clientId: RocketChat.settings.get(service.key + "_id"),                                                      //
          secret: RocketChat.settings.get(service.key + "_secret")                                                     //
        };                                                                                                             //
        if (/Accounts_OAuth_Custom_/.test(service.key)) {                                                              //
          data.custom = true;                                                                                          //
          data.serverURL = RocketChat.settings.get(service.key + "_url");                                              //
          data.tokenPath = RocketChat.settings.get(service.key + "_token_path");                                       //
          data.identityPath = RocketChat.settings.get(service.key + "_identity_path");                                 //
          data.authorizePath = RocketChat.settings.get(service.key + "_authorize_path");                               //
          data.scope = RocketChat.settings.get(service.key + "_scope");                                                //
          data.buttonLabelText = RocketChat.settings.get(service.key + "_button_label_text");                          //
          data.buttonLabelColor = RocketChat.settings.get(service.key + "_button_label_color");                        //
          data.loginStyle = RocketChat.settings.get(service.key + "_login_style");                                     //
          data.buttonColor = RocketChat.settings.get(service.key + "_button_color");                                   //
          data.tokenSentVia = RocketChat.settings.get(service.key + "_token_sent_via");                                //
          new CustomOAuth(serviceName.toLowerCase(), {                                                                 //
            serverURL: data.serverURL,                                                                                 //
            tokenPath: data.tokenPath,                                                                                 //
            identityPath: data.identityPath,                                                                           //
            authorizePath: data.authorizePath,                                                                         //
            scope: data.scope,                                                                                         //
            loginStyle: data.loginStyle,                                                                               //
            tokenSentVia: data.tokenSentVia                                                                            //
          });                                                                                                          //
        }                                                                                                              //
        if (serviceName === 'Facebook') {                                                                              //
          data.appId = data.clientId;                                                                                  //
          delete data.clientId;                                                                                        //
        }                                                                                                              //
        if (serviceName === 'Twitter') {                                                                               //
          data.consumerKey = data.clientId;                                                                            //
          delete data.clientId;                                                                                        //
        }                                                                                                              //
        results.push(ServiceConfiguration.configurations.upsert({                                                      //
          service: serviceName.toLowerCase()                                                                           //
        }, {                                                                                                           //
          $set: data                                                                                                   //
        }));                                                                                                           //
      } else {                                                                                                         //
        results.push(ServiceConfiguration.configurations.remove({                                                      //
          service: serviceName.toLowerCase()                                                                           //
        }));                                                                                                           //
      }                                                                                                                //
    }                                                                                                                  // 12
    return results;                                                                                                    //
  }, 2000);                                                                                                            //
};                                                                                                                     // 7
                                                                                                                       //
OAuthServicesRemove = function(_id) {                                                                                  // 62
  var serviceName;                                                                                                     // 63
  serviceName = _id.replace('Accounts_OAuth_Custom_', '');                                                             //
  return ServiceConfiguration.configurations.remove({                                                                  //
    service: serviceName.toLowerCase()                                                                                 //
  });                                                                                                                  //
};                                                                                                                     // 62
                                                                                                                       //
RocketChat.settings.get(/^Accounts_OAuth_.+/, function(key, value) {                                                   // 67
  return OAuthServicesUpdate();                                                                                        //
});                                                                                                                    // 67
                                                                                                                       //
RocketChat.settings.get(/^Accounts_OAuth_Custom.+/, function(key, value) {                                             // 70
  if (!value) {                                                                                                        //
    return OAuthServicesRemove(key);                                                                                   //
  }                                                                                                                    //
});                                                                                                                    // 70
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settings.coffee.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.settings.add('uniqueID', process.env.DEPLOYMENT_ID || Random.id(), {                                        //
  "public": true,                                                                                                      //
  hidden: true                                                                                                         //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Accounts', function () {                                                                 //
  this.add('Accounts_AllowDeleteOwnAccount', false, {                                                                  //
    type: 'boolean',                                                                                                   //
    "public": true,                                                                                                    //
    enableQuery: {                                                                                                     //
      _id: 'Accounts_AllowUserProfileChange',                                                                          //
      value: true                                                                                                      //
    }                                                                                                                  //
  });                                                                                                                  //
  this.add('Accounts_AllowUserProfileChange', true, {                                                                  //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_AllowUserAvatarChange', true, {                                                                   //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_AllowUsernameChange', true, {                                                                     //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_AllowEmailChange', true, {                                                                        //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_AllowPasswordChange', true, {                                                                     //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_LoginExpiration', 90, {                                                                           //
    type: 'int',                                                                                                       //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_ShowFormLogin', true, {                                                                           //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Accounts_EmailOrUsernamePlaceholder', '', {                                                                //
    type: 'string',                                                                                                    //
    "public": true,                                                                                                    //
    i18nLabel: 'Placeholder_for_email_or_username_login_field'                                                         //
  });                                                                                                                  //
  this.add('Accounts_PasswordPlaceholder', '', {                                                                       //
    type: 'string',                                                                                                    //
    "public": true,                                                                                                    //
    i18nLabel: 'Placeholder_for_password_login_field'                                                                  //
  });                                                                                                                  //
  this.section('Registration', function () {                                                                           //
    this.add('Accounts_RequireNameForSignUp', true, {                                                                  //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_RequirePasswordConfirmation', true, {                                                           //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_EmailVerification', false, {                                                                    //
      type: 'boolean',                                                                                                 //
      "public": true,                                                                                                  //
      enableQuery: {                                                                                                   //
        _id: 'SMTP_Host',                                                                                              //
        value: {                                                                                                       //
          $exists: 1,                                                                                                  //
          $ne: ""                                                                                                      //
        }                                                                                                              //
      }                                                                                                                //
    });                                                                                                                //
    this.add('Accounts_ManuallyApproveNewUsers', false, {                                                              //
      type: 'boolean'                                                                                                  //
    });                                                                                                                //
    this.add('Accounts_AllowedDomainsList', '', {                                                                      //
      type: 'string',                                                                                                  //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_BlockedDomainsList', '', {                                                                      //
      type: 'string'                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_BlockedUsernameList', '', {                                                                     //
      type: 'string'                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_UseDefaultBlockedDomainsList', true, {                                                          //
      type: 'boolean'                                                                                                  //
    });                                                                                                                //
    this.add('Accounts_UseDNSDomainCheck', false, {                                                                    //
      type: 'boolean'                                                                                                  //
    });                                                                                                                //
    this.add('Accounts_RegistrationForm', 'Public', {                                                                  //
      type: 'select',                                                                                                  //
      "public": true,                                                                                                  //
      values: [{                                                                                                       //
        key: 'Public',                                                                                                 //
        i18nLabel: 'Accounts_RegistrationForm_Public'                                                                  //
      }, {                                                                                                             //
        key: 'Disabled',                                                                                               //
        i18nLabel: 'Accounts_RegistrationForm_Disabled'                                                                //
      }, {                                                                                                             //
        key: 'Secret URL',                                                                                             //
        i18nLabel: 'Accounts_RegistrationForm_Secret_URL'                                                              //
      }]                                                                                                               //
    });                                                                                                                //
    this.add('Accounts_RegistrationForm_SecretURL', Random.id(), {                                                     //
      type: 'string'                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_RegistrationForm_LinkReplacementText', 'New user registration is currently disabled', {         //
      type: 'string',                                                                                                  //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_Registration_AuthenticationServices_Enabled', true, {                                           //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_PasswordReset', true, {                                                                         //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    return this.add('Accounts_CustomFields', '', {                                                                     //
      type: 'code',                                                                                                    //
      "public": true,                                                                                                  //
      i18nLabel: 'Custom_Fields'                                                                                       //
    });                                                                                                                //
  });                                                                                                                  //
  return this.section('Avatar', function () {                                                                          //
    this.add('Accounts_AvatarResize', true, {                                                                          //
      type: 'boolean'                                                                                                  //
    });                                                                                                                //
    this.add('Accounts_AvatarSize', 200, {                                                                             //
      type: 'int',                                                                                                     //
      enableQuery: {                                                                                                   //
        _id: 'Accounts_AvatarResize',                                                                                  //
        value: true                                                                                                    //
      }                                                                                                                //
    });                                                                                                                //
    this.add('Accounts_AvatarStoreType', 'GridFS', {                                                                   //
      type: 'select',                                                                                                  //
      values: [{                                                                                                       //
        key: 'GridFS',                                                                                                 //
        i18nLabel: 'GridFS'                                                                                            //
      }, {                                                                                                             //
        key: 'FileSystem',                                                                                             //
        i18nLabel: 'FileSystem'                                                                                        //
      }]                                                                                                               //
    });                                                                                                                //
    return this.add('Accounts_AvatarStorePath', '', {                                                                  //
      type: 'string',                                                                                                  //
      enableQuery: {                                                                                                   //
        _id: 'Accounts_AvatarStoreType',                                                                               //
        value: 'FileSystem'                                                                                            //
      }                                                                                                                //
    });                                                                                                                //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('OAuth', function () {                                                                    //
  this.section('Facebook', function () {                                                                               //
    var enableQuery;                                                                                                   //
    enableQuery = {                                                                                                    //
      _id: 'Accounts_OAuth_Facebook',                                                                                  //
      value: true                                                                                                      //
    };                                                                                                                 //
    this.add('Accounts_OAuth_Facebook', false, {                                                                       //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_OAuth_Facebook_id', '', {                                                                       //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    this.add('Accounts_OAuth_Facebook_secret', '', {                                                                   //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    return this.add('Accounts_OAuth_Facebook_callback_url', '_oauth/facebook', {                                       //
      type: 'relativeUrl',                                                                                             //
      readonly: true,                                                                                                  //
      force: true,                                                                                                     //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Google', function () {                                                                                 //
    var enableQuery;                                                                                                   //
    enableQuery = {                                                                                                    //
      _id: 'Accounts_OAuth_Google',                                                                                    //
      value: true                                                                                                      //
    };                                                                                                                 //
    this.add('Accounts_OAuth_Google', false, {                                                                         //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_OAuth_Google_id', '', {                                                                         //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    this.add('Accounts_OAuth_Google_secret', '', {                                                                     //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    return this.add('Accounts_OAuth_Google_callback_url', '_oauth/google', {                                           //
      type: 'relativeUrl',                                                                                             //
      readonly: true,                                                                                                  //
      force: true,                                                                                                     //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('GitHub', function () {                                                                                 //
    var enableQuery;                                                                                                   //
    enableQuery = {                                                                                                    //
      _id: 'Accounts_OAuth_Github',                                                                                    //
      value: true                                                                                                      //
    };                                                                                                                 //
    this.add('Accounts_OAuth_Github', false, {                                                                         //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_OAuth_Github_id', '', {                                                                         //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    this.add('Accounts_OAuth_Github_secret', '', {                                                                     //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    return this.add('Accounts_OAuth_Github_callback_url', '_oauth/github', {                                           //
      type: 'relativeUrl',                                                                                             //
      readonly: true,                                                                                                  //
      force: true,                                                                                                     //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Linkedin', function () {                                                                               //
    var enableQuery;                                                                                                   //
    enableQuery = {                                                                                                    //
      _id: 'Accounts_OAuth_Linkedin',                                                                                  //
      value: true                                                                                                      //
    };                                                                                                                 //
    this.add('Accounts_OAuth_Linkedin', false, {                                                                       //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_OAuth_Linkedin_id', '', {                                                                       //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    this.add('Accounts_OAuth_Linkedin_secret', '', {                                                                   //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    return this.add('Accounts_OAuth_Linkedin_callback_url', '_oauth/linkedin', {                                       //
      type: 'relativeUrl',                                                                                             //
      readonly: true,                                                                                                  //
      force: true,                                                                                                     //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Meteor', function () {                                                                                 //
    var enableQuery;                                                                                                   //
    enableQuery = {                                                                                                    //
      _id: 'Accounts_OAuth_Meteor',                                                                                    //
      value: true                                                                                                      //
    };                                                                                                                 //
    this.add('Accounts_OAuth_Meteor', false, {                                                                         //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_OAuth_Meteor_id', '', {                                                                         //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    this.add('Accounts_OAuth_Meteor_secret', '', {                                                                     //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    return this.add('Accounts_OAuth_Meteor_callback_url', '_oauth/meteor', {                                           //
      type: 'relativeUrl',                                                                                             //
      readonly: true,                                                                                                  //
      force: true,                                                                                                     //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
  });                                                                                                                  //
  return this.section('Twitter', function () {                                                                         //
    var enableQuery;                                                                                                   //
    enableQuery = {                                                                                                    //
      _id: 'Accounts_OAuth_Twitter',                                                                                   //
      value: true                                                                                                      //
    };                                                                                                                 //
    this.add('Accounts_OAuth_Twitter', false, {                                                                        //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Accounts_OAuth_Twitter_id', '', {                                                                        //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    this.add('Accounts_OAuth_Twitter_secret', '', {                                                                    //
      type: 'string',                                                                                                  //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
    return this.add('Accounts_OAuth_Twitter_callback_url', '_oauth/twitter', {                                         //
      type: 'relativeUrl',                                                                                             //
      readonly: true,                                                                                                  //
      force: true,                                                                                                     //
      enableQuery: enableQuery                                                                                         //
    });                                                                                                                //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('General', function () {                                                                  //
  this.add('Site_Url', typeof __meteor_runtime_config__ !== "undefined" && __meteor_runtime_config__ !== null ? __meteor_runtime_config__.ROOT_URL : void 0, {
    type: 'string',                                                                                                    //
    i18nDescription: 'Site_Url_Description',                                                                           //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Site_Name', 'Rocket.Chat', {                                                                               //
    type: 'string',                                                                                                    //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Language', '', {                                                                                           //
    type: 'language',                                                                                                  //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Allow_Invalid_SelfSigned_Certs', false, {                                                                  //
    type: 'boolean'                                                                                                    //
  });                                                                                                                  //
  this.add('Favorite_Rooms', true, {                                                                                   //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('CDN_PREFIX', '', {                                                                                         //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
  this.add('Force_SSL', false, {                                                                                       //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('GoogleTagManager_id', '', {                                                                                //
    type: 'string',                                                                                                    //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('GoogleSiteVerification_id', '', {                                                                          //
    type: 'string',                                                                                                    //
    "public": false                                                                                                    //
  });                                                                                                                  //
  this.add('Bugsnag_api_key', '', {                                                                                    //
    type: 'string',                                                                                                    //
    "public": false                                                                                                    //
  });                                                                                                                  //
  this.add('Restart', 'restart_server', {                                                                              //
    type: 'action',                                                                                                    //
    actionText: 'Restart_the_server'                                                                                   //
  });                                                                                                                  //
  this.section('UTF8', function () {                                                                                   //
    this.add('UTF8_Names_Validation', '[0-9a-zA-Z-_.]+', {                                                             //
      type: 'string',                                                                                                  //
      "public": true,                                                                                                  //
      i18nDescription: 'UTF8_Names_Validation_Description'                                                             //
    });                                                                                                                //
    return this.add('UTF8_Names_Slugify', true, {                                                                      //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Reporting', function () {                                                                              //
    return this.add('Statistics_reporting', true, {                                                                    //
      type: 'boolean'                                                                                                  //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Notifications', function () {                                                                          //
    return this.add('Desktop_Notifications_Duration', 0, {                                                             //
      type: 'int',                                                                                                     //
      "public": true,                                                                                                  //
      i18nDescription: 'Desktop_Notification_Durations_Description'                                                    //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('REST API', function () {                                                                               //
    return this.add('API_User_Limit', 500, {                                                                           //
      type: 'int',                                                                                                     //
      "public": true,                                                                                                  //
      i18nDescription: 'API_User_Limit'                                                                                //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Iframe Integration', function () {                                                                     //
    this.add('Iframe_Integration_send_enable', false, {                                                                //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Iframe_Integration_send_target_origin', '*', {                                                           //
      type: 'string',                                                                                                  //
      "public": true,                                                                                                  //
      enableQuery: {                                                                                                   //
        _id: 'Iframe_Integration_send_enable',                                                                         //
        value: true                                                                                                    //
      }                                                                                                                //
    });                                                                                                                //
    this.add('Iframe_Integration_receive_enable', false, {                                                             //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    return this.add('Iframe_Integration_receive_origin', '*', {                                                        //
      type: 'string',                                                                                                  //
      "public": true,                                                                                                  //
      enableQuery: {                                                                                                   //
        _id: 'Iframe_Integration_receive_enable',                                                                      //
        value: true                                                                                                    //
      }                                                                                                                //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Translations', function () {                                                                           //
    return this.add('Custom_Translations', '', {                                                                       //
      type: 'code',                                                                                                    //
      "public": true                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
  return this.section('Stream Cast', function () {                                                                     //
    return this.add('Stream_Cast_Address', '', {                                                                       //
      type: 'string'                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Email', function () {                                                                    //
  this.section('Header and Footer', function () {                                                                      //
    this.add('Email_Header', '<table border="0" cellspacing="0" cellpadding="0" width="100%" bgcolor="#f3f3f3" style="color:#4a4a4a;font-family: Helvetica,Arial,sans-serif;font-size:14px;line-height:20px;border-collapse:callapse;border-spacing:0;margin:0 auto"><tr><td style="padding:1em"><table border="0" cellspacing="0" cellpadding="0" align="center" width="100%" style="width:100%;margin:0 auto;max-width:800px"><tr><td bgcolor="#ffffff" style="background-color:#ffffff; border: 1px solid #DDD; font-size: 10pt; font-family: Helvetica,Arial,sans-serif;"><table width="100%" border="0" cellspacing="0" cellpadding="0"><tr><td style="background-color: #04436a;"><h1 style="font-family: Helvetica,Arial,sans-serif; padding: 0 1em; margin: 0; line-height: 70px; color: #FFF;">[Site_Name]</h1></td></tr><tr><td style="padding: 1em; font-size: 10pt; font-family: Helvetica,Arial,sans-serif;">', {
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      i18nLabel: 'Header'                                                                                              //
    });                                                                                                                //
    return this.add('Email_Footer', '</td></tr></table></td></tr><tr><td border="0" cellspacing="0" cellpadding="0" width="100%" style="font-family: Helvetica,Arial,sans-serif; max-width: 800px; margin: 0 auto; padding: 1.5em; text-align: center; font-size: 8pt; color: #999;">Powered by <a href="https://rocket.chat" target="_blank">Rocket.Chat</a></td></tr></table></td></tr></table>', {
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      i18nLabel: 'Footer'                                                                                              //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('SMTP', function () {                                                                                   //
    this.add('SMTP_Host', '', {                                                                                        //
      type: 'string',                                                                                                  //
      env: true,                                                                                                       //
      i18nLabel: 'Host'                                                                                                //
    });                                                                                                                //
    this.add('SMTP_Port', '', {                                                                                        //
      type: 'string',                                                                                                  //
      env: true,                                                                                                       //
      i18nLabel: 'Port'                                                                                                //
    });                                                                                                                //
    this.add('SMTP_Username', '', {                                                                                    //
      type: 'string',                                                                                                  //
      env: true,                                                                                                       //
      i18nLabel: 'Username'                                                                                            //
    });                                                                                                                //
    this.add('SMTP_Password', '', {                                                                                    //
      type: 'password',                                                                                                //
      env: true,                                                                                                       //
      i18nLabel: 'Password'                                                                                            //
    });                                                                                                                //
    this.add('From_Email', '', {                                                                                       //
      type: 'string',                                                                                                  //
      placeholder: 'email@domain'                                                                                      //
    });                                                                                                                //
    return this.add('SMTP_Test_Button', 'sendSMTPTestEmail', {                                                         //
      type: 'action',                                                                                                  //
      actionText: 'Send_a_test_mail_to_my_user'                                                                        //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Invitation', function () {                                                                             //
    this.add('Invitation_Customized', false, {                                                                         //
      type: 'boolean',                                                                                                 //
      i18nLabel: 'Custom'                                                                                              //
    });                                                                                                                //
    this.add('Invitation_Subject', '', {                                                                               //
      type: 'string',                                                                                                  //
      i18nLabel: 'Subject',                                                                                            //
      enableQuery: {                                                                                                   //
        _id: 'Invitation_Customized',                                                                                  //
        value: true                                                                                                    //
      },                                                                                                               //
      i18nDefaultQuery: {                                                                                              //
        _id: 'Invitation_Customized',                                                                                  //
        value: false                                                                                                   //
      }                                                                                                                //
    });                                                                                                                //
    return this.add('Invitation_HTML', '', {                                                                           //
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      i18nLabel: 'Body',                                                                                               //
      i18nDescription: 'Invitation_HTML_Description',                                                                  //
      enableQuery: {                                                                                                   //
        _id: 'Invitation_Customized',                                                                                  //
        value: true                                                                                                    //
      },                                                                                                               //
      i18nDefaultQuery: {                                                                                              //
        _id: 'Invitation_Customized',                                                                                  //
        value: false                                                                                                   //
      }                                                                                                                //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Registration', function () {                                                                           //
    this.add('Accounts_Enrollment_Customized', false, {                                                                //
      type: 'boolean',                                                                                                 //
      i18nLabel: 'Custom'                                                                                              //
    });                                                                                                                //
    this.add('Accounts_Enrollment_Email_Subject', '', {                                                                //
      type: 'string',                                                                                                  //
      i18nLabel: 'Subject',                                                                                            //
      enableQuery: {                                                                                                   //
        _id: 'Accounts_Enrollment_Customized',                                                                         //
        value: true                                                                                                    //
      },                                                                                                               //
      i18nDefaultQuery: {                                                                                              //
        _id: 'Accounts_Enrollment_Customized',                                                                         //
        value: false                                                                                                   //
      }                                                                                                                //
    });                                                                                                                //
    return this.add('Accounts_Enrollment_Email', '', {                                                                 //
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      i18nLabel: 'Body',                                                                                               //
      enableQuery: {                                                                                                   //
        _id: 'Accounts_Enrollment_Customized',                                                                         //
        value: true                                                                                                    //
      },                                                                                                               //
      i18nDefaultQuery: {                                                                                              //
        _id: 'Accounts_Enrollment_Customized',                                                                         //
        value: false                                                                                                   //
      }                                                                                                                //
    });                                                                                                                //
  });                                                                                                                  //
  return this.section('Registration via Admin', function () {                                                          //
    this.add('Accounts_UserAddedEmail_Customized', false, {                                                            //
      type: 'boolean',                                                                                                 //
      i18nLabel: 'Custom'                                                                                              //
    });                                                                                                                //
    this.add('Accounts_UserAddedEmailSubject', '', {                                                                   //
      type: 'string',                                                                                                  //
      i18nLabel: "Subject",                                                                                            //
      enableQuery: {                                                                                                   //
        _id: 'Accounts_UserAddedEmail_Customized',                                                                     //
        value: true                                                                                                    //
      },                                                                                                               //
      i18nDefaultQuery: {                                                                                              //
        _id: 'Accounts_UserAddedEmail_Customized',                                                                     //
        value: false                                                                                                   //
      }                                                                                                                //
    });                                                                                                                //
    return this.add('Accounts_UserAddedEmail', '', {                                                                   //
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      i18nLabel: 'Body',                                                                                               //
      i18nDescription: 'Accounts_UserAddedEmail_Description',                                                          //
      enableQuery: {                                                                                                   //
        _id: 'Accounts_UserAddedEmail_Customized',                                                                     //
        value: true                                                                                                    //
      },                                                                                                               //
      i18nDefaultQuery: {                                                                                              //
        _id: 'Accounts_UserAddedEmail_Customized',                                                                     //
        value: false                                                                                                   //
      }                                                                                                                //
    });                                                                                                                //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Message', function () {                                                                  //
  this.add('Message_AllowEditing', true, {                                                                             //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_AllowEditing_BlockEditInMinutes', 0, {                                                             //
    type: 'int',                                                                                                       //
    "public": true,                                                                                                    //
    i18nDescription: 'Message_AllowEditing_BlockEditInMinutesDescription'                                              //
  });                                                                                                                  //
  this.add('Message_AllowDeleting', true, {                                                                            //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_AllowDeleting_BlockDeleteInMinutes', 0, {                                                          //
    type: 'int',                                                                                                       //
    "public": true,                                                                                                    //
    i18nDescription: 'Message_AllowDeleting_BlockDeleteInMinutes'                                                      //
  });                                                                                                                  //
  this.add('Message_AllowUnrecognizedSlashCommand', false, {                                                           //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_AlwaysSearchRegExp', false, {                                                                      //
    type: 'boolean'                                                                                                    //
  });                                                                                                                  //
  this.add('Message_ShowEditedStatus', true, {                                                                         //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_ShowDeletedStatus', false, {                                                                       //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_AllowBadWordsFilter', false, {                                                                     //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_BadWordsFilterList', '', {                                                                         //
    type: 'string',                                                                                                    //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_KeepHistory', false, {                                                                             //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_MaxAll', 0, {                                                                                      //
    type: 'int',                                                                                                       //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_MaxAllowedSize', 5000, {                                                                           //
    type: 'int',                                                                                                       //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_ShowFormattingTips', true, {                                                                       //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_SetNameToAliasEnabled', false, {                                                                   //
    type: 'boolean',                                                                                                   //
    "public": false,                                                                                                   //
    i18nDescription: 'Message_SetNameToAliasEnabled_Description'                                                       //
  });                                                                                                                  //
  this.add('Message_AudioRecorderEnabled', true, {                                                                     //
    type: 'boolean',                                                                                                   //
    "public": true,                                                                                                    //
    i18nDescription: 'Message_AudioRecorderEnabledDescription'                                                         //
  });                                                                                                                  //
  this.add('Message_GroupingPeriod', 300, {                                                                            //
    type: 'int',                                                                                                       //
    "public": true,                                                                                                    //
    i18nDescription: 'Message_GroupingPeriodDescription'                                                               //
  });                                                                                                                  //
  this.add('API_Embed', true, {                                                                                        //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('API_EmbedDisabledFor', '', {                                                                               //
    type: 'string',                                                                                                    //
    "public": true,                                                                                                    //
    i18nDescription: 'API_EmbedDisabledFor_Description'                                                                //
  });                                                                                                                  //
  this.add('API_EmbedIgnoredHosts', 'localhost, 127.0.0.1, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16', {               //
    type: 'string',                                                                                                    //
    i18nDescription: 'API_EmbedIgnoredHosts_Description'                                                               //
  });                                                                                                                  //
  this.add('API_EmbedSafePorts', '80, 443', {                                                                          //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
  this.add('Message_TimeFormat', 'LT', {                                                                               //
    type: 'string',                                                                                                    //
    "public": true,                                                                                                    //
    i18nDescription: 'Message_TimeFormat_Description'                                                                  //
  });                                                                                                                  //
  this.add('Message_DateFormat', 'LL', {                                                                               //
    type: 'string',                                                                                                    //
    "public": true,                                                                                                    //
    i18nDescription: 'Message_DateFormat_Description'                                                                  //
  });                                                                                                                  //
  this.add('Message_HideType_uj', false, {                                                                             //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_HideType_ul', false, {                                                                             //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Message_HideType_ru', false, {                                                                             //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  return this.add('Message_HideType_au', false, {                                                                      //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Meta', function () {                                                                     //
  this.add('Meta_language', '', {                                                                                      //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
  this.add('Meta_fb_app_id', '', {                                                                                     //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
  this.add('Meta_robots', '', {                                                                                        //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
  this.add('Meta_google-site-verification', '', {                                                                      //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
  return this.add('Meta_msvalidate01', '', {                                                                           //
    type: 'string'                                                                                                     //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Push', function () {                                                                     //
  this.add('Push_enable', true, {                                                                                      //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Push_debug', false, {                                                                                      //
    type: 'boolean',                                                                                                   //
    "public": true,                                                                                                    //
    enableQuery: {                                                                                                     //
      _id: 'Push_enable',                                                                                              //
      value: true                                                                                                      //
    }                                                                                                                  //
  });                                                                                                                  //
  this.add('Push_enable_gateway', true, {                                                                              //
    type: 'boolean',                                                                                                   //
    enableQuery: {                                                                                                     //
      _id: 'Push_enable',                                                                                              //
      value: true                                                                                                      //
    }                                                                                                                  //
  });                                                                                                                  //
  this.add('Push_gateway', 'https://gateway.rocket.chat', {                                                            //
    type: 'string',                                                                                                    //
    enableQuery: [{                                                                                                    //
      _id: 'Push_enable',                                                                                              //
      value: true                                                                                                      //
    }, {                                                                                                               //
      _id: 'Push_enable_gateway',                                                                                      //
      value: true                                                                                                      //
    }]                                                                                                                 //
  });                                                                                                                  //
  this.add('Push_production', true, {                                                                                  //
    type: 'boolean',                                                                                                   //
    "public": true,                                                                                                    //
    enableQuery: [{                                                                                                    //
      _id: 'Push_enable',                                                                                              //
      value: true                                                                                                      //
    }, {                                                                                                               //
      _id: 'Push_enable_gateway',                                                                                      //
      value: false                                                                                                     //
    }]                                                                                                                 //
  });                                                                                                                  //
  this.add('Push_test_push', 'push_test', {                                                                            //
    type: 'action',                                                                                                    //
    actionText: 'Send_a_test_push_to_my_user',                                                                         //
    enableQuery: {                                                                                                     //
      _id: 'Push_enable',                                                                                              //
      value: true                                                                                                      //
    }                                                                                                                  //
  });                                                                                                                  //
  this.section('Certificates_and_Keys', function () {                                                                  //
    this.add('Push_apn_passphrase', '', {                                                                              //
      type: 'string'                                                                                                   //
    });                                                                                                                //
    this.add('Push_apn_key', '', {                                                                                     //
      type: 'string',                                                                                                  //
      multiline: true                                                                                                  //
    });                                                                                                                //
    this.add('Push_apn_cert', '', {                                                                                    //
      type: 'string',                                                                                                  //
      multiline: true                                                                                                  //
    });                                                                                                                //
    this.add('Push_apn_dev_passphrase', '', {                                                                          //
      type: 'string'                                                                                                   //
    });                                                                                                                //
    this.add('Push_apn_dev_key', '', {                                                                                 //
      type: 'string',                                                                                                  //
      multiline: true                                                                                                  //
    });                                                                                                                //
    this.add('Push_apn_dev_cert', '', {                                                                                //
      type: 'string',                                                                                                  //
      multiline: true                                                                                                  //
    });                                                                                                                //
    this.add('Push_gcm_api_key', '', {                                                                                 //
      type: 'string'                                                                                                   //
    });                                                                                                                //
    return this.add('Push_gcm_project_number', '', {                                                                   //
      type: 'string',                                                                                                  //
      "public": true                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
  return this.section('Privacy', function () {                                                                         //
    this.add('Push_show_username_room', true, {                                                                        //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    return this.add('Push_show_message', true, {                                                                       //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Layout', function () {                                                                   //
  this.section('Content', function () {                                                                                //
    this.add('Layout_Home_Title', 'Home', {                                                                            //
      type: 'string',                                                                                                  //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Layout_Home_Body', 'Welcome to Rocket.Chat <br> Go to APP SETTINGS -> Layout to customize this intro.', {
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Layout_Terms_of_Service', 'Terms of Service <br> Go to APP SETTINGS -> Layout to customize this page.', {
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Layout_Login_Terms', 'By proceeding you are agreeing to our <a href="/terms-of-service">Terms of Service</a> and <a href="/privacy-policy">Privacy Policy</a>.', {
      type: 'string',                                                                                                  //
      multiline: true,                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    this.add('Layout_Privacy_Policy', 'Privacy Policy <br> Go to APP SETTINGS -> Layout to customize this page.', {    //
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      multiline: true,                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    return this.add('Layout_Sidenav_Footer', '<img style="left: 10px; position: absolute;" src="/assets/logo.png" />', {
      type: 'code',                                                                                                    //
      code: 'text/html',                                                                                               //
      "public": true,                                                                                                  //
      i18nDescription: 'Layout_Sidenav_Footer_description'                                                             //
    });                                                                                                                //
  });                                                                                                                  //
  this.section('Custom Scripts', function () {                                                                         //
    this.add('Custom_Script_Logged_Out', '//Add your script', {                                                        //
      type: 'code',                                                                                                    //
      multiline: true,                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    return this.add('Custom_Script_Logged_In', '//Add your script', {                                                  //
      type: 'code',                                                                                                    //
      multiline: true,                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
  return this.section('User Interface', function () {                                                                  //
    this.add('UI_DisplayRoles', true, {                                                                                //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
    return this.add('UI_Merge_Channels_Groups', true, {                                                                //
      type: 'boolean',                                                                                                 //
      "public": true                                                                                                   //
    });                                                                                                                //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.addGroup('Logs', function () {                                                                     //
  this.add('Log_Level', '0', {                                                                                         //
    type: 'select',                                                                                                    //
    values: [{                                                                                                         //
      key: '0',                                                                                                        //
      i18nLabel: '0_Errors_Only'                                                                                       //
    }, {                                                                                                               //
      key: '1',                                                                                                        //
      i18nLabel: '1_Errors_and_Information'                                                                            //
    }, {                                                                                                               //
      key: '2',                                                                                                        //
      i18nLabel: '2_Erros_Information_and_Debug'                                                                       //
    }],                                                                                                                //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Log_Package', false, {                                                                                     //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  this.add('Log_File', false, {                                                                                        //
    type: 'boolean',                                                                                                   //
    "public": true                                                                                                     //
  });                                                                                                                  //
  return this.add('Log_View_Limit', 1000, {                                                                            //
    type: 'int'                                                                                                        //
  });                                                                                                                  //
});                                                                                                                    //
                                                                                                                       //
RocketChat.settings.init();                                                                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"settings.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/publications/settings.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var slice = [].slice;                                                                                                  // 1
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
  'public-settings/get': function(updatedAt) {                                                                         //
    var result;                                                                                                        // 3
    this.unblock();                                                                                                    //
    if (updatedAt instanceof Date) {                                                                                   //
      result = {                                                                                                       //
        update: RocketChat.models.Settings.findNotHiddenPublicUpdatedAfter(updatedAt).fetch(),                         //
        remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {                                          //
          hidden: {                                                                                                    //
            $ne: true                                                                                                  //
          },                                                                                                           //
          "public": true                                                                                               //
        }, {                                                                                                           //
          fields: {                                                                                                    //
            _id: 1,                                                                                                    //
            _deletedAt: 1                                                                                              //
          }                                                                                                            //
        }).fetch()                                                                                                     //
      };                                                                                                               //
      return result;                                                                                                   // 10
    }                                                                                                                  //
    return RocketChat.models.Settings.findNotHiddenPublic().fetch();                                                   // 12
  },                                                                                                                   //
  'private-settings/get': function(updatedAt) {                                                                        //
    if (!Meteor.userId()) {                                                                                            //
      return [];                                                                                                       // 16
    }                                                                                                                  //
    this.unblock();                                                                                                    //
    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'view-privileged-setting')) {                                 //
      return [];                                                                                                       // 21
    }                                                                                                                  //
    if (updatedAt instanceof Date) {                                                                                   //
      return RocketChat.models.Settings.dinamicFindChangesAfter('findNotHidden', updatedAt);                           // 24
    }                                                                                                                  //
    return RocketChat.models.Settings.findNotHidden().fetch();                                                         // 26
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
RocketChat.models.Settings.on('change', function() {                                                                   // 29
  var args, i, len, record, records, results, type;                                                                    // 30
  type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];                                   //
  records = RocketChat.models.Settings.getChangedRecords(type, args[0]);                                               //
  results = [];                                                                                                        // 32
  for (i = 0, len = records.length; i < len; i++) {                                                                    //
    record = records[i];                                                                                               //
    if (record["public"] === true) {                                                                                   //
      RocketChat.Notifications.notifyAll('public-settings-changed', type, _.pick(record, '_id', 'value'));             //
    }                                                                                                                  //
    results.push(RocketChat.Notifications.notifyAll('private-settings-changed', type, record));                        //
  }                                                                                                                    // 32
  return results;                                                                                                      //
});                                                                                                                    // 29
                                                                                                                       //
RocketChat.Notifications.streamAll.allowRead('private-settings-changed', function() {                                  // 39
  if (this.userId == null) {                                                                                           //
    return false;                                                                                                      // 40
  }                                                                                                                    //
  return RocketChat.authz.hasPermission(this.userId, 'view-privileged-setting');                                       // 42
});                                                                                                                    // 39
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addOAuthService.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addOAuthService.coffee.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  addOAuthService: function(name) {                                                                                    //
    check(name, String);                                                                                               //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 7
        method: 'addOAuthService'                                                                                      //
      });                                                                                                              //
    }                                                                                                                  //
    if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {                               //
      throw new Meteor.Error('error-action-not-allowed', 'Adding OAuth Services is not allowed', {                     // 10
        method: 'addOAuthService',                                                                                     //
        action: 'Adding_OAuth_Services'                                                                                //
      });                                                                                                              //
    }                                                                                                                  //
    name = name.toLowerCase().replace(/[^a-z0-9]/g, '');                                                               //
    name = s.capitalize(name);                                                                                         //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name, false, {                                                  //
      type: 'boolean',                                                                                                 //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Enable',                                                                       //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_url", '', {                                            //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'URL',                                                                                                //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_token_path", '/oauth/token', {                         //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Token_Path',                                                                   //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_identity_path", '/me', {                               //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Identity_Path',                                                                //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_authorize_path", '/oauth/authorize', {                 //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Authorize_Path',                                                               //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_scope", 'openid', {                                    //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Scope',                                                                        //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_token_sent_via", 'payload', {                          //
      type: 'select',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Token_Sent_Via',                                                               //
      persistent: true,                                                                                                //
      values: [                                                                                                        //
        {                                                                                                              //
          key: 'header',                                                                                               //
          i18nLabel: 'Header'                                                                                          //
        }, {                                                                                                           //
          key: 'payload',                                                                                              //
          i18nLabel: 'Payload'                                                                                         //
        }                                                                                                              //
      ]                                                                                                                //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_id", '', {                                             //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_id',                                                                           //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_secret", '', {                                         //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Secret',                                                                       //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_login_style", 'popup', {                               //
      type: 'select',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Login_Style',                                                                  //
      persistent: true,                                                                                                //
      values: [                                                                                                        //
        {                                                                                                              //
          key: 'redirect',                                                                                             //
          i18nLabel: 'Redirect'                                                                                        //
        }, {                                                                                                           //
          key: 'popup',                                                                                                //
          i18nLabel: 'Popup'                                                                                           //
        }, {                                                                                                           //
          key: '',                                                                                                     //
          i18nLabel: 'Default'                                                                                         //
        }                                                                                                              //
      ]                                                                                                                //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_button_label_text", '', {                              //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Text',                                                            //
      persistent: true                                                                                                 //
    });                                                                                                                //
    RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_button_label_color", '#FFFFFF', {                      //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Color',                                                           //
      persistent: true                                                                                                 //
    });                                                                                                                //
    return RocketChat.settings.add("Accounts_OAuth_Custom_" + name + "_button_color", '#13679A', {                     //
      type: 'string',                                                                                                  //
      group: 'OAuth',                                                                                                  //
      section: "Custom OAuth: " + name,                                                                                //
      i18nLabel: 'Accounts_OAuth_Custom_Button_Color',                                                                 //
      persistent: true                                                                                                 //
    });                                                                                                                //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUserToRoom.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  addUserToRoom: function(data) {                                                                                      //
    var fromId, newUser, room;                                                                                         // 3
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 4
        method: 'addUserToRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    if (!Match.test(data != null ? data.rid : void 0, String)) {                                                       //
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                   // 7
        method: 'addUserToRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    if (!Match.test(data != null ? data.username : void 0, String)) {                                                  //
      throw new Meteor.Error('error-invalid-username', 'Invalid username', {                                           // 10
        method: 'addUserToRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    room = RocketChat.models.Rooms.findOneById(data.rid);                                                              //
    if (room.usernames.indexOf(Meteor.user().username) === -1) {                                                       //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 15
        method: 'addUserToRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    fromId = Meteor.userId();                                                                                          //
    if (!RocketChat.authz.hasPermission(fromId, 'add-user-to-room', room._id)) {                                       //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 19
        method: 'addUserToRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    if (room.t === 'd') {                                                                                              //
      throw new Meteor.Error('error-cant-invite-for-direct-room', 'Can\'t invite user to direct rooms', {              // 22
        method: 'addUserToRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    newUser = RocketChat.models.Users.findOneByUsername(data.username);                                                //
    RocketChat.addUserToRoom(data.rid, newUser, Meteor.user());                                                        //
    return true;                                                                                                       // 28
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/archiveRoom.coffee.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  archiveRoom: function(rid) {                                                                                         //
    var room;                                                                                                          // 4
    check(rid, String);                                                                                                //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 7
        method: 'archiveRoom'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    room = RocketChat.models.Rooms.findOneById(rid);                                                                   //
    if (!room) {                                                                                                       //
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                   // 12
        method: 'archiveRoom'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'archive-room', room._id)) {                                  //
      throw new Meteor.Error('error-not-authorized', 'Not authorized', {                                               // 15
        method: 'archiveRoom'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.archiveRoom(rid);                                                                                //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkRegistrationSecretURL.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/checkRegistrationSecretURL.coffee.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  checkRegistrationSecretURL: function(hash) {                                                                         //
    check(hash, String);                                                                                               //
    return hash === RocketChat.settings.get('Accounts_RegistrationForm_SecretURL');                                    // 6
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createChannel.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createChannel.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  createChannel: function(name, members, readOnly) {                                                                   //
    var ref;                                                                                                           // 4
    check(name, String);                                                                                               //
    check(members, Match.Optional([String]));                                                                          //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 8
        method: 'createChannel'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    if (RocketChat.authz.hasPermission(Meteor.userId(), 'create-c') !== true) {                                        //
      throw new Meteor.Error('error-not-allowed', "Not allowed", {                                                     // 11
        method: 'createChannel'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.createRoom('c', name, (ref = Meteor.user()) != null ? ref.username : void 0, members, readOnly);
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createPrivateGroup.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createPrivateGroup.coffee.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  createPrivateGroup: function(name, members) {                                                                        //
    var ref;                                                                                                           // 4
    check(name, String);                                                                                               //
    check(members, Match.Optional([String]));                                                                          //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 8
        method: 'createPrivateGroup'                                                                                   //
      });                                                                                                              //
    }                                                                                                                  //
    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-p')) {                                                //
      throw new Meteor.Error('error-not-allowed', "Not allowed", {                                                     // 11
        method: 'createPrivateGroup'                                                                                   //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.createRoom('p', name, (ref = Meteor.user()) != null ? ref.username : void 0, members);           // 13
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteMessage.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  deleteMessage: function(message) {                                                                                   //
    var blockDeleteInMinutes, currentTsDiff, deleteAllowed, deleteOwn, hasPermission, msgTs, originalMessage, ref;     // 4
    check(message, Match.ObjectIncluding({                                                                             //
      _id: String                                                                                                      //
    }));                                                                                                               //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 7
        method: 'deleteMessage'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    originalMessage = RocketChat.models.Messages.findOneById(message._id, {                                            //
      fields: {                                                                                                        //
        u: 1,                                                                                                          //
        rid: 1,                                                                                                        //
        file: 1                                                                                                        //
      }                                                                                                                //
    });                                                                                                                //
    if (originalMessage == null) {                                                                                     //
      throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {                                              // 11
        method: 'deleteMessage',                                                                                       //
        action: 'Delete_message'                                                                                       //
      });                                                                                                              //
    }                                                                                                                  //
    hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'delete-message', originalMessage.rid);            //
    deleteAllowed = RocketChat.settings.get('Message_AllowDeleting');                                                  //
    deleteOwn = (originalMessage != null ? (ref = originalMessage.u) != null ? ref._id : void 0 : void 0) === Meteor.userId();
    if (!(hasPermission || (deleteAllowed && deleteOwn))) {                                                            //
      throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {                                              // 19
        method: 'deleteMessage',                                                                                       //
        action: 'Delete_message'                                                                                       //
      });                                                                                                              //
    }                                                                                                                  //
    blockDeleteInMinutes = RocketChat.settings.get('Message_AllowDeleting_BlockDeleteInMinutes');                      //
    if ((blockDeleteInMinutes != null) && blockDeleteInMinutes !== 0) {                                                //
      if (originalMessage.ts != null) {                                                                                //
        msgTs = moment(originalMessage.ts);                                                                            //
      }                                                                                                                //
      if (msgTs != null) {                                                                                             //
        currentTsDiff = moment().diff(msgTs, 'minutes');                                                               //
      }                                                                                                                //
      if (currentTsDiff > blockDeleteInMinutes) {                                                                      //
        throw new Meteor.Error('error-message-deleting-blocked', 'Message deleting is blocked', {                      // 26
          method: 'deleteMessage'                                                                                      //
        });                                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    return RocketChat.deleteMessage(originalMessage, Meteor.user());                                                   //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUserOwnAccount.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteUserOwnAccount.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	deleteUserOwnAccount: function () {                                                                                   // 2
		function deleteUserOwnAccount(password) {                                                                            // 2
                                                                                                                       //
			check(password, String);                                                                                            // 4
                                                                                                                       //
			if (!Meteor.userId()) {                                                                                             // 6
				throw new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'deleteUserOwnAccount' });                  // 7
			}                                                                                                                   // 8
                                                                                                                       //
			if (!RocketChat.settings.get('Accounts_AllowDeleteOwnAccount')) {                                                   // 10
				throw new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'deleteUserOwnAccount' });                    // 11
			}                                                                                                                   // 12
                                                                                                                       //
			var userId = Meteor.userId();                                                                                       // 14
			var user = RocketChat.models.Users.findOneById(userId);                                                             // 15
                                                                                                                       //
			if (!user) {                                                                                                        // 17
				throw new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'deleteUserOwnAccount' });                  // 18
			}                                                                                                                   // 19
                                                                                                                       //
			if (user.services && user.services.password && s.trim(user.services.password.bcrypt)) {                             // 21
				var result = Accounts._checkPassword(user, { digest: password, algorithm: 'sha-256' });                            // 22
				if (result.error) {                                                                                                // 23
					throw new Meteor.Error('error-invalid-password', 'Invalid password', { method: 'deleteUserOwnAccount' });         // 24
				}                                                                                                                  // 25
			} else if (user.username !== s.trim(password)) {                                                                    // 26
				throw new Meteor.Error('error-invalid-username', 'Invalid username', { method: 'deleteUserOwnAccount' });          // 27
			}                                                                                                                   // 28
                                                                                                                       //
			Meteor.defer(function () {                                                                                          // 30
				RocketChat.deleteUser(userId);                                                                                     // 31
			});                                                                                                                 // 32
                                                                                                                       //
			return true;                                                                                                        // 34
		}                                                                                                                    // 35
                                                                                                                       //
		return deleteUserOwnAccount;                                                                                         // 2
	}()                                                                                                                   // 2
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomRoles.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getRoomRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getRoomRoles: function () {                                                                                           // 2
		function getRoomRoles(rid) {                                                                                         // 1
                                                                                                                       //
			check(rid, String);                                                                                                 // 4
                                                                                                                       //
			if (!Meteor.userId()) {                                                                                             // 6
				throw new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getRoomRoles' });                          // 7
			}                                                                                                                   // 8
                                                                                                                       //
			check(rid, String);                                                                                                 // 10
                                                                                                                       //
			var options = {                                                                                                     // 12
				sort: {                                                                                                            // 13
					'u.username': 1                                                                                                   // 14
				},                                                                                                                 // 13
				fields: {                                                                                                          // 16
					rid: 1,                                                                                                           // 17
					u: 1,                                                                                                             // 18
					roles: 1                                                                                                          // 19
				}                                                                                                                  // 16
			};                                                                                                                  // 12
                                                                                                                       //
			var roles = RocketChat.models.Roles.find({ scope: 'Subscriptions', description: { $exists: 1, $ne: '' } }).fetch();
			return RocketChat.models.Subscriptions.findByRoomIdAndRoles(rid, _.pluck(roles, '_id'), options).fetch();           // 24
		}                                                                                                                    // 25
                                                                                                                       //
		return getRoomRoles;                                                                                                 // 1
	}()                                                                                                                   // 1
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserRoles.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getUserRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	getUserRoles: function () {                                                                                           // 2
		function getUserRoles() {                                                                                            // 1
                                                                                                                       //
			if (!Meteor.userId()) {                                                                                             // 4
				throw new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'getUserRoles' });                          // 5
			}                                                                                                                   // 6
                                                                                                                       //
			var options = {                                                                                                     // 8
				sort: {                                                                                                            // 9
					'username': 1                                                                                                     // 10
				},                                                                                                                 // 9
				fields: {                                                                                                          // 12
					username: 1,                                                                                                      // 13
					roles: 1                                                                                                          // 14
				}                                                                                                                  // 12
			};                                                                                                                  // 8
                                                                                                                       //
			var roles = RocketChat.models.Roles.find({ scope: 'Users', description: { $exists: 1, $ne: '' } }).fetch();         // 18
			var roleIds = _.pluck(roles, '_id');                                                                                // 19
                                                                                                                       //
			// Security issue: we should not send all user's roles to all clients, only the 'public' roles                      // 21
			// We must remove all roles that are not part of the query from the returned users                                  // 22
			var users = RocketChat.models.Users.findUsersInRoles(roleIds, null, options).fetch();                               // 23
			for (var _iterator = users, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref;                                                                                                          // 24
                                                                                                                       //
				if (_isArray) {                                                                                                    // 24
					if (_i >= _iterator.length) break;                                                                                // 24
					_ref = _iterator[_i++];                                                                                           // 24
				} else {                                                                                                           // 24
					_i = _iterator.next();                                                                                            // 24
					if (_i.done) break;                                                                                               // 24
					_ref = _i.value;                                                                                                  // 24
				}                                                                                                                  // 24
                                                                                                                       //
				var user = _ref;                                                                                                   // 24
                                                                                                                       //
				user.roles = _.intersection(user.roles, roleIds);                                                                  // 25
			}                                                                                                                   // 26
			return users;                                                                                                       // 27
		}                                                                                                                    // 28
                                                                                                                       //
		return getUserRoles;                                                                                                 // 1
	}()                                                                                                                   // 1
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinRoom.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinRoom.coffee.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  joinRoom: function(rid, code) {                                                                                      //
    var room;                                                                                                          // 4
    check(rid, String);                                                                                                //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 8
        method: 'joinRoom'                                                                                             //
      });                                                                                                              //
    }                                                                                                                  //
    room = RocketChat.models.Rooms.findOneById(rid);                                                                   //
    if (room == null) {                                                                                                //
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                   // 13
        method: 'joinRoom'                                                                                             //
      });                                                                                                              //
    }                                                                                                                  //
    if (room.t !== 'c' || RocketChat.authz.hasPermission(Meteor.userId(), 'view-c-room') !== true) {                   //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 16
        method: 'joinRoom'                                                                                             //
      });                                                                                                              //
    }                                                                                                                  //
    if (room.joinCodeRequired === true && code !== room.joinCode) {                                                    //
      throw new Meteor.Error('error-code-invalid', 'Invalid Code', {                                                   // 19
        method: 'joinRoom'                                                                                             //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.addUserToRoom(rid, Meteor.user());                                                               //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinDefaultChannels.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinDefaultChannels.coffee.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  joinDefaultChannels: function(silenced) {                                                                            //
    check(silenced, Match.Optional(Boolean));                                                                          //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 6
        method: 'joinDefaultChannels'                                                                                  //
      });                                                                                                              //
    }                                                                                                                  //
    this.unblock();                                                                                                    //
    return RocketChat.addUserToDefaultChannels(Meteor.user(), silenced);                                               //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"leaveRoom.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/leaveRoom.coffee.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  leaveRoom: function(rid) {                                                                                           //
    var fromId, numOwners, room, user;                                                                                 // 4
    check(rid, String);                                                                                                //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 7
        method: 'leaveRoom'                                                                                            //
      });                                                                                                              //
    }                                                                                                                  //
    this.unblock();                                                                                                    //
    fromId = Meteor.userId();                                                                                          //
    room = RocketChat.models.Rooms.findOneById(rid);                                                                   //
    user = Meteor.user();                                                                                              //
    if (room.t === 'd') {                                                                                              //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 16
        method: 'leaveRoom'                                                                                            //
      });                                                                                                              //
    }                                                                                                                  //
    if (RocketChat.authz.hasRole(user._id, 'owner', room._id)) {                                                       //
      numOwners = RocketChat.authz.getUsersInRole('owner', room._id).fetch().length;                                   //
      if (numOwners === 1) {                                                                                           //
        throw new Meteor.Error('error-you-are-last-owner', 'You are the last owner. Please set new owner before leaving the room.', {
          method: 'leaveRoom'                                                                                          //
        });                                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    return RocketChat.removeUserFromRoom(rid, Meteor.user());                                                          //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeOAuthService.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/removeOAuthService.coffee.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  removeOAuthService: function(name) {                                                                                 //
    check(name, String);                                                                                               //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 7
        method: 'removeOAuthService'                                                                                   //
      });                                                                                                              //
    }                                                                                                                  //
    if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {                               //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 10
        method: 'removeOAuthService'                                                                                   //
      });                                                                                                              //
    }                                                                                                                  //
    name = name.toLowerCase().replace(/[^a-z0-9]/g, '');                                                               //
    name = s.capitalize(name);                                                                                         //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name);                                                   //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_url");                                          //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_token_path");                                   //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_identity_path");                                //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_authorize_path");                               //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_scope");                                        //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_token_sent_via");                               //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_id");                                           //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_secret");                                       //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_button_label_text");                            //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_button_label_color");                           //
    RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_button_color");                                 //
    return RocketChat.settings.removeById("Accounts_OAuth_Custom_" + name + "_login_style");                           //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"robotMethods.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/robotMethods.coffee.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  'robot.modelCall': function(model, method, args) {                                                                   //
    var call, ref;                                                                                                     // 4
    check(model, String);                                                                                              //
    check(method, String);                                                                                             //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 8
        method: 'robot.modelCall'                                                                                      //
      });                                                                                                              //
    }                                                                                                                  //
    if (!RocketChat.authz.hasRole(Meteor.userId(), 'robot')) {                                                         //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 11
        method: 'robot.modelCall'                                                                                      //
      });                                                                                                              //
    }                                                                                                                  //
    if (!_.isFunction((ref = RocketChat.models[model]) != null ? ref[method] : void 0)) {                              //
      throw new Meteor.Error('error-invalid-method', 'Invalid method', {                                               // 14
        method: 'robot.modelCall'                                                                                      //
      });                                                                                                              //
    }                                                                                                                  //
    call = RocketChat.models[model][method].apply(RocketChat.models[model], args);                                     //
    if ((call != null ? typeof call.fetch === "function" ? call.fetch() : void 0 : void 0) != null) {                  //
      return call.fetch();                                                                                             // 19
    } else {                                                                                                           //
      return call;                                                                                                     // 21
    }                                                                                                                  //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveSetting.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/saveSetting.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	saveSetting: function () {                                                                                            // 2
		function saveSetting(_id, value) {                                                                                   // 2
			if (Meteor.userId() === null) {                                                                                     // 3
				throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {                            // 4
					method: 'saveSetting'                                                                                             // 5
				});                                                                                                                // 4
			}                                                                                                                   // 7
                                                                                                                       //
			if (!RocketChat.authz.hasPermission(Meteor.userId(), 'edit-privileged-setting')) {                                  // 9
				throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {                            // 10
					method: 'saveSetting'                                                                                             // 11
				});                                                                                                                // 10
			}                                                                                                                   // 13
                                                                                                                       //
			//Verify the _id passed in is a string.                                                                             // 15
			check(_id, String);                                                                                                 // 16
                                                                                                                       //
			var setting = RocketChat.models.Settings.findOneById(_id);                                                          // 18
                                                                                                                       //
			//Verify the value is what it should be                                                                             // 20
			switch (setting.type) {                                                                                             // 21
				case 'roomPick':                                                                                                   // 22
					check(value, [Object]);                                                                                           // 23
					break;                                                                                                            // 24
				case 'boolean':                                                                                                    // 25
					check(value, Boolean);                                                                                            // 26
					break;                                                                                                            // 27
				case 'int':                                                                                                        // 28
					check(value, Number);                                                                                             // 29
					break;                                                                                                            // 30
				default:                                                                                                           // 31
					check(value, String);                                                                                             // 32
					break;                                                                                                            // 33
			}                                                                                                                   // 21
                                                                                                                       //
			RocketChat.settings.updateById(_id, value);                                                                         // 36
			return true;                                                                                                        // 37
		}                                                                                                                    // 38
                                                                                                                       //
		return saveSetting;                                                                                                  // 2
	}()                                                                                                                   // 2
});                                                                                                                    // 1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendInvitationEmail.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendInvitationEmail.coffee.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       //
  sendInvitationEmail: function () {                                                                                   //
    function sendInvitationEmail(emails) {                                                                             //
      var email, error, footer, header, html, i, len, ref, ref1, rfcMailPattern, subject, validEmails;                 //
      check(emails, [String]);                                                                                         //
      if (!Meteor.userId()) {                                                                                          //
        throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                 //
          method: 'sendInvitationEmail'                                                                                //
        });                                                                                                            //
      }                                                                                                                //
      if (!RocketChat.authz.hasRole(Meteor.userId(), 'admin')) {                                                       //
        throw new Meteor.Error('error-not-allowed', "Not allowed", {                                                   //
          method: 'sendInvitationEmail'                                                                                //
        });                                                                                                            //
      }                                                                                                                //
      rfcMailPattern = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      validEmails = _.compact(_.map(emails, function (email) {                                                         //
        if (rfcMailPattern.test(email)) {                                                                              //
          return email;                                                                                                //
        }                                                                                                              //
      }));                                                                                                             //
      header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || "");                         //
      footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || "");                         //
      if (RocketChat.settings.get('Invitation_Customized')) {                                                          //
        subject = RocketChat.settings.get('Invitation_Subject');                                                       //
        html = RocketChat.settings.get('Invitation_HTML');                                                             //
      } else {                                                                                                         //
        subject = TAPi18n.__('Invitation_Subject_Default', {                                                           //
          lng: ((ref = Meteor.user()) != null ? ref.language : void 0) || RocketChat.settings.get('language') || 'en'  //
        });                                                                                                            //
        html = TAPi18n.__('Invitation_HTML_Default', {                                                                 //
          lng: ((ref1 = Meteor.user()) != null ? ref1.language : void 0) || RocketChat.settings.get('language') || 'en'
        });                                                                                                            //
      }                                                                                                                //
      subject = RocketChat.placeholders.replace(subject);                                                              //
      for (i = 0, len = validEmails.length; i < len; i++) {                                                            //
        email = validEmails[i];                                                                                        //
        this.unblock();                                                                                                //
        html = RocketChat.placeholders.replace(html, {                                                                 //
          email: email                                                                                                 //
        });                                                                                                            //
        try {                                                                                                          //
          Email.send({                                                                                                 //
            to: email,                                                                                                 //
            from: RocketChat.settings.get('From_Email'),                                                               //
            subject: subject,                                                                                          //
            html: header + html + footer                                                                               //
          });                                                                                                          //
        } catch (error1) {                                                                                             //
          error = error1;                                                                                              //
          throw new Meteor.Error('error-email-send-failed', 'Error trying to send email: ' + error.message, {          //
            method: 'sendInvitationEmail',                                                                             //
            message: error.message                                                                                     //
          });                                                                                                          //
        }                                                                                                              //
      }                                                                                                                //
      return validEmails;                                                                                              //
    }                                                                                                                  //
                                                                                                                       //
    return sendInvitationEmail;                                                                                        //
  }()                                                                                                                  //
});                                                                                                                    //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendMessage.coffee.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
  sendMessage: function(message) {                                                                                     //
    var ref, ref1, room, tsDiff, user;                                                                                 // 4
    check(message, Object);                                                                                            //
    if (message.ts) {                                                                                                  //
      tsDiff = Math.abs(moment(message.ts).diff());                                                                    //
      if (tsDiff > 60000) {                                                                                            //
        throw new Meteor.Error('error-message-ts-out-of-sync', 'Message timestamp is out of sync', {                   // 9
          method: 'sendMessage',                                                                                       //
          message_ts: message.ts,                                                                                      //
          server_ts: new Date().getTime()                                                                              //
        });                                                                                                            //
      } else if (tsDiff > 10000) {                                                                                     //
        message.ts = new Date();                                                                                       //
      }                                                                                                                //
    } else {                                                                                                           //
      message.ts = new Date();                                                                                         //
    }                                                                                                                  //
    if (((ref = message.msg) != null ? ref.length : void 0) > RocketChat.settings.get('Message_MaxAllowedSize')) {     //
      throw new Meteor.Error('error-message-size-exceeded', 'Message size exceeds Message_MaxAllowedSize', {           // 16
        method: 'sendMessage'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 19
        method: 'sendMessage'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    user = RocketChat.models.Users.findOneById(Meteor.userId(), {                                                      //
      fields: {                                                                                                        //
        username: 1,                                                                                                   //
        name: 1                                                                                                        //
      }                                                                                                                //
    });                                                                                                                //
    room = Meteor.call('canAccessRoom', message.rid, user._id);                                                        //
    if (!room) {                                                                                                       //
      return false;                                                                                                    // 26
    }                                                                                                                  //
    if (ref1 = user.username, indexOf.call(room.muted || [], ref1) >= 0) {                                             //
      RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {                                                //
        _id: Random.id(),                                                                                              //
        rid: room._id,                                                                                                 //
        ts: new Date,                                                                                                  //
        msg: TAPi18n.__('You_have_been_muted', {}, user.language)                                                      //
      });                                                                                                              //
      return false;                                                                                                    // 35
    }                                                                                                                  //
    if ((message.alias == null) && RocketChat.settings.get('Message_SetNameToAliasEnabled')) {                         //
      message.alias = user.name;                                                                                       //
    }                                                                                                                  //
    if (Meteor.settings["public"].sandstorm) {                                                                         //
      message.sandstormSessionId = this.connection.sandstormSessionId();                                               //
    }                                                                                                                  //
    return RocketChat.sendMessage(user, message, room);                                                                //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
DDPRateLimiter.addRule({                                                                                               // 44
  type: 'method',                                                                                                      //
  name: 'sendMessage',                                                                                                 //
  userId: function(userId) {                                                                                           //
    var ref;                                                                                                           // 48
    return ((ref = RocketChat.models.Users.findOneById(userId)) != null ? ref.username : void 0) !== RocketChat.settings.get('InternalHubot_Username');
  }                                                                                                                    //
}, 5, 1000);                                                                                                           //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendSMTPTestEmail.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendSMTPTestEmail.coffee.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  sendSMTPTestEmail: function() {                                                                                      //
    var error, footer, header, ref, ref1, user;                                                                        // 3
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 4
        method: 'sendSMTPTestEmail'                                                                                    //
      });                                                                                                              //
    }                                                                                                                  //
    user = Meteor.user();                                                                                              //
    if (!((ref = user.emails) != null ? (ref1 = ref[0]) != null ? ref1.address : void 0 : void 0)) {                   //
      throw new Meteor.Error('error-invalid-email', "Invalid email", {                                                 // 8
        method: 'sendSMTPTestEmail'                                                                                    //
      });                                                                                                              //
    }                                                                                                                  //
    this.unblock();                                                                                                    //
    header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || '');                           //
    footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || '');                           //
    console.log('Sending test email to ' + user.emails[0].address);                                                    //
    try {                                                                                                              // 17
      Email.send({                                                                                                     //
        to: user.emails[0].address,                                                                                    //
        from: RocketChat.settings.get('From_Email'),                                                                   //
        subject: "SMTP Test Email",                                                                                    //
        html: header + "<p>You have successfully sent an email</p>" + footer                                           //
      });                                                                                                              //
    } catch (error1) {                                                                                                 //
      error = error1;                                                                                                  //
      throw new Meteor.Error('error-email-send-failed', 'Error trying to send email: ' + error.message, {              // 24
        method: 'sendSMTPTestEmail',                                                                                   //
        message: error.message                                                                                         //
      });                                                                                                              //
    }                                                                                                                  //
    return {                                                                                                           // 26
      message: "Your_mail_was_sent_to_s",                                                                              //
      params: [user.emails[0].address]                                                                                 //
    };                                                                                                                 //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
DDPRateLimiter.addRule({                                                                                               // 32
  type: 'method',                                                                                                      //
  name: 'sendSMTPTestEmail',                                                                                           //
  userId: function(userId) {                                                                                           //
    return true;                                                                                                       // 36
  }                                                                                                                    //
}, 1, 1000);                                                                                                           //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setAdminStatus.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setAdminStatus.coffee.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  setAdminStatus: function(userId, admin) {                                                                            //
    var user;                                                                                                          // 4
    check(userId, String);                                                                                             //
    check(admin, Match.Optional(Boolean));                                                                             //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 8
        method: 'setAdminStatus'                                                                                       //
      });                                                                                                              //
    }                                                                                                                  //
    if (RocketChat.authz.hasPermission(Meteor.userId(), 'assign-admin-role') !== true) {                               //
      throw new Meteor.Error('error-not-allowed', "Not allowed", {                                                     // 11
        method: 'setAdminStatus'                                                                                       //
      });                                                                                                              //
    }                                                                                                                  //
    user = Meteor.users.findOne({                                                                                      //
      _id: userId                                                                                                      //
    }, {                                                                                                               //
      fields: {                                                                                                        //
        username: 1                                                                                                    //
      }                                                                                                                //
    });                                                                                                                //
    if (admin) {                                                                                                       //
      return Meteor.call('authorization:addUserToRole', 'admin', user.username);                                       // 16
    } else {                                                                                                           //
      return Meteor.call('authorization:removeUserFromRole', 'admin', user.username);                                  // 18
    }                                                                                                                  //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setRealName.coffee.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  setRealName: function(name) {                                                                                        //
    var user;                                                                                                          // 4
    check(name, String);                                                                                               //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 7
        method: 'setRealName'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    user = Meteor.user();                                                                                              //
    if (user.name === name) {                                                                                          //
      return name;                                                                                                     // 12
    }                                                                                                                  //
    if (_.trim(name)) {                                                                                                //
      name = _.trim(name);                                                                                             //
    }                                                                                                                  //
    if (!RocketChat.models.Users.setName(Meteor.userId(), name)) {                                                     //
      throw new Meteor.Error('error-could-not-change-name', "Could not change name", {                                 // 18
        method: 'setRealName'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    return name;                                                                                                       // 20
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setUsername.coffee.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  setUsername: function(username) {                                                                                    //
    var nameValidation, user;                                                                                          // 4
    check(username, String);                                                                                           //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 7
        method: 'setUsername'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    user = Meteor.user();                                                                                              //
    if ((user.username != null) && !RocketChat.settings.get("Accounts_AllowUsernameChange")) {                         //
      throw new Meteor.Error('error-not-allowed', "Not allowed", {                                                     // 12
        method: 'setUsername'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    if (user.username === username) {                                                                                  //
      return username;                                                                                                 // 15
    }                                                                                                                  //
    try {                                                                                                              // 17
      nameValidation = new RegExp('^' + RocketChat.settings.get('UTF8_Names_Validation') + '$');                       //
    } catch (error) {                                                                                                  //
      nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');                                                                //
    }                                                                                                                  //
    if (!nameValidation.test(username)) {                                                                              //
      throw new Meteor.Error('username-invalid', (_.escape(username)) + " is not a valid username, use only letters, numbers, dots, hyphens and underscores");
    }                                                                                                                  //
    if (user.username !== void 0) {                                                                                    //
      if (!username.toLowerCase() === user.username.toLowerCase()) {                                                   //
        if (!RocketChat.checkUsernameAvailability(username)) {                                                         //
          throw new Meteor.Error('error-field-unavailable', "<strong>" + _.escape(username) + "</strong> is already in use :(", {
            method: 'setUsername',                                                                                     //
            field: username                                                                                            //
          });                                                                                                          //
        }                                                                                                              //
      }                                                                                                                //
    } else {                                                                                                           //
      if (!RocketChat.checkUsernameAvailability(username)) {                                                           //
        throw new Meteor.Error('error-field-unavailable', "<strong>" + _.escape(username) + "</strong> is already in use :(", {
          method: 'setUsername',                                                                                       //
          field: username                                                                                              //
        });                                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    if (!RocketChat.setUsername(user._id, username)) {                                                                 //
      throw new Meteor.Error('error-could-not-change-username', "Could not change username", {                         // 34
        method: 'setUsername'                                                                                          //
      });                                                                                                              //
    }                                                                                                                  //
    return username;                                                                                                   // 36
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
RocketChat.RateLimiter.limitMethod('setUsername', 1, 1000, {                                                           // 38
  userId: function(userId) {                                                                                           //
    return true;                                                                                                       // 39
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"insertOrUpdateUser.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/insertOrUpdateUser.coffee.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  insertOrUpdateUser: function(userData) {                                                                             //
    check(userData, Object);                                                                                           //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 7
        method: 'insertOrUpdateUser'                                                                                   //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.saveUser(Meteor.userId(), userData);                                                             // 9
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setEmail.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({                                                                                                       // 1
	setEmail: function () {                                                                                               // 2
		function setEmail(email) {                                                                                           // 2
                                                                                                                       //
			check(email, String);                                                                                               // 4
                                                                                                                       //
			if (!Meteor.userId()) {                                                                                             // 6
				throw new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'setEmail' });                              // 7
			}                                                                                                                   // 8
                                                                                                                       //
			var user = Meteor.user();                                                                                           // 10
                                                                                                                       //
			if (!RocketChat.settings.get('Accounts_AllowEmailChange')) {                                                        // 12
				throw new Meteor.Error('error-action-not-allowed', 'Changing email is not allowed', { method: 'setEmail', action: 'Changing_email' });
			}                                                                                                                   // 14
                                                                                                                       //
			if (user.emails && user.emails[0] && user.emails[0].address === email) {                                            // 16
				return email;                                                                                                      // 17
			}                                                                                                                   // 18
                                                                                                                       //
			if (!RocketChat.setEmail(user._id, email)) {                                                                        // 20
				throw new Meteor.Error('error-could-not-change-email', 'Could not change email', { method: 'setEmail' });          // 21
			}                                                                                                                   // 22
                                                                                                                       //
			return email;                                                                                                       // 24
		}                                                                                                                    // 25
                                                                                                                       //
		return setEmail;                                                                                                     // 2
	}()                                                                                                                   // 2
});                                                                                                                    // 1
                                                                                                                       //
RocketChat.RateLimiter.limitMethod('setEmail', 1, 1000, {                                                              // 28
	userId: function () {                                                                                                 // 29
		function userId() /*userId*/{                                                                                        // 29
			return true;                                                                                                        // 29
		}                                                                                                                    // 29
                                                                                                                       //
		return userId;                                                                                                       // 29
	}()                                                                                                                   // 29
});                                                                                                                    // 28
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"restartServer.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/restartServer.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  restart_server: function() {                                                                                         //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 4
        method: 'restart_server'                                                                                       //
      });                                                                                                              //
    }                                                                                                                  //
    if (RocketChat.authz.hasRole(Meteor.userId(), 'admin') !== true) {                                                 //
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {                                                     // 7
        method: 'restart_server'                                                                                       //
      });                                                                                                              //
    }                                                                                                                  //
    Meteor.setTimeout(function() {                                                                                     //
      return process.exit(1);                                                                                          //
    }, 2000);                                                                                                          //
    return {                                                                                                           // 13
      message: "The_server_will_restart_in_s_seconds",                                                                 //
      params: [2]                                                                                                      //
    };                                                                                                                 //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unarchiveRoom.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  unarchiveRoom: function(rid) {                                                                                       //
    var room;                                                                                                          // 4
    check(rid, String);                                                                                                //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {                                                   // 7
        method: 'unarchiveRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    room = RocketChat.models.Rooms.findOneById(rid);                                                                   //
    if (!room) {                                                                                                       //
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {                                                   // 12
        method: 'unarchiveRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'unarchive-room', room._id)) {                                //
      throw new Meteor.Error('error-not-authorized', 'Not authorized', {                                               // 15
        method: 'unarchiveRoom'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    return RocketChat.unarchiveRoom(rid);                                                                              //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/updateMessage.coffee.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
Meteor.methods({                                                                                                       // 1
  updateMessage: function(message) {                                                                                   //
    var blockEditInMinutes, currentTsDiff, editAllowed, editOwn, hasPermission, me, msgTs, originalMessage, ref;       // 4
    check(message, Match.ObjectIncluding({                                                                             //
      _id: String                                                                                                      //
    }));                                                                                                               //
    if (!Meteor.userId()) {                                                                                            //
      throw new Meteor.Error('error-invalid-user', "Invalid user", {                                                   // 7
        method: 'updateMessage'                                                                                        //
      });                                                                                                              //
    }                                                                                                                  //
    originalMessage = RocketChat.models.Messages.findOneById(message._id);                                             //
    if ((originalMessage != null ? originalMessage._id : void 0) == null) {                                            //
      return;                                                                                                          // 12
    }                                                                                                                  //
    hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'edit-message', message.rid);                      //
    editAllowed = RocketChat.settings.get('Message_AllowEditing');                                                     //
    editOwn = (originalMessage != null ? (ref = originalMessage.u) != null ? ref._id : void 0 : void 0) === Meteor.userId();
    me = RocketChat.models.Users.findOneById(Meteor.userId());                                                         //
    if (!(hasPermission || (editAllowed && editOwn))) {                                                                //
      throw new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {                              // 21
        method: 'updateMessage',                                                                                       //
        action: 'Message_editing'                                                                                      //
      });                                                                                                              //
    }                                                                                                                  //
    blockEditInMinutes = RocketChat.settings.get('Message_AllowEditing_BlockEditInMinutes');                           //
    if ((blockEditInMinutes != null) && blockEditInMinutes !== 0) {                                                    //
      if (originalMessage.ts != null) {                                                                                //
        msgTs = moment(originalMessage.ts);                                                                            //
      }                                                                                                                //
      if (msgTs != null) {                                                                                             //
        currentTsDiff = moment().diff(msgTs, 'minutes');                                                               //
      }                                                                                                                //
      if (currentTsDiff > blockEditInMinutes) {                                                                        //
        throw new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {                        // 28
          method: 'updateMessage'                                                                                      //
        });                                                                                                            //
      }                                                                                                                //
    }                                                                                                                  //
    return RocketChat.updateMessage(message, Meteor.user());                                                           //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterBadWords.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterBadWords.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var Filter = Npm.require('bad-words');                                                                                 // 1
                                                                                                                       //
RocketChat.callbacks.add('beforeSaveMessage', function (message) {                                                     // 3
                                                                                                                       //
	if (RocketChat.settings.get('Message_AllowBadWordsFilter')) {                                                         // 5
		var badWordsList = RocketChat.settings.get('Message_BadWordsFilterList');                                            // 6
		var options;                                                                                                         // 7
                                                                                                                       //
		// Add words to the blacklist                                                                                        // 9
		if (!!badWordsList && badWordsList.length) {                                                                         // 10
			options = {                                                                                                         // 11
				list: badWordsList.split(',')                                                                                      // 12
			};                                                                                                                  // 11
		}                                                                                                                    // 14
		var filter = new Filter(options);                                                                                    // 15
		message.msg = filter.clean(message.msg);                                                                             // 16
	}                                                                                                                     // 17
                                                                                                                       //
	return message;                                                                                                       // 19
}, 1, 'filterBadWords');                                                                                               // 21
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterATAllTag.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterATAllTag.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.callbacks.add('beforeSaveMessage', function (message) {                                                     // 1
	// Test if the message mentions include @all.                                                                         // 2
	if (message.mentions != null && _.pluck(message.mentions, '_id').some(function (item) {                               // 3
		return item === 'all';                                                                                               // 4
	})) {                                                                                                                 // 4
                                                                                                                       //
		// Check if the user has permissions to use @all.                                                                    // 6
		if (!RocketChat.authz.hasPermission(message.u._id, 'mention-all')) {                                                 // 7
                                                                                                                       //
			// Get the language of the user for the error notification.                                                         // 9
			var language = RocketChat.models.Users.findOneById(message.u._id).language;                                         // 10
			var action = TAPi18n.__('Notify_all_in_this_room', {}, language);                                                   // 11
                                                                                                                       //
			// Add a notification to the chat, informing the user that this                                                     // 13
			// action is not allowed.                                                                                           // 14
			RocketChat.Notifications.notifyUser(message.u._id, 'message', {                                                     // 15
				_id: Random.id(),                                                                                                  // 16
				rid: message.rid,                                                                                                  // 17
				ts: new Date(),                                                                                                    // 18
				msg: TAPi18n.__('error-action-not-allowed', { action: action }, language)                                          // 19
			});                                                                                                                 // 15
                                                                                                                       //
			// Also throw to stop propagation of 'sendMessage'.                                                                 // 22
			throw new Meteor.Error('error-action-not-allowed', 'Notify all in this room not allowed', {                         // 23
				method: 'filterATAllTag',                                                                                          // 27
				action: 'Notify_all_in_this_room'                                                                                  // 28
			});                                                                                                                 // 26
		}                                                                                                                    // 31
	}                                                                                                                     // 32
                                                                                                                       //
	return message;                                                                                                       // 34
}, 1, 'filterATAllTag');                                                                                               // 36
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"defaultRoomTypes.coffee.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/startup/defaultRoomTypes.coffee.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;
RocketChat.roomTypes.add(null, 0, {                                                                                    // 1
  template: 'starredRooms',                                                                                            //
  icon: 'icon-star'                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
RocketChat.roomTypes.add('c', 10, {                                                                                    // 5
  template: 'channels',                                                                                                //
  icon: 'icon-hash',                                                                                                   //
  route: {                                                                                                             //
    name: 'channel',                                                                                                   //
    path: '/channel/:name',                                                                                            //
    action: function(params, queryParams) {                                                                            //
      openRoom('c', params.name);                                                                                      //
      return RocketChat.TabBar.showGroup('channel');                                                                   //
    }                                                                                                                  //
  },                                                                                                                   //
  findRoom: function(identifier) {                                                                                     //
    var query;                                                                                                         // 16
    query = {                                                                                                          //
      t: 'c',                                                                                                          //
      name: identifier                                                                                                 //
    };                                                                                                                 //
    return ChatRoom.findOne(query);                                                                                    // 19
  },                                                                                                                   //
  roomName: function(roomData) {                                                                                       //
    return roomData.name;                                                                                              // 22
  },                                                                                                                   //
  condition: function() {                                                                                              //
    return RocketChat.authz.hasAtLeastOnePermission(['view-c-room', 'view-joined-room']);                              // 25
  },                                                                                                                   //
  showJoinLink: function(roomId) {                                                                                     //
    return !!ChatRoom.findOne({                                                                                        // 28
      _id: roomId,                                                                                                     //
      t: 'c'                                                                                                           //
    });                                                                                                                //
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
RocketChat.roomTypes.add('d', 20, {                                                                                    // 30
  template: 'directMessages',                                                                                          //
  icon: 'icon-at',                                                                                                     //
  route: {                                                                                                             //
    name: 'direct',                                                                                                    //
    path: '/direct/:username',                                                                                         //
    action: function(params, queryParams) {                                                                            //
      openRoom('d', params.username);                                                                                  //
      return RocketChat.TabBar.showGroup('directmessage');                                                             //
    },                                                                                                                 //
    link: function(sub) {                                                                                              //
      return {                                                                                                         // 40
        username: sub.name                                                                                             //
      };                                                                                                               //
    }                                                                                                                  //
  },                                                                                                                   //
  findRoom: function(identifier, user) {                                                                               //
    var query;                                                                                                         // 42
    query = {                                                                                                          //
      t: 'd',                                                                                                          //
      usernames: {                                                                                                     //
        $all: [identifier, user.username]                                                                              //
      }                                                                                                                //
    };                                                                                                                 //
    return ChatRoom.findOne(query);                                                                                    // 46
  },                                                                                                                   //
  roomName: function(roomData) {                                                                                       //
    var ref;                                                                                                           // 48
    return (ref = ChatSubscription.findOne({                                                                           // 48
      rid: roomData._id                                                                                                //
    }, {                                                                                                               //
      fields: {                                                                                                        //
        name: 1                                                                                                        //
      }                                                                                                                //
    })) != null ? ref.name : void 0;                                                                                   //
  },                                                                                                                   //
  condition: function() {                                                                                              //
    return RocketChat.authz.hasAtLeastOnePermission(['view-d-room', 'view-joined-room']);                              // 50
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
RocketChat.roomTypes.add('p', 30, {                                                                                    // 52
  template: 'privateGroups',                                                                                           //
  icon: 'icon-lock',                                                                                                   //
  route: {                                                                                                             //
    name: 'group',                                                                                                     //
    path: '/group/:name',                                                                                              //
    action: function(params, queryParams) {                                                                            //
      openRoom('p', params.name);                                                                                      //
      return RocketChat.TabBar.showGroup('privategroup');                                                              //
    }                                                                                                                  //
  },                                                                                                                   //
  findRoom: function(identifier) {                                                                                     //
    var query;                                                                                                         // 62
    query = {                                                                                                          //
      t: 'p',                                                                                                          //
      name: identifier                                                                                                 //
    };                                                                                                                 //
    return ChatRoom.findOne(query);                                                                                    // 65
  },                                                                                                                   //
  roomName: function(roomData) {                                                                                       //
    return roomData.name;                                                                                              // 67
  },                                                                                                                   //
  condition: function() {                                                                                              //
    return RocketChat.authz.hasAllPermission('view-p-room');                                                           // 69
  }                                                                                                                    //
});                                                                                                                    //
                                                                                                                       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"rocketchat.info.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/rocketchat.info.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Info = {
    "version": "0.45.0",
    "build": {
        "date": "2016-11-01T02:17:27.764Z",
        "nodeVersion": "v4.6.1",
        "arch": "x64",
        "platform": "linux",
        "osRelease": "3.19.0-66-generic",
        "totalMemory": 7843983360,
        "freeMemory": 2162630656,
        "cpus": 2
    },
    "travis": {
        "buildNumber": "6317",
        "branch": "0.45.0",
        "tag": "0.45.0"
    },
    "commit": {
        "hash": "a9de8a40ce1c82be56fb6ace00ad91fab57deace",
        "date": "Tue Nov 1 00:08:40 2016 -0200",
        "author": "Gabriel Engel",
        "subject": "version bump to 0.45.0",
        "tag": "0.45.0",
        "branch": "HEAD"
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"node_modules":{"bugsnag":{"package.json":function(require,exports){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// .npm/package/node_modules/bugsnag/package.json                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
exports.name = "bugsnag";
exports.version = "1.8.0";
exports.main = "./lib/bugsnag.js";

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"lib":{"bugsnag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// node_modules/meteor/rocketchat:lib/node_modules/bugsnag/lib/bugsnag.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var domain = require("domain"),
    path = require("path"),
    Utils = require("./utils"),
    Logger = require("./logger"),
    Configuration = require("./configuration"),
    BugsnagError = require("./error"),
    Notification = require("./notification"),
    requestInfo = require("./request_info");

// Ensure we get all stack frames from thrown errors.
Error.stackTraceLimit = Infinity;

function autoNotifyCallback(notifiedError, uncaughtError) {
    if (!uncaughtError) {
        uncaughtError = notifiedError.domain;
    }
    return function(error) {
        if (error) {
            Configuration.logger.error("Bugsnag: error notifying bugsnag.com - " + error);
        }
        if (Configuration.onUncaughtError && uncaughtError) {
            return Configuration.onUncaughtError(notifiedError);
        }
    };
}

var unCaughtErrorHandlerAdded = false;

var Bugsnag = {};

// This allows people to directly play with metaData without knowledge of Configuration
Object.defineProperty(Bugsnag, 'metaData', {
    get: function() {
        return Configuration.metaData;
    },
    set: function(metaData) {
        Configuration.metaData = metaData;
    }
});

// This allows people to directly play with requestData without knowledge of domains
Object.defineProperty(Bugsnag, 'requestData', {
    get: function () {
        return process.domain && process.domain._bugsnagOptions;
    },

    set: function (requestData) {
        if (process.domain) {
            process.domain._bugsnagOptions = requestData;
        }
    }
});

// Register sets api key and will configure bugsnag based on options
Bugsnag.register = function(apiKey, options) {
    if (!options) {
        options = {};
    }
    Configuration.apiKey = apiKey;
    Bugsnag.configure(options);
    Configuration.logger.info("Registered with apiKey " + apiKey);
    return Bugsnag;
};

// Configure bugsnag using the provided options
Bugsnag.configure = function(options) {
    Configuration.configure(options);

    // If we should auto notify we also configure the uncaught exception handler, we can't do this
    // by default as it changes the way the app response by removing the default handler.
    if (Configuration.autoNotifyUncaught && !unCaughtErrorHandlerAdded) {
        unCaughtErrorHandlerAdded = true;
        Configuration.logger.info("Configuring uncaughtExceptionHandler");
        process.on("uncaughtException", function(err) {
            Bugsnag.notify(err, {
                severity: "error"
            }, autoNotifyCallback(err, true));
        });
    }
};

// Only error is required and that can be a string or error object
Bugsnag.notify = function(error, options, cb) {
    var bugsnagErrors, notification;
    if (Utils.typeOf(options) === "function") {
        cb = options;
        options = {};
    }
    if (!options) {
        options = {};
    }
    if (!Bugsnag.shouldNotify()) {
        if (cb) {
            if (!Configuration.apiKey) {
                cb(new Error("Bugsnag has not been configured with an api key!"));
            } else {
                cb(new Error("Current release stage not permitted to send events to Bugsnag."));
            }
        }
        return;
    }
    Configuration.logger.info("Notifying Bugsnag of exception...\n" + (error && error.stack || error));
    bugsnagErrors = BugsnagError.buildErrors(error, options.errorName);
    delete options.errorName;
    notification = new Notification(bugsnagErrors, options);
    if (Configuration.sendCode === true) {
        notification.loadCode(function () {
            notification.deliver(cb);
        });
    } else {
        notification.deliver(cb);
    }
};

// The error handler express/connext middleware. Performs a notify
Bugsnag.errorHandler = function(err, req, res, next) {
    Configuration.logger.info("Handling express error: " + (err.stack || err));
    Bugsnag.notify(err, {
        req: req,
        severity: "error"
    }, autoNotifyCallback(err));
    return next(err);
};

// The request middleware for express/connect. Ensures next(err) is called when there is an error, and
// tracks the request for manual notifies.
Bugsnag.requestHandler = function(req, res, next) {
    var dom;
    dom = domain.create();
    dom._bugsnagOptions = {
        cleanedRequest: requestInfo(req)
    };
    dom.on('error', next);
    return dom.run(next);
};

Bugsnag.restifyHandler = function(req, res, route, err) {
    Bugsnag.notify(err, {
        req: req,
        severity: "error"
    }, autoNotifyCallback(err));
};

Bugsnag.koaHandler = function(err, ctx) {
    var request;
    Configuration.logger.info("Handling koa error: " + (err.stack || err));
    request = ctx.req;
    request.protocol = ctx.request.protocol;
    request.host = ctx.request.host.split(':', 1)[0];
    return Bugsnag.notify(err, {
        req: request,
        severity: "error"
    }, autoNotifyCallback(err));
};

// Intercepts the first argument from a callback and interprets it as an error.
// if the error is not null it notifies bugsnag and doesn't call the callback
Bugsnag.intercept = function(cb) {
    if (!cb) {
        cb = (function() {});
    }
    if (process.domain) {
        return process.domain.intercept(cb);
    } else {
        return function() {
            var err = arguments[0];
            var args = Array.prototype.slice.call(arguments, 1);
            if (err && (err instanceof Error)) {
                return Bugsnag.notify(err, {
                    severity: "error"
                }, autoNotifyCallback(err));
            }
            if (cb) {
                return cb.apply(null, args);
            }
        };
    }
};

// Automatically notifies of uncaught exceptions in the callback and error
// event emitters. Returns an event emitter, you can hook into .on("error") if
// you want to.
Bugsnag.autoNotify = function(options, cb) {
    var dom;
    if (Utils.typeOf(options) === "function") {
        cb = options;
        options = {};
    }
    dom = domain.create();
    dom._bugsnagOptions = options;
    options.severity = "error";
    dom.on('error', function(err) {
        return Bugsnag.notify(err, options, autoNotifyCallback(err));
    });
    process.nextTick(function() {
        return dom.run(cb);
    });
    return dom;
};

Bugsnag.shouldNotify = function() {
    return (Configuration.notifyReleaseStages === null || Configuration.notifyReleaseStages.indexOf(Configuration.releaseStage) !== -1) && Configuration.apiKey;
};

Bugsnag.onBeforeNotify = function (callback) {
    if (typeof callback !== "function") {
        throw new Error("must pass a callback to onBeforeNotify");
    }

    Configuration.beforeNotifyCallbacks.push(callback);
};

module.exports = Bugsnag;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}}}}},{"extensions":[".js",".json",".coffee",".info"]});
require("./node_modules/meteor/rocketchat:lib/lib/core.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/debug.js");
require("./node_modules/meteor/rocketchat:lib/lib/settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/configLogger.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/callbacks.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/fileUploadRestrictions.js");
require("./node_modules/meteor/rocketchat:lib/lib/placeholders.js");
require("./node_modules/meteor/rocketchat:lib/lib/promises.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/roomTypesCommon.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/slashCommand.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/Message.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/MessageTypes.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/bugsnag.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/RateLimiter.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/addUserToDefaultChannels.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/addUserToRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/archiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/checkUsernameAvailability.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/checkEmailAvailability.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/createRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/deleteMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/deleteUser.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/removeUserFromRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveUser.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/saveCustomFields.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/sendMessage.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setUserAvatar.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setUsername.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/setEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/unarchiveRoom.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/updateMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/functions/Notifications.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/defaultBlockedDomainsList.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/notifyUsersOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/roomTypes.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/sendEmailOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/sendNotificationsOnMessage.js");
require("./node_modules/meteor/rocketchat:lib/server/lib/validateEmailDomain.js");
require("./node_modules/meteor/rocketchat:lib/server/models/_Base.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Messages.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Reports.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Rooms.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Subscriptions.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Uploads.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/models/Users.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/statsTracker.js");
require("./node_modules/meteor/rocketchat:lib/server/publications/settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addOAuthService.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/addUserToRoom.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/archiveRoom.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/checkRegistrationSecretURL.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createChannel.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/createPrivateGroup.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/deleteMessage.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/deleteUserOwnAccount.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getRoomRoles.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/getUserRoles.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/joinRoom.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/joinDefaultChannels.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/leaveRoom.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/removeOAuthService.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/robotMethods.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/saveSetting.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendInvitationEmail.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendMessage.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/sendSMTPTestEmail.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setAdminStatus.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setRealName.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setUsername.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/insertOrUpdateUser.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/setEmail.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/restartServer.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/unarchiveRoom.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/updateMessage.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/filterBadWords.js");
require("./node_modules/meteor/rocketchat:lib/server/methods/filterATAllTag.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadCdnPrefix.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadSMTP.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/oAuthServicesUpdate.coffee.js");
require("./node_modules/meteor/rocketchat:lib/server/startup/settings.coffee.js");
require("./node_modules/meteor/rocketchat:lib/lib/startup/settingsOnLoadSiteUrl.coffee.js");
require("./node_modules/meteor/rocketchat:lib/startup/defaultRoomTypes.coffee.js");
require("./node_modules/meteor/rocketchat:lib/rocketchat.info.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['rocketchat:lib'] = {}, {
  RocketChat: RocketChat
});

})();

//# sourceMappingURL=rocketchat_lib.js.map
