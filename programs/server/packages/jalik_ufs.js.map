{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs/ufs.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-mime.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-utilities.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-config.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-filter.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-store-permissions.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-store.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-methods.js","meteor://ðŸ’»app/packages/jalik:ufs/ufs-server.js"],"names":["_","Meteor","Mongo","stores","UploadFS","store","tokens","Collection","getStore","name","getStores","getTempFilePath","fileId","config","tmpDir","importFromURL","url","file","callback","call","MIME","addMimeType","extension","mime","toLowerCase","getMimeType","getMimeTypes","isClient","readAsArrayBuffer","event","console","error","selectFile","input","document","createElement","type","multiple","onchange","ev","files","target","style","body","appendChild","click","selectFiles","i","length","isServer","addPathAttributeToFiles","where","each","getCollection","find","path","fields","_id","forEach","getFileRelativeURL","update","$set","Config","options","extend","defaultStorePermissions","https","simulateReadDelay","simulateUploadSpeed","simulateWriteDelay","storesPath","tmpDirPermissions","StorePermissions","TypeError","Error","parseInt","Filter","self","contentTypes","extensions","minSize","maxSize","onCheck","Array","check","size","getMinSize","getMaxSize","getExtensions","contains","getContentTypes","checkContentType","isValid","result","err","list","wildCardGlob","wildcards","filter","item","indexOf","replace","insert","remove","checkPermission","permission","userId","modifiers","checkInsert","checkRemove","checkUpdate","Store","collection","onCopyError","onFinishUpload","onRead","onReadError","onWriteError","permissions","transformRead","transformWrite","copyTo","warn","getFilter","getName","setPermissions","checkToken","token","String","value","count","copy","findOne","omit","originalStore","originalId","copyId","create","rs","getReadStream","on","bindEnvironment","write","Object","createToken","generateToken","createdAt","Date","pattern","c","r","Math","random","v","s","toString","round","toUpperCase","readStream","writeStream","request","headers","pipe","ws","getWriteStream","errorHandler","data","complete","progress","uploading","uploadedAt","getFileURL","direct","_sleepForMs","fs","Npm","require","after","before","tmpFile","stat","unlink","message","prototype","getRelativeURL","encodeURIComponent","getURL","join","absoluteUrl","secure","response","http","Future","methods","ufsComplete","storeName","fut","createReadStream","flags","encoding","autoClose","wait","ufsCreate","substr","lastIndexOf","uploadUrl","ufsDelete","ufsImportURL","split","pop","originalUrl","proto","test","unblock","get","res","ufsStop","WebApp","domain","mkdirp","stream","URL","zlib","startup","mode","log","chmod","d","connectHandlers","use","req","next","parsedUrl","parse","pathname","allowCORS","setHeader","method","regExp","RegExp","match","exec","writeHead","end","query","createWriteStream","parseFloat","isNaN","min","chunk","undefined","index","run","status","range","positions","start","total","PassThrough","emit","accept","createGzip","createDeflate"],"mappings":"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","file":"/packages/jalik_ufs.js","sourcesContent":["import {_} from 'meteor/underscore';\nimport {Meteor} from 'meteor/meteor';\nimport {Mongo} from 'meteor/mongo';\n\nlet stores = {};\n\nUploadFS = {\n\n    /**\n     * Contains all stores\n     */\n    store: {},\n\n    /**\n     * Collection of tokens\n     */\n    tokens: new Mongo.Collection('ufsTokens'),\n\n    /**\n     * Returns the store by its name\n     * @param name\n     * @return {UploadFS.Store}\n     */\n    getStore: (name) => {\n        return stores[name];\n    },\n\n    /**\n     * Returns all stores\n     * @return {object}\n     */\n    getStores: () => {\n        return stores;\n    },\n\n    /**\n     * Returns the temporary file path\n     * @param fileId\n     * @return {string}\n     */\n    getTempFilePath: (fileId) => {\n        return `${UploadFS.config.tmpDir}/${fileId}`;\n    },\n\n    /**\n     * Imports a file from a URL\n     * @param url\n     * @param file\n     * @param store\n     * @param callback\n     */\n    importFromURL: (url, file, store, callback) => {\n        if (typeof store === 'string') {\n            Meteor.call('ufsImportURL', url, file, store, callback);\n        }\n        else if (typeof store === 'object') {\n            store.importFromURL(url, file, callback);\n        }\n    }\n};\n","/**\n * MIME types and extensions\n */\nconst MIME = {\n\n    // application\n    '7z': 'application/x-7z-compressed',\n    'arc': 'application/octet-stream',\n    'ai': 'application/postscript',\n    'bin': 'application/octet-stream',\n    'bz': 'application/x-bzip',\n    'bz2': 'application/x-bzip2',\n    'eps': 'application/postscript',\n    'exe': 'application/octet-stream',\n    'gz': 'application/x-gzip',\n    'gzip': 'application/x-gzip',\n    'js': 'application/javascript',\n    'json': 'application/json',\n    'ogx': 'application/ogg',\n    'pdf': 'application/pdf',\n    'ps': 'application/postscript',\n    'psd': 'application/octet-stream',\n    'rar': 'application/x-rar-compressed',\n    'rev': 'application/x-rar-compressed',\n    'swf': 'application/x-shockwave-flash',\n    'tar': 'application/x-tar',\n    'xhtml': 'application/xhtml+xml',\n    'xml': 'application/xml',\n    'zip': 'application/zip',\n\n    // audio\n    'aif': 'audio/aiff',\n    'aifc': 'audio/aiff',\n    'aiff': 'audio/aiff',\n    'au': 'audio/basic',\n    'flac': 'audio/flac',\n    'midi': 'audio/midi',\n    'mp2': 'audio/mpeg',\n    'mp3': 'audio/mpeg',\n    'mpa': 'audio/mpeg',\n    'oga': 'audio/ogg',\n    'ogg': 'audio/ogg',\n    'opus': 'audio/ogg',\n    'ra': 'audio/vnd.rn-realaudio',\n    'spx': 'audio/ogg',\n    'wav': 'audio/x-wav',\n    'weba': 'audio/webm',\n    'wma': 'audio/x-ms-wma',\n\n    // image\n    'avs': 'image/avs-video',\n    'bmp': 'image/x-windows-bmp',\n    'gif': 'image/gif',\n    'ico': 'image/vnd.microsoft.icon',\n    'jpeg': 'image/jpeg',\n    'jpg': 'image/jpg',\n    'mjpg': 'image/x-motion-jpeg',\n    'pic': 'image/pic',\n    'png': 'image/png',\n    'svg': 'image/svg+xml',\n    'tif': 'image/tiff',\n    'tiff': 'image/tiff',\n\n    // text\n    'css': 'text/css',\n    'csv': 'text/csv',\n    'html': 'text/html',\n    'txt': 'text/plain',\n\n    // video\n    'avi': 'video/avi',\n    'dv': 'video/x-dv',\n    'flv': 'video/x-flv',\n    'mov': 'video/quicktime',\n    'mp4': 'video/mp4',\n    'mpeg': 'video/mpeg',\n    'mpg': 'video/mpg',\n    'ogv': 'video/ogg',\n    'vdo': 'video/vdo',\n    'webm': 'video/webm',\n    'wmv': 'video/x-ms-wmv',\n\n    // specific to vendors\n    'doc': 'application/msword',\n    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'odb': 'application/vnd.oasis.opendocument.database',\n    'odc': 'application/vnd.oasis.opendocument.chart',\n    'odf': 'application/vnd.oasis.opendocument.formula',\n    'odg': 'application/vnd.oasis.opendocument.graphics',\n    'odi': 'application/vnd.oasis.opendocument.image',\n    'odm': 'application/vnd.oasis.opendocument.text-master',\n    'odp': 'application/vnd.oasis.opendocument.presentation',\n    'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n    'odt': 'application/vnd.oasis.opendocument.text',\n    'otg': 'application/vnd.oasis.opendocument.graphics-template',\n    'otp': 'application/vnd.oasis.opendocument.presentation-template',\n    'ots': 'application/vnd.oasis.opendocument.spreadsheet-template',\n    'ott': 'application/vnd.oasis.opendocument.text-template',\n    'ppt': 'application/vnd.ms-powerpoint',\n    'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'xls': 'application/vnd.ms-excel',\n    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\n};\n\n/**\n * Adds the MIME type for an extension\n * @param extension\n * @param mime\n */\nUploadFS.addMimeType = function (extension, mime) {\n    MIME[extension.toLowerCase()] = mime;\n};\n\n/**\n * Returns the MIME type of the extension\n * @param extension\n * @returns {*}\n */\nUploadFS.getMimeType = function (extension) {\n    extension = extension.toLowerCase();\n    return MIME[extension];\n};\n\n/**\n * Returns all MIME types\n */\nUploadFS.getMimeTypes = function () {\n    return MIME;\n};\n","import {Meteor} from 'meteor/meteor';\nimport {_} from 'meteor/underscore';\n\n\nif (Meteor.isClient) {\n\n    /**\n     * Returns file and data as ArrayBuffer for each files in the event\n     * @deprecated\n     * @param event\n     * @param callback\n     */\n    // todo remove deprecated method\n    UploadFS.readAsArrayBuffer = (event, callback) => {\n        console.error('UploadFS.readAsArrayBuffer is deprecated, see https://github.com/jalik/jalik-ufs#uploading-from-a-file');\n    };\n\n    /**\n     * Opens a dialog to select a single file\n     * @param callback\n     */\n    UploadFS.selectFile = (callback) => {\n        let input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = false;\n        input.onchange = (ev) => {\n            let files = ev.target.files;\n            callback.call(UploadFS, files[0]);\n        };\n        // Fix for iOS\n        input.style = 'display:none';\n        document.body.appendChild(input);\n        input.click();\n    };\n\n    /**\n     * Opens a dialog to select multiple files\n     * @param callback\n     */\n    UploadFS.selectFiles = (callback) => {\n        let input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        input.onchange = (ev) => {\n            let files = ev.target.files;\n\n            for (let i = 0; i < files.length; i += 1) {\n                callback.call(UploadFS, files[i]);\n            }\n        };\n        // Fix for iOS\n        input.style = 'display:none';\n        document.body.appendChild(input);\n        input.click();\n    };\n}\n\n\nif (Meteor.isServer) {\n\n    /**\n     * Adds the path attribute to files\n     * @param where\n     */\n    UploadFS.addPathAttributeToFiles = (where)=> {\n        _.each(UploadFS.getStores(), (store)=> {\n            let files = store.getCollection();\n\n            // By default update only files with no path set\n            files.find(where || {path: null}, {fields: {_id: 1}}).forEach((file)=> {\n                let path = store.getFileRelativeURL(file._id);\n                files.update({_id: file._id}, {$set: {path: path}});\n            });\n        });\n    };\n}\n","import {_} from 'meteor/underscore';\nimport {Meteor} from 'meteor/meteor';\n\n/**\n * UploadFS configuration\n * @param options\n * @constructor\n */\nUploadFS.Config = function (options) {\n    // Default options\n    options = _.extend({\n        defaultStorePermissions: null,\n        https: false,\n        simulateReadDelay: 0,\n        simulateUploadSpeed: 0,\n        simulateWriteDelay: 0,\n        storesPath: 'ufs',\n        tmpDir: '/tmp/ufs',\n        tmpDirPermissions: '0700'\n    }, options);\n\n    // Check options\n    if (options.defaultStorePermissions && !(options.defaultStorePermissions instanceof UploadFS.StorePermissions)) {\n        throw new TypeError('defaultStorePermissions is not an instance of UploadFS.StorePermissions');\n    }\n    if (typeof options.https !== 'boolean') {\n        throw new TypeError('https is not a function');\n    }\n    if (typeof options.simulateReadDelay !== 'number') {\n        throw new Meteor.Error('simulateReadDelay is not a number');\n    }\n    if (typeof options.simulateUploadSpeed !== 'number') {\n        throw new Meteor.Error('simulateUploadSpeed is not a number');\n    }\n    if (typeof options.simulateWriteDelay !== 'number') {\n        throw new Meteor.Error('simulateWriteDelay is not a number');\n    }\n    if (typeof options.storesPath !== 'string') {\n        throw new Meteor.Error('storesPath is not a string');\n    }\n    if (typeof options.tmpDir !== 'string') {\n        throw new Meteor.Error('tmpDir is not a string');\n    }\n    if (typeof options.tmpDirPermissions !== 'string') {\n        throw new Meteor.Error('tmpDirPermissions is not a string');\n    }\n\n    /**\n     * Default store permissions\n     * @type {UploadFS.StorePermissions}\n     */\n    this.defaultStorePermissions = options.defaultStorePermissions;\n    /**\n     * Use or not secured protocol in URLS\n     * @type {boolean}\n     */\n    this.https = options.https;\n    /**\n     * The simulation read delay\n     * @type {Number}\n     */\n    this.simulateReadDelay = parseInt(options.simulateReadDelay);\n    /**\n     * The simulation upload speed\n     * @type {Number}\n     */\n    this.simulateUploadSpeed = parseInt(options.simulateUploadSpeed);\n    /**\n     * The simulation write delay\n     * @type {Number}\n     */\n    this.simulateWriteDelay = parseInt(options.simulateWriteDelay);\n    /**\n     * The URL root path of stores\n     * @type {string}\n     */\n    this.storesPath = options.storesPath;\n    /**\n     * The temporary directory of uploading files\n     * @type {string}\n     */\n    this.tmpDir = options.tmpDir;\n    /**\n     * The permissions of the temporary directory\n     * @type {string}\n     */\n    this.tmpDirPermissions = options.tmpDirPermissions;\n};\n\n/**\n * Global configuration\n * @type {UploadFS.Config}\n */\nUploadFS.config = new UploadFS.Config();\n","import {_} from 'meteor/underscore';\n\n/**\n * File filter\n * @param options\n * @constructor\n */\nUploadFS.Filter = function (options) {\n    let self = this;\n\n    // Default options\n    options = _.extend({\n        contentTypes: null,\n        extensions: null,\n        minSize: 1,\n        maxSize: 0,\n        onCheck: null\n    }, options);\n\n    // Check options\n    if (options.contentTypes && !(options.contentTypes instanceof Array)) {\n        throw new TypeError('contentTypes is not an Array');\n    }\n    if (options.extensions && !(options.extensions instanceof Array)) {\n        throw new TypeError('extensions is not an Array');\n    }\n    if (typeof options.minSize !== 'number') {\n        throw new TypeError('minSize is not a number');\n    }\n    if (typeof options.maxSize !== 'number') {\n        throw new TypeError('maxSize is not a number');\n    }\n    if (options.onCheck && typeof options.onCheck !== 'function') {\n        throw new TypeError('onCheck is not a function');\n    }\n\n    // Private attributes\n    let contentTypes = options.contentTypes;\n    let extensions = options.extensions;\n    let onCheck = options.onCheck;\n    let maxSize = parseInt(options.maxSize);\n    let minSize = parseInt(options.minSize);\n\n    /**\n     * Checks the file\n     * @param file\n     */\n    self.check = (file) => {\n        // Check size\n        if (file.size <= 0 || file.size < self.getMinSize()) {\n            throw new Meteor.Error('file-too-small', 'File is too small (min =' + self.getMinSize() + ')');\n        }\n        if (self.getMaxSize() > 0 && file.size > self.getMaxSize()) {\n            throw new Meteor.Error('file-too-large', 'File is too large (max = ' + self.getMaxSize() + ')');\n        }\n        // Check extension\n        if (self.getExtensions() && !_.contains(self.getExtensions(), file.extension)) {\n            throw new Meteor.Error('invalid-file-extension', 'File extension is not accepted');\n        }\n        // Check content type\n        if (self.getContentTypes() && !checkContentType(file.type, self.getContentTypes())) {\n            throw new Meteor.Error('invalid-file-type', 'File type is not accepted');\n        }\n        // Apply custom check\n        if (typeof onCheck === 'function' && !onCheck.call(self, file)) {\n            throw new Meteor.Error('invalid-file', 'File does not match filter');\n        }\n    };\n\n    /**\n     * Returns the allowed content types\n     * @return {Array}\n     */\n    self.getContentTypes = () => {\n        return contentTypes;\n    };\n\n    /**\n     * Returns the allowed extensions\n     * @return {Array}\n     */\n    self.getExtensions = () => {\n        return extensions;\n    };\n\n    /**\n     * Returns the maximum file size\n     * @return {Number}\n     */\n    self.getMaxSize = () => {\n        return maxSize;\n    };\n\n    /**\n     * Returns the minimum file size\n     * @return {Number}\n     */\n    self.getMinSize = () => {\n        return minSize;\n    };\n\n    /**\n     * Checks if the file matches filter\n     * @param file\n     * @return {boolean}\n     */\n    self.isValid = (file) => {\n        let result = true;\n        try {\n            self.check(file);\n        } catch (err) {\n            result = false;\n        }\n        return result;\n    };\n};\n\nfunction checkContentType(type, list) {\n    if (type) {\n        if (_.contains(list, type)) {\n            return true;\n        } else {\n            let wildCardGlob = '/*';\n            let wildcards = _.filter(list, (item) => {\n                return item.indexOf(wildCardGlob) > 0;\n            });\n\n            if (_.contains(wildcards, type.replace(/(\\/.*)$/, wildCardGlob))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n","import {_} from 'meteor/underscore';\n\n/**\n * Store permissions\n * @param options\n * @constructor\n */\nUploadFS.StorePermissions = function (options) {\n    // Default options\n    options = _.extend({\n        insert: null,\n        remove: null,\n        update: null\n    }, options);\n\n    // Check options\n    if (typeof options.insert === 'function') {\n        this.insert = options.insert;\n    }\n    if (typeof options.remove === 'function') {\n        this.remove = options.remove;\n    }\n    if (typeof options.update === 'function') {\n        this.update = options.update;\n    }\n\n    let checkPermission = (permission, userId, file, fields, modifiers)=> {\n        if (typeof this[permission] === 'function') {\n            return this[permission](userId, file, fields, modifiers);\n        }\n        return true; // by default allow all\n    };\n\n    /**\n     * Checks the insert permission\n     * @param userId\n     * @param file\n     * @returns {*}\n     */\n    this.checkInsert = (userId, file) => {\n        return checkPermission('insert', userId, file);\n    };\n    /**\n     * Checks the remove permission\n     * @param userId\n     * @param file\n     * @returns {*}\n     */\n    this.checkRemove = (userId, file) => {\n        return checkPermission('remove', userId, file);\n    };\n    /**\n     * Checks the update permission\n     * @param userId\n     * @param file\n     * @param fields\n     * @param modifiers\n     * @returns {*}\n     */\n    this.checkUpdate = (userId, file, fields, modifiers) => {\n        return checkPermission('update', userId, file, fields, modifiers);\n    };\n};\n","import {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\nimport {Mongo} from 'meteor/mongo';\n\n/**\n * File store\n * @param options\n * @constructor\n */\nUploadFS.Store = function (options) {\n    let self = this;\n\n    // Default options\n    options = _.extend({\n        collection: null,\n        filter: null,\n        name: null,\n        onCopyError: null,\n        onFinishUpload: null,\n        onRead: null,\n        onReadError: null,\n        onWriteError: null,\n        permissions: null,\n        transformRead: null,\n        transformWrite: null\n    }, options);\n\n    // Check instance\n    if (!(self instanceof UploadFS.Store)) {\n        throw new Error('UploadFS.Store is not an instance');\n    }\n\n    // Check options\n    if (!(options.collection instanceof Mongo.Collection)) {\n        throw new TypeError('collection is not a Mongo.Collection');\n    }\n    if (options.filter && !(options.filter instanceof UploadFS.Filter)) {\n        throw new TypeError('filter is not a UploadFS.Filter');\n    }\n    if (typeof options.name !== 'string') {\n        throw new TypeError('name is not a string');\n    }\n    if (UploadFS.getStore(options.name)) {\n        throw new TypeError('name already exists');\n    }\n    if (options.onCopyError && typeof options.onCopyError !== 'function') {\n        throw new TypeError('onCopyError is not a function');\n    }\n    if (options.onFinishUpload && typeof options.onFinishUpload !== 'function') {\n        throw new TypeError('onFinishUpload is not a function');\n    }\n    if (options.onRead && typeof options.onRead !== 'function') {\n        throw new TypeError('onRead is not a function');\n    }\n    if (options.onReadError && typeof options.onReadError !== 'function') {\n        throw new TypeError('onReadError is not a function');\n    }\n    if (options.onWriteError && typeof options.onWriteError !== 'function') {\n        throw new TypeError('onWriteError is not a function');\n    }\n    if (options.permissions && !(options.permissions instanceof UploadFS.StorePermissions)) {\n        throw new TypeError('permissions is not a UploadFS.StorePermissions');\n    }\n    if (options.transformRead && typeof options.transformRead !== 'function') {\n        throw new TypeError('transformRead is not a function');\n    }\n    if (options.transformWrite && typeof options.transformWrite !== 'function') {\n        throw new TypeError('transformWrite is not a function');\n    }\n\n    // Public attributes\n    self.onCopyError = options.onCopyError || self.onCopyError;\n    self.onFinishUpload = options.onFinishUpload || self.onFinishUpload;\n    self.onRead = options.onRead || self.onRead;\n    self.onReadError = options.onReadError || self.onReadError;\n    self.onWriteError = options.onWriteError || self.onWriteError;\n    self.permissions = options.permissions;\n\n    // Private attributes\n    let collection = options.collection;\n    let copyTo = options.copyTo;\n    let filter = options.filter;\n    let name = options.name;\n    let transformRead = options.transformRead;\n    let transformWrite = options.transformWrite;\n\n    // Set default permissions\n    if (!(self.permissions instanceof UploadFS.StorePermissions)) {\n        // Uses user's default permissions or UFS default permissions (deny all)\n        if (UploadFS.config.defaultStorePermissions instanceof UploadFS.StorePermissions) {\n            self.permissions = UploadFS.config.defaultStorePermissions;\n        } else {\n            self.permissions = new UploadFS.StorePermissions();\n            console.warn(`ufs: permissions are not defined for store \"${name}\"`);\n        }\n    }\n\n    // Add the store to the list\n    UploadFS.getStores()[name] = self;\n\n    /**\n     * Returns the collection\n     * @return {Mongo.Collection}\n     */\n    self.getCollection = function () {\n        return collection;\n    };\n\n    /**\n     * Returns the file filter\n     * @return {UploadFS.Filter}\n     */\n    self.getFilter = function () {\n        return filter;\n    };\n\n    /**\n     * Returns the store name\n     * @return {string}\n     */\n    self.getName = function () {\n        return name;\n    };\n\n    /**\n     * Defines the store permissions\n     * @param permissions\n     */\n    self.setPermissions = function (permissions) {\n        if (!(permissions instanceof UploadFS.StorePermissions)) {\n            throw new TypeError(\"permissions is not an instance of UploadFS.StorePermissions\");\n        }\n        self.permissions = permissions;\n    };\n\n    if (Meteor.isServer) {\n\n        /**\n         * Checks token validity\n         * @param token\n         * @param fileId\n         * @returns {boolean}\n         */\n        self.checkToken = function (token, fileId) {\n            check(token, String);\n            check(fileId, String);\n            return UploadFS.tokens.find({value: token, fileId: fileId}).count() === 1;\n        };\n\n        /**\n         * Copies the file to a store\n         * @param fileId\n         * @param store\n         * @param callback\n         */\n        self.copy = function (fileId, store, callback) {\n            check(fileId, String);\n\n            if (!(store instanceof UploadFS.Store)) {\n                throw new TypeError('store is not a UploadFS.store.Store');\n            }\n            // Get original file\n            let file = collection.findOne({_id: fileId});\n            if (!file) {\n                throw new Meteor.Error(404, 'File not found');\n            }\n            // Ignore the file if it does not match store filter\n            let filter = store.getFilter();\n            if (filter instanceof UploadFS.Filter && !filter.isValid(file)) {\n                return;\n            }\n\n            // Prepare copy\n            let copy = _.omit(file, '_id', 'url');\n            copy.originalStore = self.getName();\n            copy.originalId = fileId;\n\n            // Create the copy\n            let copyId = store.create(copy);\n\n            // Get original stream\n            let rs = self.getReadStream(fileId, file);\n\n            // Catch errors to avoid app crashing\n            rs.on('error', Meteor.bindEnvironment(function (err) {\n                callback.call(self, err, null);\n            }));\n\n            // Copy file data\n            store.write(rs, copyId, Meteor.bindEnvironment(function (err) {\n                if (err) {\n                    collection.remove({_id: copyId});\n                    self.onCopyError.call(self, err, fileId, file);\n                }\n                if (typeof callback === 'function') {\n                    callback.call(self, err, copyId, copy, store);\n                }\n            }));\n        };\n\n        /**\n         * Creates the file in the collection\n         * @param file\n         * @param callback\n         * @return {string}\n         */\n        self.create = function (file, callback) {\n            check(file, Object);\n            file.store = name;\n            return collection.insert(file, callback);\n        };\n\n        /**\n         * Creates a token for the file (only needed for client side upload)\n         * @param fileId\n         * @returns {*}\n         */\n        self.createToken = function (fileId) {\n            let token = self.generateToken();\n\n            // Check if token exists\n            if (UploadFS.tokens.find({fileId: fileId}).count()) {\n                UploadFS.tokens.update({fileId: fileId}, {\n                    $set: {\n                        createdAt: new Date(),\n                        value: token\n                    }\n                });\n            } else {\n                UploadFS.tokens.insert({\n                    createdAt: new Date(),\n                    fileId: fileId,\n                    value: token\n                });\n            }\n            return token;\n        };\n\n        /**\n         * Generates a random token\n         * @param pattern\n         * @return {string}\n         */\n        self.generateToken = function (pattern) {\n            return (pattern || 'xyxyxyxyxy').replace(/[xy]/g, function (c) {\n                let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n                let s = v.toString(16);\n                return Math.round(Math.random()) ? s.toUpperCase() : s;\n            });\n        };\n\n        /**\n         * Transforms the file on reading\n         * @param readStream\n         * @param writeStream\n         * @param fileId\n         * @param file\n         * @param request\n         * @param headers\n         */\n        self.transformRead = function (readStream, writeStream, fileId, file, request, headers) {\n            if (typeof transformRead === 'function') {\n                transformRead.call(self, readStream, writeStream, fileId, file, request, headers);\n            } else {\n                readStream.pipe(writeStream);\n            }\n        };\n\n        /**\n         * Transforms the file on writing\n         * @param readStream\n         * @param writeStream\n         * @param fileId\n         * @param file\n         */\n        self.transformWrite = function (readStream, writeStream, fileId, file) {\n            if (typeof transformWrite === 'function') {\n                transformWrite.call(self, readStream, writeStream, fileId, file);\n            } else {\n                readStream.pipe(writeStream);\n            }\n        };\n\n        /**\n         * Writes the file to the store\n         * @param rs\n         * @param fileId\n         * @param callback\n         */\n        self.write = function (rs, fileId, callback) {\n            let file = collection.findOne({_id: fileId});\n            let ws = self.getWriteStream(fileId, file);\n\n            let errorHandler = Meteor.bindEnvironment(function (err) {\n                collection.remove({_id: fileId});\n                self.onWriteError.call(self, err, fileId, file);\n                callback.call(self, err);\n            });\n\n            ws.on('error', errorHandler);\n            ws.on('finish', Meteor.bindEnvironment(function () {\n                let size = 0;\n                let readStream = self.getReadStream(fileId, file);\n\n                readStream.on('error', Meteor.bindEnvironment(function (error) {\n                    callback.call(self, error, null);\n                }));\n                readStream.on('data', Meteor.bindEnvironment(function (data) {\n                    size += data.length;\n                }));\n                readStream.on('end', Meteor.bindEnvironment(function () {\n                    // Set file attribute\n                    file.complete = true;\n                    file.path = self.getFileRelativeURL(fileId);\n                    file.progress = 1;\n                    file.size = size;\n                    file.token = self.generateToken();\n                    file.uploading = false;\n                    file.uploadedAt = new Date();\n                    file.url = self.getFileURL(fileId);\n\n                    // Sets the file URL when file transfer is complete,\n                    // this way, the image will loads entirely.\n                    collection.direct.update({_id: fileId}, {\n                        $set: {\n                            complete: file.complete,\n                            path: file.path,\n                            progress: file.progress,\n                            size: file.size,\n                            token: file.token,\n                            uploading: file.uploading,\n                            uploadedAt: file.uploadedAt,\n                            url: file.url\n                        }\n                    });\n\n                    // Return file info\n                    callback.call(self, null, file);\n\n                    // Execute callback\n                    if (typeof self.onFinishUpload == 'function') {\n                        self.onFinishUpload.call(self, file);\n                    }\n\n                    // Simulate write speed\n                    if (UploadFS.config.simulateWriteDelay) {\n                        Meteor._sleepForMs(UploadFS.config.simulateWriteDelay);\n                    }\n\n                    // Copy file to other stores\n                    if (copyTo instanceof Array) {\n                        for (let i = 0; i < copyTo.length; i += 1) {\n                            let store = copyTo[i];\n\n                            if (!store.getFilter() || store.getFilter().isValid(file)) {\n                                self.copy(fileId, store);\n                            }\n                        }\n                    }\n                }));\n            }));\n\n            // Execute transformation\n            self.transformWrite(rs, ws, fileId, file);\n        };\n    }\n\n    if (Meteor.isServer) {\n        const fs = Npm.require('fs');\n\n        // Code executed after removing file\n        collection.after.remove(function (userId, file) {\n            // Remove associated tokens\n            UploadFS.tokens.remove({fileId: file._id});\n\n            if (copyTo instanceof Array) {\n                for (let i = 0; i < copyTo.length; i += 1) {\n                    // Remove copies in stores\n                    copyTo[i].getCollection().remove({originalId: file._id});\n                }\n            }\n        });\n\n        // Code executed before inserting file\n        collection.before.insert(function (userId, file) {\n            if (!self.permissions.checkInsert(userId, file)) {\n                throw new Meteor.Error('forbidden', \"Forbidden\");\n            }\n        });\n\n        // Code executed before updating file\n        collection.before.update(function (userId, file, fields, modifiers) {\n            if (!self.permissions.checkUpdate(userId, file, fields, modifiers)) {\n                throw new Meteor.Error('forbidden', \"Forbidden\");\n            }\n        });\n\n        // Code executed before removing file\n        collection.before.remove(function (userId, file) {\n            if (!self.permissions.checkRemove(userId, file)) {\n                throw new Meteor.Error('forbidden', \"Forbidden\");\n            }\n\n            // Delete the physical file in the store\n            self.delete(file._id);\n\n            let tmpFile = UploadFS.getTempFilePath(file._id);\n\n            // Delete the temp file\n            fs.stat(tmpFile, function (err) {\n                !err && fs.unlink(tmpFile, function (err) {\n                    err && console.error(`ufs: cannot delete temp file at ${tmpFile} (${err.message})`);\n                });\n            });\n        });\n    }\n};\n\n/**\n * Returns the file URL\n * @param fileId\n */\nUploadFS.Store.prototype.getFileRelativeURL = function (fileId) {\n    let file = this.getCollection().findOne({_id: fileId}, {fields: {name: 1}});\n    return file && this.getRelativeURL(fileId + '/' + encodeURIComponent(file.name));\n};\n\n/**\n * Returns the file URL\n * @param fileId\n */\nUploadFS.Store.prototype.getFileURL = function (fileId) {\n    let file = this.getCollection().findOne({_id: fileId}, {fields: {name: 1}});\n    return file && this.getURL(fileId + '/' + encodeURIComponent(file.name));\n};\n\n/**\n * Returns the store relative URL\n * @param path\n */\nUploadFS.Store.prototype.getRelativeURL = function (path) {\n    return [UploadFS.config.storesPath, this.getName(), path].join('/').replace(/\\/$/, '');\n};\n\n/**\n * Returns the store absolute URL\n * @param path\n */\nUploadFS.Store.prototype.getURL = function (path) {\n    return Meteor.absoluteUrl(this.getRelativeURL(path), {secure: UploadFS.config.https});\n};\n\n/**\n * Completes the file upload\n * @param url\n * @param file\n * @param callback\n */\nUploadFS.Store.prototype.importFromURL = function (url, file, callback) {\n    Meteor.call('ufsImportURL', url, file, this.getName(), callback);\n};\n\nif (Meteor.isServer) {\n    /**\n     * Deletes a file async\n     * @param fileId\n     * @param callback\n     */\n    UploadFS.Store.prototype.delete = function (fileId, callback) {\n        throw new Error('delete is not implemented');\n    };\n\n    /**\n     * Returns the file read stream\n     * @param fileId\n     * @param file\n     */\n    UploadFS.Store.prototype.getReadStream = function (fileId, file) {\n        throw new Error('getReadStream is not implemented');\n    };\n\n    /**\n     * Returns the file write stream\n     * @param fileId\n     * @param file\n     */\n    UploadFS.Store.prototype.getWriteStream = function (fileId, file) {\n        throw new Error('getWriteStream is not implemented');\n    };\n\n    /**\n     * Callback for copy errors\n     * @param err\n     * @param fileId\n     * @param file\n     * @return boolean\n     */\n    UploadFS.Store.prototype.onCopyError = function (err, fileId, file) {\n        console.error(`ufs: cannot copy file \"${fileId}\" (${err.message})`, err);\n    };\n\n    /**\n     * Called when a file has been uploaded\n     * @param file\n     */\n    UploadFS.Store.prototype.onFinishUpload = function (file) {\n    };\n\n    /**\n     * Called when a file is read from the store\n     * @param fileId\n     * @param file\n     * @param request\n     * @param response\n     * @return boolean\n     */\n    UploadFS.Store.prototype.onRead = function (fileId, file, request, response) {\n        return true;\n    };\n\n    /**\n     * Callback for read errors\n     * @param err\n     * @param fileId\n     * @param file\n     * @return boolean\n     */\n    UploadFS.Store.prototype.onReadError = function (err, fileId, file) {\n        console.error(`ufs: cannot read file \"${fileId}\" (${err.message})`, err);\n    };\n\n    /**\n     * Callback for write errors\n     * @param err\n     * @param fileId\n     * @param file\n     * @return boolean\n     */\n    UploadFS.Store.prototype.onWriteError = function (err, fileId, file) {\n        console.error(`ufs: cannot write file \"${fileId}\" (${err.message})`, err);\n    };\n}\n","import {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n\nconst fs = Npm.require('fs');\nconst http = Npm.require('http');\nconst https = Npm.require('https');\nconst Future = Npm.require('fibers/future');\n\n\nMeteor.methods({\n\n    /**\n     * Completes the file transfer\n     * @param fileId\n     * @param storeName\n     * @param token\n     */\n    ufsComplete: function (fileId, storeName, token) {\n        check(fileId, String);\n        check(storeName, String);\n        check(token, String);\n\n        // Get store\n        let store = UploadFS.getStore(storeName);\n        if (!store) {\n            throw new Meteor.Error('invalid-store', \"Store not found\");\n        }\n        // Check token\n        if (!store.checkToken(token, fileId)) {\n            throw new Meteor.Error('invalid-token', \"Token is not valid\");\n        }\n\n        let fut = new Future();\n        let tmpFile = UploadFS.getTempFilePath(fileId);\n\n        // Get the temp file\n        let rs = fs.createReadStream(tmpFile, {\n            flags: 'r',\n            encoding: null,\n            autoClose: true\n        });\n\n        rs.on('error', Meteor.bindEnvironment(function (err) {\n            console.error(err);\n            store.getCollection().remove({_id: fileId});\n            fut.throw(err);\n        }));\n\n        // Save file in the store\n        store.write(rs, fileId, Meteor.bindEnvironment(function (err, file) {\n            fs.unlink(tmpFile, function (err) {\n                err && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\n            });\n\n            if (err) {\n                fut.throw(err);\n            } else {\n                // File has been fully uploaded\n                // so we don't need to keep the token anymore.\n                // Also this ensure that the file cannot be modified with extra chunks later.\n                UploadFS.tokens.remove({fileId: fileId});\n                fut.return(file);\n            }\n        }));\n        return fut.wait();\n    },\n\n    /**\n     * Creates the file and returns the file upload token\n     * @param file\n     * @returns {{fileId: string, token: *, url}}\n     */\n    ufsCreate: function (file) {\n        check(file, Object);\n\n        if (typeof file.name !== 'string' || !file.name.length) {\n            throw new Meteor.Error('invalid-file-name', \"file name is not valid\");\n        }\n        if (typeof file.store !== 'string' || !file.store.length) {\n            throw new Meteor.Error('invalid-store', \"store is not valid\");\n        }\n        // Get store\n        let store = UploadFS.getStore(file.store);\n        if (!store) {\n            throw new Meteor.Error('invalid-store', \"Store not found\");\n        }\n\n        // Set default info\n        file.complete = false;\n        file.uploading = false;\n        file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n        // Assign file MIME type based on the extension\n        if (file.extension && !file.type) {\n            file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n        }\n        file.progress = 0;\n        file.size = parseInt(file.size) || 0;\n        file.userId = file.userId || this.userId;\n\n        // Check if the file matches store filter\n        let filter = store.getFilter();\n        if (filter instanceof UploadFS.Filter) {\n            filter.check(file);\n        }\n\n        // Create the file\n        let fileId = store.create(file);\n        let token = store.createToken(fileId);\n        let uploadUrl = store.getURL(`${fileId}?token=${token}`);\n\n        return {\n            fileId: fileId,\n            token: token,\n            url: uploadUrl\n        };\n    },\n\n    /**\n     * Deletes a file\n     * @param fileId\n     * @param storeName\n     * @param token\n     * @returns {*}\n     */\n    ufsDelete: function (fileId, storeName, token) {\n        check(fileId, String);\n        check(storeName, String);\n        check(token, String);\n\n        // Check store\n        let store = UploadFS.getStore(storeName);\n        if (!store) {\n            throw new Meteor.Error('invalid-store', \"Store not found\");\n        }\n        // Ignore files that does not exist\n        if (store.getCollection().find({_id: fileId}).count() === 0) {\n            return 1;\n        }\n        // Check token\n        if (!store.checkToken(token, fileId)) {\n            throw new Meteor.Error('invalid-token', \"Token is not valid\");\n        }\n        return store.getCollection().remove({_id: fileId});\n    },\n\n    /**\n     * Imports a file from the URL\n     * @param url\n     * @param file\n     * @param storeName\n     * @return {*}\n     */\n    ufsImportURL: function (url, file, storeName) {\n        check(url, String);\n        check(file, Object);\n        check(storeName, String);\n\n        // Check URL\n        if (typeof url !== 'string' || url.length <= 0) {\n            throw new Meteor.Error('invalid-url', \"The url is not valid\");\n        }\n        // Check file\n        if (typeof file !== 'object' || file === null) {\n            throw new Meteor.Error('invalid-file', \"The file is not valid\");\n        }\n        // Check store\n        let store = UploadFS.getStore(storeName);\n        if (!store) {\n            throw new Meteor.Error('invalid-store', 'The store does not exist');\n        }\n\n        // Extract file info\n        if (!file.name) {\n            file.name = url.replace(/\\?.*$/, '').split('/').pop();\n        }\n        if (file.name && !file.extension) {\n            file.extension = file.name && file.name.substr((~-file.name.lastIndexOf('.') >>> 0) + 2).toLowerCase();\n        }\n        if (file.extension && !file.type) {\n            // Assign file MIME type based on the extension\n            file.type = UploadFS.getMimeType(file.extension) || 'application/octet-stream';\n        }\n        // Check if file is valid\n        if (store.getFilter() instanceof UploadFS.Filter) {\n            store.getFilter().check(file);\n        }\n\n        if (file.originalUrl) {\n            console.warn(`ufs: The \"originalUrl\" attribute is automatically set when importing a file from a URL`);\n        }\n\n        // Add original URL\n        file.originalUrl = url;\n\n        // Create the file\n        file.complete = false;\n        file.uploading = true;\n        file.progress = 0;\n        file._id = store.create(file);\n\n        let fut = new Future();\n        let proto;\n\n        // Detect protocol to use\n        if (/http:\\/\\//i.test(url)) {\n            proto = http;\n        } else if (/https:\\/\\//i.test(url)) {\n            proto = https;\n        }\n\n        this.unblock();\n\n        // Download file\n        proto.get(url, Meteor.bindEnvironment(function (res) {\n            // Save the file in the store\n            store.write(res, file._id, function (err, file) {\n                if (err) {\n                    fut.throw(err);\n                } else {\n                    fut.return(file);\n                }\n            });\n        })).on('error', function (err) {\n            fut.throw(err);\n        });\n        return fut.wait();\n    },\n\n    /**\n     * Marks the file uploading as stopped\n     * @param fileId\n     * @param storeName\n     * @param token\n     * @returns {*}\n     */\n    ufsStop: function (fileId, storeName, token) {\n        check(fileId, String);\n        check(storeName, String);\n        check(token, String);\n\n        // Check store\n        let store = UploadFS.getStore(storeName);\n        if (!store) {\n            throw new Meteor.Error('invalid-store', \"Store not found\");\n        }\n        // Check file\n        let file = store.getCollection().find({_id: fileId}, {fields: {userId: 1}});\n        if (!file) {\n            throw new Meteor.Error('invalid-file', \"File not found\");\n        }\n        // Check token\n        if (!store.checkToken(token, fileId)) {\n            throw new Meteor.Error('invalid-token', \"Token is not valid\");\n        }\n\n        return store.getCollection().update({_id: fileId}, {\n            $set: {uploading: false}\n        });\n    }\n});\n","import {_} from 'meteor/underscore';\nimport {Meteor} from 'meteor/meteor';\nimport {WebApp} from 'meteor/webapp';\n\nconst domain = Npm.require('domain');\nconst fs = Npm.require('fs');\nconst http = Npm.require('http');\nconst https = Npm.require('https');\nconst mkdirp = Npm.require('mkdirp');\nconst stream = Npm.require('stream');\nconst URL = Npm.require('url');\nconst zlib = Npm.require('zlib');\n\n\nMeteor.startup(() => {\n    let path = UploadFS.config.tmpDir;\n    let mode = UploadFS.config.tmpDirPermissions;\n\n    fs.stat(path, (err) => {\n        if (err) {\n            // Create the temp directory\n            mkdirp(path, {mode: mode}, (err) => {\n                if (err) {\n                    console.error(`ufs: cannot create temp directory at \"${path}\" (${err.message})`);\n                } else {\n                    console.log(`ufs: temp directory created at \"${path}\"`);\n                }\n            });\n        } else {\n            // Set directory permissions\n            fs.chmod(path, mode, (err) => {\n                err && console.error(`ufs: cannot set temp directory permissions ${mode} (${err.message})`);\n            });\n        }\n    });\n});\n\n// Create domain to handle errors\n// and possibly avoid server crashes.\nlet d = domain.create();\n\nd.on('error', (err) => {\n    console.error('ufs: ' + err.message);\n});\n\n// Listen HTTP requests to serve files\nWebApp.connectHandlers.use((req, res, next) => {\n    // Quick check to see if request should be catch\n    if (req.url.indexOf(UploadFS.config.storesPath) === -1) {\n        next();\n        return;\n    }\n\n    // Remove store path\n    let parsedUrl = URL.parse(req.url);\n    let path = parsedUrl.pathname.substr(UploadFS.config.storesPath.length + 1);\n\n    let allowCORS = ()=> {\n        // res.setHeader('Access-Control-Allow-Origin', req.headers.origin);\n        res.setHeader(\"Access-Control-Allow-Methods\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    };\n\n    if (req.method === \"OPTIONS\") {\n        let regExp = new RegExp('^\\/([^\\/\\?]+)\\/([^\\/\\?]+)$');\n        let match = regExp.exec(path);\n\n        // Request is not valid\n        if (match === null) {\n            res.writeHead(400);\n            res.end();\n            return;\n        }\n\n        // Get store\n        let store = UploadFS.getStore(match[1]);\n        if (!store) {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n\n        // If a store is found, go ahead and allow the origin\n        allowCORS();\n\n        next();\n    }\n    else if (req.method === 'POST') {\n        // Get store\n        let regExp = new RegExp('^\\/([^\\/\\?]+)\\/([^\\/\\?]+)$');\n        let match = regExp.exec(path);\n\n        // Request is not valid\n        if (match === null) {\n            res.writeHead(400);\n            res.end();\n            return;\n        }\n\n        // Get store\n        let store = UploadFS.getStore(match[1]);\n        if (!store) {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n\n        // If a store is found, go ahead and allow the origin\n        allowCORS();\n\n        // Get file\n        let fileId = match[2];\n        if (store.getCollection().find({_id: fileId}).count() === 0) {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n\n        // Check upload token\n        if (!store.checkToken(req.query.token, fileId)) {\n            res.writeHead(403);\n            res.end();\n            return;\n        }\n\n        let tmpFile = UploadFS.getTempFilePath(fileId);\n        let ws = fs.createWriteStream(tmpFile, {flags: 'a'});\n        let fields = {uploading: true};\n        let progress = parseFloat(req.query.progress);\n        if (!isNaN(progress) && progress > 0) {\n            fields.progress = Math.min(progress, 1);\n        }\n\n        req.on('data', (chunk) => {\n            ws.write(chunk);\n        });\n        req.on('error', (err) => {\n            res.writeHead(500);\n            res.end();\n        });\n        req.on('end', Meteor.bindEnvironment(() => {\n            // Update completed state without triggering hooks\n            store.getCollection().direct.update({_id: fileId}, {$set: fields});\n            ws.end();\n        }));\n        ws.on('error', (err) => {\n            console.error(`ufs: cannot write chunk of file \"${fileId}\" (${err.message})`);\n            fs.unlink(tmpFile, (err) => {\n                err && console.error(`ufs: cannot delete temp file \"${tmpFile}\" (${err.message})`);\n            });\n            res.writeHead(500);\n            res.end();\n        });\n        ws.on('finish', () => {\n            res.writeHead(204, {\"Content-Type\": 'text/plain'});\n            res.end();\n        });\n    }\n    else if (req.method == 'GET') {\n        // Get store, file Id and file name\n        let regExp = new RegExp('^\\/([^\\/\\?]+)\\/([^\\/\\?]+)(?:\\/([^\\/\\?]+))?$');\n        let match = regExp.exec(path);\n\n        // Avoid 504 Gateway timeout error\n        // if file is not handled by UploadFS.\n        if (match === null) {\n            next();\n            return;\n        }\n\n        // Get store\n        let storeName = match[1];\n        let store = UploadFS.getStore(storeName);\n\n        if (!store) {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n\n        if (store.onRead !== null && store.onRead !== undefined && typeof store.onRead !== 'function') {\n            console.error(`ufs: store \"${storeName}\" onRead is not a function`);\n            res.writeHead(500);\n            res.end();\n            return;\n        }\n\n        // Remove file extension from file Id\n        let index = match[2].indexOf('.');\n        let fileId = index !== -1 ? match[2].substr(0, index) : match[2];\n\n        // Get file from database\n        let file = store.getCollection().findOne({_id: fileId});\n        if (!file) {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n\n        // Simulate read speed\n        if (UploadFS.config.simulateReadDelay) {\n            Meteor._sleepForMs(UploadFS.config.simulateReadDelay);\n        }\n\n        d.run(() => {\n            // Check if the file can be accessed\n            if (store.onRead.call(store, fileId, file, req, res) !== false) {\n                let options = {};\n                let status = 200;\n\n                // Prepare response headers\n                let headers = {\n                    'Content-Type': file.type,\n                    'Content-Length': file.size\n                };\n\n                // Parse request headers\n                if (typeof req.headers === 'object') {\n                    // Send data in range\n                    if (typeof req.headers.range === 'string') {\n                        let range = req.headers.range;\n\n                        // Range is not valid\n                        if (!range) {\n                            res.writeHead(416);\n                            res.end();\n                            return;\n                        }\n\n                        let positions = range.replace(/bytes=/, '').split('-');\n                        let start = parseInt(positions[0], 10);\n                        let total = file.size;\n                        let end = positions[1] ? parseInt(positions[1], 10) : total - 1;\n\n                        // Update headers\n                        headers['Content-Range'] = `bytes ${start}-${end}/${total}`;\n                        headers['Accept-Ranges'] = `bytes`;\n                        headers['Content-Length'] = (end - start) + 1;\n\n                        status = 206; // partial content\n                        options.start = start;\n                        options.end = end;\n                    }\n                }\n\n                // Open the file stream\n                let rs = store.getReadStream(fileId, file, options);\n                let ws = new stream.PassThrough();\n\n                rs.on('error', Meteor.bindEnvironment((err) => {\n                    store.onReadError.call(store, err, fileId, file);\n                    res.end();\n                }));\n                ws.on('error', Meteor.bindEnvironment((err) => {\n                    store.onReadError.call(store, err, fileId, file);\n                    res.end();\n                }));\n                ws.on('close', () => {\n                    // Close output stream at the end\n                    ws.emit('end');\n                });\n\n                // Transform stream\n                store.transformRead(rs, ws, fileId, file, req, headers);\n\n                // Parse request headers\n                if (typeof req.headers === 'object') {\n                    // Compress data using if needed (ignore audio/video as they are already compressed)\n                    if (typeof req.headers['accept-encoding'] === 'string' && !/^(audio|video)/.test(file.type)) {\n                        let accept = req.headers['accept-encoding'];\n\n                        // Compress with gzip\n                        if (accept.match(/\\bgzip\\b/)) {\n                            headers['Content-Encoding'] = 'gzip';\n                            delete headers['Content-Length'];\n                            res.writeHead(status, headers);\n                            ws.pipe(zlib.createGzip()).pipe(res);\n                            return;\n                        }\n                        // Compress with deflate\n                        else if (accept.match(/\\bdeflate\\b/)) {\n                            headers['Content-Encoding'] = 'deflate';\n                            delete headers['Content-Length'];\n                            res.writeHead(status, headers);\n                            ws.pipe(zlib.createDeflate()).pipe(res);\n                            return;\n                        }\n                    }\n                }\n\n                // Send raw data\n                if (!headers['Content-Encoding']) {\n                    res.writeHead(status, headers);\n                    ws.pipe(res);\n                }\n\n            } else {\n                res.end();\n            }\n        });\n    } else {\n        next();\n    }\n});\n"]}