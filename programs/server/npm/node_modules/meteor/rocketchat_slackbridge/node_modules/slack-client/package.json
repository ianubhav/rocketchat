{
  "_args": [
    [
      {
        "raw": "slack-client@https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
        "scope": null,
        "escapedName": "slack-client",
        "name": "slack-client",
        "rawSpec": "https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
        "spec": "https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
        "type": "remote"
      },
      "/home/travis/build/RocketChat/Rocket.Chat/packages/rocketchat-slackbridge/.npm/package-new-13kwu8a"
    ]
  ],
  "_from": "slack-client@2.0.4",
  "_id": "slack-client@2.0.4",
  "_inCache": true,
  "_location": "/slack-client",
  "_phantomChildren": {},
  "_requested": {
    "raw": "slack-client@https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
    "scope": null,
    "escapedName": "slack-client",
    "name": "slack-client",
    "rawSpec": "https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
    "spec": "https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
  "_shasum": "279f48132d71caa8c2c7efad382f036ccac949a5",
  "_shrinkwrap": null,
  "_spec": "slack-client@https://registry.npmjs.org/slack-client/-/slack-client-2.0.4.tgz",
  "_where": "/home/travis/build/RocketChat/Rocket.Chat/packages/rocketchat-slackbridge/.npm/package-new-13kwu8a",
  "author": {
    "name": "Slack Technologies, Inc."
  },
  "bugs": {
    "url": "http://github.com/slackhq/node-slack-client/issues"
  },
  "dependencies": {
    "async": "^1.5.0",
    "eventemitter3": "^1.1.1",
    "https-proxy-agent": "^1.0.0",
    "inherits": "^2.0.1",
    "lodash": "^3.10.1",
    "request": "^2.64.0",
    "retry": "^0.8.0",
    "url-join": "0.0.1",
    "winston": "^2.1.1",
    "ws": "^1.0.1"
  },
  "description": "A library for creating a Slack client",
  "devDependencies": {
    "chai": "^3.3.0",
    "coveralls": "^2.11.6",
    "eslint": "^1.10.3",
    "eslint-config-airbnb": "^3.0.1",
    "istanbul": "^0.4.2",
    "istanbul-coveralls": "^1.0.3",
    "mocha": "~2.3.3",
    "mocha-lcov-reporter": "^1.0.0",
    "nock": "^2.15.0",
    "sinon": "^1.17.1"
  },
  "engines": {
    "node": ">= 0.12.x",
    "npm": ">= 1.1.x"
  },
  "homepage": "https://github.com/slackhq/node-slack-client#readme",
  "keywords": [
    "slack"
  ],
  "license": "MIT",
  "main": "./index",
  "name": "slack-client",
  "optionalDependencies": {},
  "readme": "# Node Library for the Slack APIs\n\n[![Build Status](https://travis-ci.org/slackhq/node-slack-client.svg?branch=master)](https://travis-ci.org/slackhq/node-slack-client)\n[![Coverage Status](https://coveralls.io/repos/github/slackhq/node-slack-client/badge.svg?branch=master)](https://coveralls.io/github/slackhq/node-slack-client?branch=master)\n\n## Motivation\n\nThis is a wrapper around the Slack [RTM](https://api.slack.com/rtm) and [Web](https://api.slack.com/web) APIs.\n\nThis library will provide the low level functionality you need to build reliable apps and projects on top of Slack's APIs. It:\n- handles reconnection logic and request retries\n- provides reasonable defaults for events and logging\n- defines a basic model layer and data-store for caching Slack RTM API responses\n\nThis library does not attempt to provide application level support, e.g. regex matching and filtering of the conversation stream. If you're looking for those kinds of features, you should check out one of the great libraries built on top of this.\n\n## Installation\n\n```bashp\nnpm install @slack/client --save\n```\n\n## Package name change!!\n\n**IMPORTANT** We're moving to NPM organizations, so going forwards the client will be published as a scoped module under the Slack organization.\n\nWe'll dual-publish both `@slack/client` and `slack-client` until at least `2.1.0` is released, and possibly past that, but please switch over before then.\n\n## Usage\n\n* [RTM Client](#rtm-client)\n  * [Creating an RTM client](#creating-an-rtm-client)\n  * [Listen to messages](#listen-to-messsages)\n  * [Send messages](#send-messages)\n  * [RTM Client Lifecycle](#rtm-client-lifecycle)\n* [Migrating from earlier versions](#migrating-from-earlier-versions) \n  * [Models](#models)\n\n## RTM Client\n\nThe [Real Time Messaging client](lib/clients/rtm) connects to [Slack's RTM API](https://api.slack.com/rtm) over a websocket.\n\nIt allows you to listen for activity in the Slack team you've connected to and push simple messages back to that team over the websocket.\n\n### Creating an RTM client\n\n```js\n\nvar RtmClient = require('slack-client').RtmClient;\n\nvar token = process.env.SLACK_API_TOKEN || '';\n\nvar rtm = new RtmClient(token, {logLevel: 'debug'});\nrtm.start();\n\n```\n\n### Capturing the `rtm.start` payload\n\nThe RTM client will emit a `RTM.AUTHENTICATED` event, with the `rtm.start` payload.\n\n```js\n\nvar CLIENT_EVENTS = require('slack-client').CLIENT_EVENTS;\n\nrtm.on(CLIENT_EVENTS.RTM.AUTHENTICATED, function (rtmStartData) {\n\n});\n\n\n```\n\n### Listen to messages\n\n```js\n\nvar RTM_EVENTS = require('slack-client').RTM_EVENTS;\n\nrtm.on(RTM_EVENTS.MESSAGE, function (message) {\n  // Listens to all `message` events from the team\n});\n\nrtm.on(RTM_EVENTS.CHANNEL_CREATED, function (message) {\n  // Listens to all `channel_created` events from the team\n});\n\n```\n\n### Send messages\n\n```js\n\nvar RTM_CLIENT_EVENTS = require('slack-client').CLIENT_EVENTS.RTM;\n\n// you need to wait for the client to fully connect before you can send messages\nrtm.on(RTM_CLIENT_EVENTS.RTM_CONNECTION_OPENED, function () {\n  // This will send the message 'this is a test message' to the channel identified by id 'C0CHZA86Q'\n  rtm.sendMessage('this is a test message', 'C0CHZA86Q', function messageSent() {\n    // optionally, you can supply a callback to execute once the message has been sent\n  });\n});\n\n```\n\n### RTM Client Lifecyle\n\nThe RTM client has its own lifecycle events. These reflect the different states the RTM client can be in as it connects to Slack's RTM API.\n\nThe full details of the client lifecyle are in the [RTM client events file](/lib/clients/events/client.js)\n\nThe most important events are:\n- `RTM_CONNECTION_OPENED`: the remote server has acked the socket and sent a `hello` message, the connection is now live and can be used to send messages\n- `DISCONNECT`: the RTM client has disconnected and will not try to reconnect again automatically\n\n## Migrating from earlier versions\n\nThis is an incomplete list of items to consider when you migrate from earlier versions. As issues and PRs are raised for things that don't work as expected we'll fill this out.\n\n### Models\n\nThe model objects no longer provide utility functions for working with the API. This is to decouple them from the client implementation. There should be functions on each of the clients that allow you to take the same actions you took from the model via the clients instead. The most common of these are below.\n\n#### Sending a message\n\n```js\n\nchannel.sendMessage('test message');\n\n```\n\nbecomes\n\n```js\n\nrtmClient.sendMessage('test message', channel.id);\n\n```\n\n#### Posting a message\n\n```js\n\nchannel.postMessage({\n  attachments: [...]\n});\n\n```\n\nbecomes\n\n```js\n\nvar data = {\n  attachments: [...]\n};\nwebClient.chat.postMessage(channelId, 'test message', data, function() {});\n\n```\n\n## Copyright\n\nCopyright &copy; Slack Technologies, Inc. MIT License; see LICENSE for further details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/slackhq/node-slack-client.git"
  },
  "scripts": {
    "cover": "istanbul cover --report lcovonly _mocha -- --recursive",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint . --ignore-path .gitignore",
    "test": "mocha --recursive --reporter spec test"
  },
  "version": "2.0.4"
}
